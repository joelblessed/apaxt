// Route to handle product update by ID
router.put("/update/:id", upload.array("images", 11), (req, res) => {
  const productId = parseInt(req.params.id);
  const updatedData = req.body;
  const files = req.files;

  // Read the existing products from db.json
  const dbPath = path.join(__dirname, "./jsonFiles/db.json");
  let db = { products: [] };

  if (fs.existsSync(dbPath)) {
    db = JSON.parse(fs.readFileSync(dbPath, "utf-8"));
  }

  // Find the product by ID
  const productIndex = db.products.findIndex((product) => product.id === productId);

  if (productIndex === -1) {
    return res.status(404).json({ message: "Product not found" });
  }

  // Update the product details
  const updatedProduct = {
    ...db.products[productIndex],
    ...updatedData,
    price: parseFloat(updatedData.price),
    quantity: parseInt(updatedData.quantity),
    numberInStock: parseInt(updatedData.numberInStock),
    discount: parseFloat(updatedData.discount),
    likes: parseInt(updatedData.likes),
    brand: JSON.parse(updatedData.brand),
    location: JSON.parse(updatedData.location),
    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,
  };

  db.products[productIndex] = updatedProduct;

  // Save the updated products back to db.json
  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));

  res.json({ message: "Product updated successfully!", product: updatedProduct });
});