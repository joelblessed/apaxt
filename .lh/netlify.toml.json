{
    "sourceFile": "netlify.toml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1742592698640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742592844928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,332 @@\n   to = \"/index.html\"\n   status = 200\n \n \n-  \n\\ No newline at end of file\n+  import React, { useState, useEffect } from \"react\";\n+import \"./formUpload.css\";\n+\n+const FormUpload = ({ api }) => {\n+  const [name, setName] = useState(\"\");\n+  const [brand, setBrand] = useState([{ id: Date.now(), name: \"\", image: \"\" }]);\n+  const [category, setCategory] = useState(\"\");\n+  const [price, setPrice] = useState(\"\");\n+  const [images, setImages] = useState([]);\n+  const [quantity, setQuantity] = useState(1);\n+  const [numberInStock, setNumberInStock] = useState(0);\n+  const [owner, setOwner] = useState(localStorage.getItem(\"username\"));\n+  const [ownerId, setOwnerId] = useState(localStorage.getItem(\"userId\"));\n+  const [color, setColor] = useState(\"\");\n+  const [phoneNumber, setPhoneNumber] = useState(\"\");\n+  const [description, setDescription] = useState(\"\");\n+  const [status, setStatus] = useState(\"\");\n+  const [weight, setWeight] = useState(0);\n+  const [address, setAddress] = useState(\"\");\n+  const [likes, setLikes] = useState(0);\n+  const [city, setCity] = useState(\"\");\n+  const [location, setLocation] = useState([\n+    { id: Date.now(), location: \"\", latitude: \"\", longitude: \"\" },\n+  ]);\n+  const [postedOn, setPostedOn] = useState(\n+    new Date().toLocaleString(\"en-US\", {\n+      year: \"numeric\",\n+      month: \"2-digit\",\n+      day: \"2-digit\",\n+      hour: \"2-digit\",\n+      minute: \"2-digit\",\n+      second: \"2-digit\",\n+    })\n+  );\n+  const [errors, setErrors] = useState({});\n+\n+  // Check if user exists, create if not\n+  useEffect(() => {\n+    const checkOrCreateUser = async () => {\n+      if (!ownerId) {\n+        alert(\"You must be logged in to upload a product.\");\n+        return;\n+      }\n+\n+      try {\n+        const response = await fetch(`${api}/api/user`, {\n+          method: \"POST\",\n+          headers: { \"Content-Type\": \"application/json\" },\n+          body: JSON.stringify({ username: owner, userId: ownerId }),\n+        });\n+\n+        if (!response.ok) {\n+          throw new Error(\"Failed to create user\");\n+        }\n+      } catch (error) {\n+        console.error(\"Error creating user:\", error);\n+      }\n+    };\n+\n+    checkOrCreateUser();\n+  }, [api, owner, ownerId]);\n+\n+  // Handle form submission\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    if (!validateForm()) return;\n+\n+    const productData = {\n+      name,\n+      brand,\n+      category,\n+      price,\n+      quantity,\n+      numberInStock,\n+      owner,\n+      weight,\n+      ownerId,\n+      color,\n+      phoneNumber,\n+      description,\n+      status,\n+      address,\n+      likes,\n+      city,\n+      location,\n+      postedOn,\n+      images: images.map((file) => URL.createObjectURL(file)), // Save image URLs\n+    };\n+\n+    try {\n+      const response = await fetch(`${api}/api/upload`, {\n+        method: \"POST\",\n+        headers: { \"Content-Type\": \"application/json\" },\n+        body: JSON.stringify(productData),\n+      });\n+\n+      if (response.ok) {\n+        alert(\"Product uploaded successfully!\");\n+        resetForm();\n+      } else {\n+        alert(\"Failed to upload product.\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error uploading product:\", error);\n+    }\n+  };\n+\n+  // Reset form\n+  const resetForm = () => {\n+    setName(\"\");\n+    setBrand([{ id: Date.now(), name: \"\", image: \"\" }]);\n+    setCategory(\"\");\n+    setPrice(\"\");\n+    setImages([]);\n+    setQuantity(1);\n+    setNumberInStock(0);\n+    setWeight(0);\n+    setPhoneNumber(\"\");\n+    setDescription(\"\");\n+    setStatus(\"\");\n+    setAddress(\"\");\n+    setLikes(0);\n+    setCity(\"\");\n+    setColor(\"\");\n+    setLocation([\n+      { id: Date.now(), location: \"\", latitude: \"\", longitude: \"\" },\n+    ]);\n+    setPostedOn(\n+      new Date().toLocaleString(\"en-US\", {\n+        year: \"numeric\",\n+        month: \"2-digit\",\n+        day: \"2-digit\",\n+        hour: \"2-digit\",\n+        minute: \"2-digit\",\n+        second: \"2-digit\",\n+      })\n+    );\n+  };\n+\n+  // Form validation (unchanged)\n+  const validateForm = () => {\n+    let validationErrors = {};\n+    // Add validation logic here\n+    setErrors(validationErrors);\n+    return Object.keys(validationErrors).length === 0;\n+  };\n+\n+  // Handle image upload (unchanged)\n+  const handleImageUpload = (e) => {\n+    const files = Array.from(e.target.files);\n+    setImages(files);\n+  };\n+\n+  return (\n+    <div className=\"form-container\">\n+      <h2>Upload Product</h2>\n+      <form onSubmit={handleSubmit}>\n+       \n+        {/* Product Name */}\n+        <label>Product Name</label>\n+        <input\n+          type=\"text\"\n+          placeholder=\"Product Name\"\n+          value={name}\n+          onChange={(e) => setName(e.target.value)}\n+          required\n+        />\n+        {errors.name && <p className=\"error\">{errors.name}</p>}\n+\n+        {/* Brand Input */}\n+        <label>Product Brand</label>\n+        {brand.map((b, index) => (\n+          <div key={index} className=\"brand-input\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Brand Name\"\n+              value={b.name}\n+              onChange={(e) => handleBrandChange(index, \"name\", e.target.value)}\n+              required\n+            />\n+          </div>\n+        ))}\n+        {errors.brand && <p className=\"error\">{errors.brand}</p>}\n+\n+        {/* Category Selection */}\n+        <label>Category</label>\n+        <select\n+          value={category}\n+          onChange={(e) => setCategory(e.target.value)}\n+          required\n+        >\n+          <option value=\"\">Select Category</option>\n+          <option value=\"Electronics\">Electronics</option>\n+          <option value=\"Clothing\">Clothing</option>\n+          <option value=\"Furniture\">Furniture</option>\n+        </select>\n+        {errors.category && <p className=\"error\">{errors.category}</p>}\n+\n+        {/* Price, Stock, Phone Number */}\n+        <label>Price</label>\n+        <input\n+          type=\"number\"\n+          placeholder=\"Price\"\n+          value={price}\n+          onChange={(e) => setPrice(e.target.value)}\n+          required\n+        />\n+        {errors.price && <p className=\"error\">{errors.price}</p>}\n+\n+        <label>Number in stock</label>\n+        <input\n+          type=\"number\"\n+          placeholder=\"Number in Stock\"\n+          value={numberInStock}\n+          onChange={(e) => setNumberInStock(e.target.value)}\n+          required\n+        />\n+        {errors.numberInStock && (\n+          <p className=\"error\">{errors.numberInStock}</p>\n+        )}\n+\n+        <label>Phone Number</label>\n+        <input\n+          type=\"tel\"\n+          placeholder=\"670000001\"\n+          value={phoneNumber}\n+          onChange={(e) => setPhoneNumber(e.target.value)}\n+          required\n+        />\n+        {errors.phoneNumber && <p className=\"error\">{errors.phoneNumber}</p>}\n+\n+        {/* Color and Weight */}\n+        <label>Color</label>\n+        <input\n+          type=\"text\"\n+          placeholder=\"Product Color\"\n+          value={color}\n+          onChange={(e) => setColor(e.target.value)}\n+          required\n+        />\n+        {errors.color && <p className=\"error\">{errors.color}</p>}\n+\n+        <label>Weight</label>\n+        <input\n+          type=\"number\"\n+          placeholder=\"Product Weight\"\n+          value={weight}\n+          onChange={(e) => setWeight(e.target.value)}\n+          required\n+        />\n+        {errors.weight && <p className=\"error\">{errors.weight}</p>}\n+\n+        {/* Description */}\n+        <label>Product Description</label>\n+        <textarea\n+          placeholder=\"Description\"\n+          value={description}\n+          onChange={(e) => setDescription(e.target.value)}\n+          required\n+        ></textarea>\n+        {errors.description && <p className=\"error\">{errors.description}</p>}\n+\n+        {/* Status Selection */}\n+        <label>Status</label>\n+        <select\n+          value={status}\n+          onChange={(e) => setStatus(e.target.value)}\n+          required\n+        >\n+          <option value=\"\">Select Status</option>\n+          <option value=\"New\">New</option>\n+          <option value=\"Used\">Used</option>\n+        </select>\n+        {errors.status && <p className=\"error\">{errors.status}</p>}\n+\n+        {/* Address and City */}\n+        <label>Address</label>\n+        <input\n+          type=\"text\"\n+          placeholder=\"Address\"\n+          value={address}\n+          onChange={(e) => setAddress(e.target.value)}\n+          required\n+        />\n+        {errors.address && <p className=\"error\">{errors.address}</p>}\n+\n+        <label>City</label>\n+        <input\n+          type=\"text\"\n+          placeholder=\"City\"\n+          value={city}\n+          onChange={(e) => setCity(e.target.value)}\n+          required\n+        />\n+        {errors.city && <p className=\"error\">{errors.city}</p>}\n+\n+        {/* Image Upload */}\n+        <label>Upload Images</label>\n+        <input\n+          type=\"file\"\n+          multiple\n+          accept=\"image/*\"\n+          onChange={handleImageUpload}\n+        />\n+        {errors.images && <p className=\"error\">{errors.images}</p>}\n+\n+        {/* Display Uploaded Images */}\n+        {images.length > 0 && (\n+          <div className=\"uploaded-images\">\n+            <h3>Uploaded Images:</h3>\n+            {images.map((file, index) => (\n+              <img\n+                key={index}\n+                src={URL.createObjectURL(file)}\n+                alt={`Uploaded ${index}`}\n+                width=\"100\"\n+              />\n+            ))}\n+          </div>\n+        )}\n+        <button type=\"submit\">Upload Product</button>\n+      </form>\n+    </div>\n+  );\n+};\n+\n+export default FormUpload;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742592878296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,332 +3,5 @@\n   to = \"/index.html\"\n   status = 200\n \n \n-  import React, { useState, useEffect } from \"react\";\n-import \"./formUpload.css\";\n-\n-const FormUpload = ({ api }) => {\n-  const [name, setName] = useState(\"\");\n-  const [brand, setBrand] = useState([{ id: Date.now(), name: \"\", image: \"\" }]);\n-  const [category, setCategory] = useState(\"\");\n-  const [price, setPrice] = useState(\"\");\n-  const [images, setImages] = useState([]);\n-  const [quantity, setQuantity] = useState(1);\n-  const [numberInStock, setNumberInStock] = useState(0);\n-  const [owner, setOwner] = useState(localStorage.getItem(\"username\"));\n-  const [ownerId, setOwnerId] = useState(localStorage.getItem(\"userId\"));\n-  const [color, setColor] = useState(\"\");\n-  const [phoneNumber, setPhoneNumber] = useState(\"\");\n-  const [description, setDescription] = useState(\"\");\n-  const [status, setStatus] = useState(\"\");\n-  const [weight, setWeight] = useState(0);\n-  const [address, setAddress] = useState(\"\");\n-  const [likes, setLikes] = useState(0);\n-  const [city, setCity] = useState(\"\");\n-  const [location, setLocation] = useState([\n-    { id: Date.now(), location: \"\", latitude: \"\", longitude: \"\" },\n-  ]);\n-  const [postedOn, setPostedOn] = useState(\n-    new Date().toLocaleString(\"en-US\", {\n-      year: \"numeric\",\n-      month: \"2-digit\",\n-      day: \"2-digit\",\n-      hour: \"2-digit\",\n-      minute: \"2-digit\",\n-      second: \"2-digit\",\n-    })\n-  );\n-  const [errors, setErrors] = useState({});\n-\n-  // Check if user exists, create if not\n-  useEffect(() => {\n-    const checkOrCreateUser = async () => {\n-      if (!ownerId) {\n-        alert(\"You must be logged in to upload a product.\");\n-        return;\n-      }\n-\n-      try {\n-        const response = await fetch(`${api}/api/user`, {\n-          method: \"POST\",\n-          headers: { \"Content-Type\": \"application/json\" },\n-          body: JSON.stringify({ username: owner, userId: ownerId }),\n-        });\n-\n-        if (!response.ok) {\n-          throw new Error(\"Failed to create user\");\n-        }\n-      } catch (error) {\n-        console.error(\"Error creating user:\", error);\n-      }\n-    };\n-\n-    checkOrCreateUser();\n-  }, [api, owner, ownerId]);\n-\n-  // Handle form submission\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    if (!validateForm()) return;\n-\n-    const productData = {\n-      name,\n-      brand,\n-      category,\n-      price,\n-      quantity,\n-      numberInStock,\n-      owner,\n-      weight,\n-      ownerId,\n-      color,\n-      phoneNumber,\n-      description,\n-      status,\n-      address,\n-      likes,\n-      city,\n-      location,\n-      postedOn,\n-      images: images.map((file) => URL.createObjectURL(file)), // Save image URLs\n-    };\n-\n-    try {\n-      const response = await fetch(`${api}/api/upload`, {\n-        method: \"POST\",\n-        headers: { \"Content-Type\": \"application/json\" },\n-        body: JSON.stringify(productData),\n-      });\n-\n-      if (response.ok) {\n-        alert(\"Product uploaded successfully!\");\n-        resetForm();\n-      } else {\n-        alert(\"Failed to upload product.\");\n-      }\n-    } catch (error) {\n-      console.error(\"Error uploading product:\", error);\n-    }\n-  };\n-\n-  // Reset form\n-  const resetForm = () => {\n-    setName(\"\");\n-    setBrand([{ id: Date.now(), name: \"\", image: \"\" }]);\n-    setCategory(\"\");\n-    setPrice(\"\");\n-    setImages([]);\n-    setQuantity(1);\n-    setNumberInStock(0);\n-    setWeight(0);\n-    setPhoneNumber(\"\");\n-    setDescription(\"\");\n-    setStatus(\"\");\n-    setAddress(\"\");\n-    setLikes(0);\n-    setCity(\"\");\n-    setColor(\"\");\n-    setLocation([\n-      { id: Date.now(), location: \"\", latitude: \"\", longitude: \"\" },\n-    ]);\n-    setPostedOn(\n-      new Date().toLocaleString(\"en-US\", {\n-        year: \"numeric\",\n-        month: \"2-digit\",\n-        day: \"2-digit\",\n-        hour: \"2-digit\",\n-        minute: \"2-digit\",\n-        second: \"2-digit\",\n-      })\n-    );\n-  };\n-\n-  // Form validation (unchanged)\n-  const validateForm = () => {\n-    let validationErrors = {};\n-    // Add validation logic here\n-    setErrors(validationErrors);\n-    return Object.keys(validationErrors).length === 0;\n-  };\n-\n-  // Handle image upload (unchanged)\n-  const handleImageUpload = (e) => {\n-    const files = Array.from(e.target.files);\n-    setImages(files);\n-  };\n-\n-  return (\n-    <div className=\"form-container\">\n-      <h2>Upload Product</h2>\n-      <form onSubmit={handleSubmit}>\n-       \n-        {/* Product Name */}\n-        <label>Product Name</label>\n-        <input\n-          type=\"text\"\n-          placeholder=\"Product Name\"\n-          value={name}\n-          onChange={(e) => setName(e.target.value)}\n-          required\n-        />\n-        {errors.name && <p className=\"error\">{errors.name}</p>}\n-\n-        {/* Brand Input */}\n-        <label>Product Brand</label>\n-        {brand.map((b, index) => (\n-          <div key={index} className=\"brand-input\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Brand Name\"\n-              value={b.name}\n-              onChange={(e) => handleBrandChange(index, \"name\", e.target.value)}\n-              required\n-            />\n-          </div>\n-        ))}\n-        {errors.brand && <p className=\"error\">{errors.brand}</p>}\n-\n-        {/* Category Selection */}\n-        <label>Category</label>\n-        <select\n-          value={category}\n-          onChange={(e) => setCategory(e.target.value)}\n-          required\n-        >\n-          <option value=\"\">Select Category</option>\n-          <option value=\"Electronics\">Electronics</option>\n-          <option value=\"Clothing\">Clothing</option>\n-          <option value=\"Furniture\">Furniture</option>\n-        </select>\n-        {errors.category && <p className=\"error\">{errors.category}</p>}\n-\n-        {/* Price, Stock, Phone Number */}\n-        <label>Price</label>\n-        <input\n-          type=\"number\"\n-          placeholder=\"Price\"\n-          value={price}\n-          onChange={(e) => setPrice(e.target.value)}\n-          required\n-        />\n-        {errors.price && <p className=\"error\">{errors.price}</p>}\n-\n-        <label>Number in stock</label>\n-        <input\n-          type=\"number\"\n-          placeholder=\"Number in Stock\"\n-          value={numberInStock}\n-          onChange={(e) => setNumberInStock(e.target.value)}\n-          required\n-        />\n-        {errors.numberInStock && (\n-          <p className=\"error\">{errors.numberInStock}</p>\n-        )}\n-\n-        <label>Phone Number</label>\n-        <input\n-          type=\"tel\"\n-          placeholder=\"670000001\"\n-          value={phoneNumber}\n-          onChange={(e) => setPhoneNumber(e.target.value)}\n-          required\n-        />\n-        {errors.phoneNumber && <p className=\"error\">{errors.phoneNumber}</p>}\n-\n-        {/* Color and Weight */}\n-        <label>Color</label>\n-        <input\n-          type=\"text\"\n-          placeholder=\"Product Color\"\n-          value={color}\n-          onChange={(e) => setColor(e.target.value)}\n-          required\n-        />\n-        {errors.color && <p className=\"error\">{errors.color}</p>}\n-\n-        <label>Weight</label>\n-        <input\n-          type=\"number\"\n-          placeholder=\"Product Weight\"\n-          value={weight}\n-          onChange={(e) => setWeight(e.target.value)}\n-          required\n-        />\n-        {errors.weight && <p className=\"error\">{errors.weight}</p>}\n-\n-        {/* Description */}\n-        <label>Product Description</label>\n-        <textarea\n-          placeholder=\"Description\"\n-          value={description}\n-          onChange={(e) => setDescription(e.target.value)}\n-          required\n-        ></textarea>\n-        {errors.description && <p className=\"error\">{errors.description}</p>}\n-\n-        {/* Status Selection */}\n-        <label>Status</label>\n-        <select\n-          value={status}\n-          onChange={(e) => setStatus(e.target.value)}\n-          required\n-        >\n-          <option value=\"\">Select Status</option>\n-          <option value=\"New\">New</option>\n-          <option value=\"Used\">Used</option>\n-        </select>\n-        {errors.status && <p className=\"error\">{errors.status}</p>}\n-\n-        {/* Address and City */}\n-        <label>Address</label>\n-        <input\n-          type=\"text\"\n-          placeholder=\"Address\"\n-          value={address}\n-          onChange={(e) => setAddress(e.target.value)}\n-          required\n-        />\n-        {errors.address && <p className=\"error\">{errors.address}</p>}\n-\n-        <label>City</label>\n-        <input\n-          type=\"text\"\n-          placeholder=\"City\"\n-          value={city}\n-          onChange={(e) => setCity(e.target.value)}\n-          required\n-        />\n-        {errors.city && <p className=\"error\">{errors.city}</p>}\n-\n-        {/* Image Upload */}\n-        <label>Upload Images</label>\n-        <input\n-          type=\"file\"\n-          multiple\n-          accept=\"image/*\"\n-          onChange={handleImageUpload}\n-        />\n-        {errors.images && <p className=\"error\">{errors.images}</p>}\n-\n-        {/* Display Uploaded Images */}\n-        {images.length > 0 && (\n-          <div className=\"uploaded-images\">\n-            <h3>Uploaded Images:</h3>\n-            {images.map((file, index) => (\n-              <img\n-                key={index}\n-                src={URL.createObjectURL(file)}\n-                alt={`Uploaded ${index}`}\n-                width=\"100\"\n-              />\n-            ))}\n-          </div>\n-        )}\n-        <button type=\"submit\">Upload Product</button>\n-      </form>\n-    </div>\n-  );\n-};\n-\n-export default FormUpload;\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1742592698640,
            "name": "Commit-0",
            "content": "[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n\n  "
        }
    ]
}