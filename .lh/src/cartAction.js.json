{
    "sourceFile": "src/cartAction.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 167,
            "patches": [
                {
                    "date": 1739958215371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739958277890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(http://localhost:3000/carts/${userId});\n+        const response = await fetch/carts/${userId});\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1739958283331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch/carts/${userId});\n+        const response = await fetch(`/carts/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1739958289618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`/carts/${userId}`);\n+        const response = await fetch(`${}/carts/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1739958299376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`${}/carts/${userId}`);\n+        const response = await fetch(`${api}/cart/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1739958338728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(http://localhost:3000/carts/${userId}, {\n+        await fetch(`/carts/${userId}, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739958347120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(`/carts/${userId}, {\n+        await fetch(`/cart/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739958353044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(`/cart/${userId}`, {\n+        await fetch(`${}/cart/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739962449929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`${api}/cart/${userId}`);\n+        const response = await fetch(http://localhost:3000/carts/${userId});\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(`${}/cart/${userId}`, {\n+        await fetch(http://localhost:3000/carts/${userId}, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739962458308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(http://localhost:3000/carts/${userId});\n+        const response = await fetch(`http://localhost:3000/carts/${userId});\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1739962467096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`http://localhost:3000/carts/${userId});\n+        const response = await fetch(`http://localhost:3000/carts/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(http://localhost:3000/carts/${userId}, {\n+        await fetch(`http://localhost:3000/carts/${userId}, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739963479862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`http://localhost:3000/carts/${userId}`);\n+        const response = await fetch(`http://localhost:5000/carts/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(`http://localhost:3000/carts/${userId}, {\n+        await fetch(`http://localhost:3000/carts/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1739963487560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     return async (dispatch) => {\n         let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n         // Fetch user's cart from db.json\n-        const response = await fetch(`http://localhost:5000/carts/${userId}`);\n+        const response = await fetch(`http://localhost:5000/cart/${userId}`);\n         const userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge local cart and user cart (avoid duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n@@ -26,9 +26,9 @@\n             payload: mergedCart,\n         });\n \n         // Save merged cart to db.json\n-        await fetch(`http://localhost:3000/carts/${userId}`, {\n+        await fetch(`http://localhost:3000/cart/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1740474049677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,53 @@\n-export const addToCart = (product) => {\n-    return (dispatch, getState) => {\n-        dispatch({\n-            type: \"ADD_TO_CART\",\n-            payload: product,\n-        });\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-        // Save cart to localStorage before login\n-        localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n-    };\n+const API_URL = \"http://localhost:3000/cart\";\n+\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n-export const loadCartAfterLogin = (userId) => {\n-    return async (dispatch) => {\n-        let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = (userId) => async (dispatch) => {\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n-        // Fetch user's cart from db.json\n-        const response = await fetch(`http://localhost:5000/cart/${userId}`);\n-        const userCart = response.ok ? await response.json() : { cart: [] };\n+    try {\n+        const response = await fetch(${API_URL}/${userId});\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        // Merge local cart and user cart (avoid duplicates)\n+        // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n-        dispatch({\n-            type: \"SET_CART\",\n-            payload: mergedCart,\n-        });\n+        dispatch(setCart(mergedCart));\n \n-        // Save merged cart to db.json\n-        await fetch(`http://localhost:3000/cart/${userId}`, {\n+        // Save merged cart to the server\n+        await fetch(${API_URL}/${userId}, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n-        // Clear localStorage after merging\n+        // Clear local cart after merging\n         localStorage.removeItem(\"cart\");\n-    };\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n+    dispatch(removeFromCart(productId));\n+\n+    // Update the server\n+    await fetch(${API_URL}/${userId}, {\n+        method: \"PUT\",\n+        headers: { \"Content-Type\": \"application/json\" },\n+        body: JSON.stringify({ cart: getState().cart.items }),\n+    });\n+};\n+\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => (dispatch) => {\n+    dispatch(clearCart());\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740474073160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     // Update the server\n-    await fetch(${API_URL}/${userId}, {\n+    await fetch(`${API_URL}/${userId}, {\n         method: \"PUT\",\n         headers: { \"Content-Type\": \"application/json\" },\n         body: JSON.stringify({ cart: getState().cart.items }),\n     });\n"
                },
                {
                    "date": 1740474098577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(${API_URL}/${userId});\n+        const response = await fetch(`${API_URL}/${userId});\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n@@ -39,9 +39,9 @@\n export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     // Update the server\n-    await fetch(`${API_URL}/${userId}, {\n+    await fetch(`${API_URL}/${userId}`, {\n         method: \"PUT\",\n         headers: { \"Content-Type\": \"application/json\" },\n         body: JSON.stringify({ cart: getState().cart.items }),\n     });\n"
                },
                {
                    "date": 1740474105246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${userId});\n+        const response = await fetch(`${API_URL}/${userId}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1740474118470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/${userId}, {\n+        await fetch(   `${API_URL}/${userId}, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1740474126216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(   `${API_URL}/${userId}, {\n+        await fetch(`${API_URL}/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1740476276865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740479591101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,22 +8,22 @@\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n // *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = (userId) => async (dispatch) => {\n+export const loadCartAfterLogin = (2) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${userId}`);\n+        const response = await fetch(`${API_URL}/${2}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/${userId}`, {\n+        await fetch(`${API_URL}/${2}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n@@ -35,13 +35,13 @@\n     }\n };\n \n // *Remove Item from Cart*\n-export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n+export const removeFromCartAPI = (productId, 2) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     // Update the server\n-    await fetch(`${API_URL}/${userId}`, {\n+    await fetch(`${API_URL}/${2}`, {\n         method: \"PUT\",\n         headers: { \"Content-Type\": \"application/json\" },\n         body: JSON.stringify({ cart: getState().cart.items }),\n     });\n"
                },
                {
                    "date": 1740479601044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,22 +8,22 @@\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n // *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = (2) => async (dispatch) => {\n+export const loadCartAfterLogin = () => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${2}`);\n+        const response = await fetch(`${API_URL}/${}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/${2}`, {\n+        await fetch(`${API_URL}/${}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n@@ -35,13 +35,13 @@\n     }\n };\n \n // *Remove Item from Cart*\n-export const removeFromCartAPI = (productId, 2) => async (dispatch, getState) => {\n+export const removeFromCartAPI = (productId, ) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     // Update the server\n-    await fetch(`${API_URL}/${2}`, {\n+    await fetch(`${API_URL}/${}`, {\n         method: \"PUT\",\n         headers: { \"Content-Type\": \"application/json\" },\n         body: JSON.stringify({ cart: getState().cart.items }),\n     });\n"
                },
                {
                    "date": 1740482375797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,24 +6,24 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n-\n+ const \n // *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n+export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${}`);\n+        const response = await fetch(`${API_URL}/${userId}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/${}`, {\n+        await fetch(`${API_URL}/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n@@ -35,13 +35,13 @@\n     }\n };\n \n // *Remove Item from Cart*\n-export const removeFromCartAPI = (productId, ) => async (dispatch, getState) => {\n+export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     // Update the server\n-    await fetch(`${API_URL}/${}`, {\n+    await fetch(`${API_URL}/${userId}`, {\n         method: \"PUT\",\n         headers: { \"Content-Type\": \"application/json\" },\n         body: JSON.stringify({ cart: getState().cart.items }),\n     });\n"
                },
                {
                    "date": 1740482382980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n- const \n+ const userId\n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n"
                },
                {
                    "date": 1740482800718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n- const userId\n+\n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n"
                },
                {
                    "date": 1740482810381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n-\n+console.log \n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n"
                },
                {
                    "date": 1740482816081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n-console.log \n+console.log (user)\n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n"
                },
                {
                    "date": 1740482829469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n-console.log (user)\n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n"
                },
                {
                    "date": 1740483216615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,14 @@\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n // *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = (userId) => async (dispatch) => {\n+\n+console.log (userId)\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${userId}`);\n+        const response = await fetch();\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n"
                },
                {
                    "date": 1740483339302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,18 @@\n console.log (userId)\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch();\n+        const response = await fetch(`http://localhost:3001/cart?userId=${userId}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/${userId}`, {\n+        await fetch(`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1740483493392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,18 @@\n console.log (userId)\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`http://localhost:3001/cart?userId=${userId}`);\n+        const response = await fetch(`${API_URL}/${userId}`);\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & User Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`, {\n+        await fetch(`${API_URL}/${userId}`, {\n             method: \"PUT\",\n             headers: { \"Content-Type\": \"application/json\" },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n"
                },
                {
                    "date": 1740484936307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,41 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n     localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n+\n // *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = (userId) => async (dispatch) => {\n-\n-console.log (userId)\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        const response = await fetch(`${API_URL}/${userId}`);\n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+\n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        // Merge Local Cart & User Cart (Remove Duplicates)\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/${userId}`, {\n-            method: \"PUT\",\n-            headers: { \"Content-Type\": \"application/json\" },\n-            body: JSON.stringify({ cart: mergedCart }),\n+        await fetch(${API_URL}/merge, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ localCart }),\n         });\n \n         // Clear local cart after merging\n         localStorage.removeItem(\"cart\");\n@@ -35,20 +43,55 @@\n         console.error(\"Error fetching cart:\", error);\n     }\n };\n \n+// *Add to Cart After Login*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n // *Remove Item from Cart*\n-export const removeFromCartAPI = (productId, userId) => async (dispatch, getState) => {\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(removeFromCart(productId));\n \n-    // Update the server\n-    await fetch(`${API_URL}/${userId}`, {\n-        method: \"PUT\",\n-        headers: { \"Content-Type\": \"application/json\" },\n-        body: JSON.stringify({ cart: getState().cart.items }),\n-    });\n+    try {\n+        await fetch(${API_URL}/${productId}, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n };\n \n // *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => (dispatch) => {\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740484944257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \n     try {\n         await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740484999412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \n     try {\n         await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740485005055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740485015010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -70,9 +70,9 @@\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740485027115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -31,9 +31,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\":`` Bearer ${token}\n             },\n             body: JSON.stringify({ localCart }),\n         });\n \n"
                },
                {
                    "date": 1740485042048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\":`` Bearer ${token}\n+                \"Authorization\":` Bearer ${token}`\n             },\n             body: JSON.stringify({ localCart }),\n         });\n \n"
                },
                {
                    "date": 1740485056932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\":` Bearer ${token}`\n"
                },
                {
                    "date": 1740485068659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\":` Bearer ${token}`\n@@ -54,9 +54,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740485079129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -88,9 +88,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\":  Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740485084882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\":  Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740485096369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740486089360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,70 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n-// *Add to Cart Before Login (Saves in LocalStorage)*\n+// *Save Cart to Local Storage*\n+const saveCartToLocalStorage = (cart) => {\n+    localStorage.setItem(\"cart\", JSON.stringify(cart));\n+};\n+\n+// *Get Token from Local Storage*\n+const getAuthHeaders = () => {\n+    const token = localStorage.getItem(\"token\");\n+    return token ? { \"Authorization\": Bearer ${token} } : {};\n+};\n+\n+// *Add to Cart Before Login (Save in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n+    saveCartToLocalStorage(getState().cart.items);\n };\n \n-// *Load Cart After Login (Merge Local with Server)*\n+// *Load Cart After Login & Merge with Server*\n export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n+    const localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    \n     try {\n-        // Fetch user cart from the server\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+        const response = await fetch(API_URL, { \n+            method: \"GET\", \n+            headers: { ...getAuthHeaders() } \n         });\n \n-        let userCart = response.ok ? await response.json() : { cart: [] };\n+        const serverCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n+        const mergedCart = [...new Map([...localCart, ...serverCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n+        // Save merged cart to server\n+        await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\":` Bearer ${token}`\n+                \"Content-Type\": \"application/json\", \n+                ...getAuthHeaders()\n             },\n-            body: JSON.stringify({ localCart }),\n+            body: JSON.stringify({ cart: mergedCart }),\n         });\n \n         // Clear local cart after merging\n         localStorage.removeItem(\"cart\");\n     } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n+        console.error(\"Error loading cart:\", error);\n     }\n };\n \n-// *Add to Cart After Login*\n-export const addToCartAPI = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n+// *Add to Cart After Login (Updates Server)*\n+export const addToCartAPI = (product) => async (dispatch, getState) => {\n     dispatch(addToCart(product));\n+    saveCartToLocalStorage(getState().cart.items);\n \n     try {\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                ...getAuthHeaders(),\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -65,32 +73,30 @@\n };\n \n // *Remove Item from Cart*\n export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n     dispatch(removeFromCart(productId));\n+    saveCartToLocalStorage(getState().cart.items);\n \n     try {\n-        await fetch(`${API_URL}/${productId}`, {\n+        await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { ...getAuthHeaders() },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n \n-// *Clear Cart (Logout)*\n+// *Clear Cart on Logout*\n export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n     dispatch(clearCart());\n+    localStorage.removeItem(\"cart\");\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { ...getAuthHeaders() },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740486099160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3000/cart\";\n \n // *Save Cart to Local Storage*\n"
                },
                {
                    "date": 1740486106040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Save Cart to Local Storage*\n const saveCartToLocalStorage = (cart) => {\n     localStorage.setItem(\"cart\", JSON.stringify(cart));\n"
                },
                {
                    "date": 1740486111711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n // *Get Token from Local Storage*\n const getAuthHeaders = () => {\n     const token = localStorage.getItem(\"token\");\n-    return token ? { \"Authorization\": Bearer ${token} } : {};\n+    return token ? { \"Authorization\": `Bearer ${token} } : {};\n };\n \n // *Add to Cart Before Login (Save in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n"
                },
                {
                    "date": 1740486171811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n // *Get Token from Local Storage*\n const getAuthHeaders = () => {\n     const token = localStorage.getItem(\"token\");\n-    return token ? { \"Authorization\": `Bearer ${token} } : {};\n+    return token ? { \"Authorization\": `Bearer ${token}` } : {};\n };\n \n // *Add to Cart Before Login (Save in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n@@ -36,9 +36,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\", \n                 ...getAuthHeaders()\n"
                },
                {
                    "date": 1740486181808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to server\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\", \n                 ...getAuthHeaders()\n@@ -77,9 +77,9 @@\n     dispatch(removeFromCart(productId));\n     saveCartToLocalStorage(getState().cart.items);\n \n     try {\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { ...getAuthHeaders() },\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740486362639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,62 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3001/cart\";\n \n-// *Save Cart to Local Storage*\n-const saveCartToLocalStorage = (cart) => {\n-    localStorage.setItem(\"cart\", JSON.stringify(cart));\n-};\n-\n-// *Get Token from Local Storage*\n-const getAuthHeaders = () => {\n-    const token = localStorage.getItem(\"token\");\n-    return token ? { \"Authorization\": `Bearer ${token}` } : {};\n-};\n-\n-// *Add to Cart Before Login (Save in LocalStorage)*\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n-    saveCartToLocalStorage(getState().cart.items);\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n-// *Load Cart After Login & Merge with Server*\n+// *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n-    const localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    \n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n     try {\n-        const response = await fetch(API_URL, { \n-            method: \"GET\", \n-            headers: { ...getAuthHeaders() } \n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n-        const serverCart = response.ok ? await response.json() : { cart: [] };\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n \n         // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...serverCart.cart].map(item => [item.id, item])).values()];\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n-        // Save merged cart to server\n+        // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n-                \"Content-Type\": \"application/json\", \n-                ...getAuthHeaders()\n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\":` Bearer ${token}`\n             },\n-            body: JSON.stringify({ cart: mergedCart }),\n+            body: JSON.stringify({ localCart }),\n         });\n \n         // Clear local cart after merging\n         localStorage.removeItem(\"cart\");\n     } catch (error) {\n-        console.error(\"Error loading cart:\", error);\n+        console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *Add to Cart After Login (Updates Server)*\n-export const addToCartAPI = (product) => async (dispatch, getState) => {\n+// *Add to Cart After Login*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(addToCart(product));\n-    saveCartToLocalStorage(getState().cart.items);\n \n     try {\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                ...getAuthHeaders(),\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -73,30 +65,32 @@\n };\n \n // *Remove Item from Cart*\n export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(removeFromCart(productId));\n-    saveCartToLocalStorage(getState().cart.items);\n \n     try {\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { ...getAuthHeaders() },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n \n-// *Clear Cart on Logout*\n+// *Clear Cart (Logout)*\n export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(clearCart());\n-    localStorage.removeItem(\"cart\");\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { ...getAuthHeaders() },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740486881168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +0,0 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:3001/cart\";\n-\n-// *Add to Cart Before Login (Saves in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        // Fetch user cart from the server\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\":` Bearer ${token}`\n-            },\n-            body: JSON.stringify({ localCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Add to Cart After Login*\n-export const addToCartAPI = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Remove Item from Cart*\n-export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(removeFromCart(productId));\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740486890927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+\n+const API_URL = \"http://localhost:3000/cart\";\n+\n+// *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    localCart.push(product);\n+    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+};\n+\n+// *🔹 Load Cart After Login (Merge Local & Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    if (!token) return;\n+\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+\n+        if (!response.ok) throw new Error(\"Failed to fetch cart\");\n+\n+        let userCart = await response.json();\n+\n+        // *Merge Local Cart & Server Cart (Avoid Duplicates)*\n+        const mergedCart = [\n+            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n+        ];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // *Save Merged Cart to Server*\n+        await fetch(${API_URL}/merge, {\n+            method: \"POST\",\n+            headers: {\n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ mergedCart }),\n+        });\n+\n+        localStorage.removeItem(\"cart\"); // *Clear Local Cart after Sync*\n+    } catch (error) {\n+        console.error(\"Error loading cart:\", error);\n+    }\n+};\n+\n+// *🔹 Add to Cart (After Login - Update Server)*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    \n+    if (!token) {\n+        // If user is not logged in, save locally\n+        return addToCartBeforeLogin(product)(dispatch);\n+    }\n+\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: {\n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740486899532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740486904972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": 1Bearer ${token} },\n         });\n \n         if (!response.ok) throw new Error(\"Failed to fetch cart\");\n \n"
                },
                {
                    "date": 1740486916068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": 1Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         if (!response.ok) throw new Error(\"Failed to fetch cart\");\n \n@@ -39,9 +39,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740486939134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740486945415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`` {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740486956679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge`` {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -66,9 +66,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740487433663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge`, {\n+        await fetch(`${API_URL}/merge`` {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -66,9 +66,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740487441957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,97 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3001/cart\";\n \n-// *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n-\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    localCart.push(product);\n-    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n-// *🔹 Load Cart After Login (Merge Local & Server)*\n+// *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n-    if (!token) return;\n-\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n+        // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n-        if (!response.ok) throw new Error(\"Failed to fetch cart\");\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        let userCart = await response.json();\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n-        // *Merge Local Cart & Server Cart (Avoid Duplicates)*\n-        const mergedCart = [\n-            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n-        ];\n-\n         dispatch(setCart(mergedCart));\n \n-        // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge`` {\n+        // Save merged cart to the server\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n-            headers: {\n+            headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\":` Bearer ${token}`\n             },\n-            body: JSON.stringify({ mergedCart }),\n+            body: JSON.stringify({ localCart }),\n         });\n \n-        localStorage.removeItem(\"cart\"); // *Clear Local Cart after Sync*\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n     } catch (error) {\n-        console.error(\"Error loading cart:\", error);\n+        console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *🔹 Add to Cart (After Login - Update Server)*\n+// *Add to Cart After Login*\n export const addToCartAPI = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n-    \n-    if (!token) {\n-        // If user is not logged in, save locally\n-        return addToCartBeforeLogin(product)(dispatch);\n-    }\n \n     dispatch(addToCart(product));\n \n     try {\n         await fetch(API_URL, {\n             method: \"POST\",\n-            headers: {\n+            headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n         console.error(\"Error adding product to cart:\", error);\n     }\n+};\n+\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(removeFromCart(productId));\n+\n+    try {\n+        await fetch(`${API_URL}/${productId}`, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487759588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n@@ -16,9 +16,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -27,13 +27,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n+        await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\":` Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n             body: JSON.stringify({ localCart }),\n         });\n \n@@ -54,9 +54,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -70,11 +70,11 @@\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(`${API_URL}/${productId}`, {\n+        await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n@@ -88,9 +88,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740487766187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740487774718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n@@ -88,9 +88,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740487782693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,11 @@\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740487791775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -72,9 +72,9 @@\n \n     try {\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740487803617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ localCart }),\n         });\n \n@@ -54,9 +54,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740487822535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ localCart }),\n         });\n \n"
                },
                {
                    "date": 1740487839828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -27,9 +27,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740487845904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n"
                },
                {
                    "date": 1740487852988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n"
                },
                {
                    "date": 1740487870522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740488783610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,104 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n-// *Add to Cart Before Login (Saves in LocalStorage)*\n+// *🔹 Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    localCart.push(product);\n+    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n };\n \n-// *Load Cart After Login (Merge Local with Server)*\n+// *🔹 Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n+        // *Merge Local Cart & Server Cart (Remove Duplicates)*\n+        const mergedCart = [\n+            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n+        ];\n \n         dispatch(setCart(mergedCart));\n \n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n+        // *Save merged cart to the server*\n+        await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n-            body: JSON.stringify({ localCart }),\n+            body: JSON.stringify({ cart: mergedCart }),\n         });\n \n-        // Clear local cart after merging\n+        // *Clear local cart after merging*\n         localStorage.removeItem(\"cart\");\n+\n     } catch (error) {\n         console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *Add to Cart After Login*\n+// *🔹 Add to Cart After Login*\n export const addToCartAPI = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(addToCart(product));\n \n     try {\n+        // Add product to the server cart after login\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n         console.error(\"Error adding product to cart:\", error);\n     }\n };\n \n-// *Remove Item from Cart*\n+// *🔹 Remove Item from Cart*\n export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        await fetch(`${API_URL}/${productId}`, {\n+        // Remove item from server cart\n+        await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n \n-// *Clear Cart (Logout)*\n+// *🔹 Clear Cart (Logout)*\n export const clearCartOnLogout = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(clearCart());\n \n     try {\n+        // Clear cart from the server on logout\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740488790627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n     try {\n         // Clear cart from the server on logout\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740488800258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     try {\n         // Remove item from server cart\n         await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n@@ -96,9 +96,9 @@\n     try {\n         // Clear cart from the server on logout\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740488806144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,11 @@\n     dispatch(removeFromCart(productId));\n \n     try {\n         // Remove item from server cart\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740488815303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n@@ -77,9 +77,9 @@\n     dispatch(removeFromCart(productId));\n \n     try {\n         // Remove item from server cart\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740488822375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save merged cart to the server*\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740488830845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -31,9 +31,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save merged cart to the server*\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740488847716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -60,9 +60,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740488858691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *🔹 Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n@@ -60,9 +60,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740489051076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,15 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3001/cart\";\n \n-// *🔹 Add to Cart Before Login (Saves in LocalStorage)*\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    localCart.push(product);\n-    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n };\n \n-// *🔹 Load Cart After Login (Merge Local with Server)*\n+// *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n@@ -23,41 +21,37 @@\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        // *Merge Local Cart & Server Cart (Remove Duplicates)*\n-        const mergedCart = [\n-            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n-        ];\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n \n-        // *Save merged cart to the server*\n+        // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n             },\n-            body: JSON.stringify({ cart: mergedCart }),\n+            body: JSON.stringify({ localCart }),\n         });\n \n-        // *Clear local cart after merging*\n+        // Clear local cart after merging\n         localStorage.removeItem(\"cart\");\n-\n     } catch (error) {\n         console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *🔹 Add to Cart After Login*\n+// *Add to Cart After Login*\n export const addToCartAPI = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(addToCart(product));\n \n     try {\n-        // Add product to the server cart after login\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n@@ -69,16 +63,15 @@\n         console.error(\"Error adding product to cart:\", error);\n     }\n };\n \n-// *🔹 Remove Item from Cart*\n+// *Remove Item from Cart*\n export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(removeFromCart(productId));\n \n     try {\n-        // Remove item from server cart\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n@@ -86,16 +79,15 @@\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n \n-// *🔹 Clear Cart (Logout)*\n+// *Clear Cart (Logout)*\n export const clearCartOnLogout = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n     dispatch(clearCart());\n \n     try {\n-        // Clear cart from the server on logout\n         await fetch(API_URL, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": `Bearer ${token}` },\n         });\n"
                },
                {
                    "date": 1740489533532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +0,0 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:3001/cart\";\n-\n-// *Add to Cart Before Login (Saves in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        // Fetch user cart from the server\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ localCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Add to Cart After Login*\n-export const addToCartAPI = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Remove Item from Cart*\n-export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(removeFromCart(productId));\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740489544951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+\n+const API_URL = \"http://localhost:3000/cart\";\n+\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    localCart.push(product);\n+    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [\n+            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n+        ];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // Save merged cart to the server\n+        await fetch(${API_URL}/merge, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: mergedCart }),\n+        });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Add to Cart After Login (Save to Server and Redux)*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(addToCart(product)); // Update Redux state\n+\n+    try {\n+        // Save the updated cart on the server\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(removeFromCart(productId)); // Update Redux state\n+\n+    try {\n+        // Remove item from server cart\n+        await fetch(${API_URL}/${productId}, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        // Clear cart from the server on logout\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740489556320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n@@ -18,9 +18,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n"
                },
                {
                    "date": 1740489564294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     try {\n         // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -31,9 +31,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": Bearer ${token}\n"
                },
                {
                    "date": 1740489571565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740489580161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740489589692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -77,9 +77,9 @@\n     dispatch(removeFromCart(productId)); // Update Redux state\n \n     try {\n         // Remove item from server cart\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \"Authorization\": Bearer ${token} },\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740489596274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,11 @@\n     dispatch(removeFromCart(productId)); // Update Redux state\n \n     try {\n         // Remove item from server cart\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n"
                },
                {
                    "date": 1740489605808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     try {\n         // Remove item from server cart\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n@@ -96,9 +96,9 @@\n     try {\n         // Clear cart from the server on logout\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740490052055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,105 +1,77 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n-// *Add to Cart Before Login (Saves in LocalStorage)*\n+// *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n+\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n     localCart.push(product);\n     localStorage.setItem(\"cart\", JSON.stringify(localCart));\n };\n \n-// *Load Cart After Login (Merge Local with Server)*\n+// *🔹 Load Cart After Login (Merge Local & Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n+    if (!token) return;\n+\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        // Fetch user cart from the server\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n \n-        let userCart = response.ok ? await response.json() : { cart: [] };\n+        if (!response.ok) throw new Error(\"Failed to fetch cart\");\n \n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        let userCart = await response.json();\n+\n+        // *Merge Local Cart & Server Cart (Avoid Duplicates)*\n         const mergedCart = [\n             ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n         ];\n \n         dispatch(setCart(mergedCart));\n \n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n+        // *Save Merged Cart to Server*\n+        await fetch(${API_URL}/merge, {\n             method: \"POST\",\n-            headers: { \n+            headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n-            body: JSON.stringify({ cart: mergedCart }),\n+            body: JSON.stringify({ mergedCart }),\n         });\n \n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-\n+        localStorage.removeItem(\"cart\"); // *Clear Local Cart after Sync*\n     } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n+        console.error(\"Error loading cart:\", error);\n     }\n };\n \n-// *Add to Cart After Login (Save to Server and Redux)*\n+// *🔹 Add to Cart (After Login - Update Server)*\n export const addToCartAPI = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n+    \n+    if (!token) {\n+        // If user is not logged in, save locally\n+        return addToCartBeforeLogin(product)(dispatch);\n+    }\n \n-    dispatch(addToCart(product)); // Update Redux state\n+    dispatch(addToCart(product));\n \n     try {\n-        // Save the updated cart on the server\n         await fetch(API_URL, {\n             method: \"POST\",\n-            headers: { \n+            headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n         console.error(\"Error adding product to cart:\", error);\n     }\n-};\n-\n-// *Remove Item from Cart*\n-export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(removeFromCart(productId)); // Update Redux state\n-\n-    try {\n-        // Remove item from server cart\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        // Clear cart from the server on logout\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740490059440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740490071980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": Bearer ${token}\n"
                },
                {
                    "date": 1740490077275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740490086690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         if (!response.ok) throw new Error(\"Failed to fetch cart\");\n \n@@ -39,9 +39,9 @@\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740490096522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-mport { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3000/cart\";\n \n // *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n@@ -20,9 +20,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         if (!response.ok) throw new Error(\"Failed to fetch cart\");\n \n"
                },
                {
                    "date": 1740490102173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740490990342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,120 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:3000/cart\";\n \n-// *🔹 Add to Cart (Before Login - Save to LocalStorage)*\n+// *Add to Cart Before Login (Save in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n \n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    localCart.push(product);\n+    localCart.push({ ...product, quantity: 1 });\n     localStorage.setItem(\"cart\", JSON.stringify(localCart));\n };\n \n-// *🔹 Load Cart After Login (Merge Local & Server)*\n+// *Add to Cart After Login (Save to Server & Redux)*\n+export const addToCartAfterLogin = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    // Update Redux state\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n-    if (!token) return;\n-\n     let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n+            headers: { \"Authorization\": Bearer ${token} },\n         });\n \n-        if (!response.ok) throw new Error(\"Failed to fetch cart\");\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n \n-        let userCart = await response.json();\n-\n-        // *Merge Local Cart & Server Cart (Avoid Duplicates)*\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [\n             ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n         ];\n \n         dispatch(setCart(mergedCart));\n \n-        // *Save Merged Cart to Server*\n-        await fetch(`${API_URL}/merge`, {\n+        // Save merged cart to the server\n+        await fetch(${API_URL}/merge, {\n             method: \"POST\",\n-            headers: {\n+            headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n\\ No newline at end of file\n-            body: JSON.stringify({ mergedCart }),\n+            body: JSON.stringify({ cart: mergedCart }),\n         });\n \n-        localStorage.removeItem(\"cart\"); // *Clear Local Cart after Sync*\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+\n     } catch (error) {\n-        console.error(\"Error loading cart:\", error);\n+        console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *🔹 Add to Cart (After Login - Update Server)*\n-export const addToCartAPI = (product) => async (dispatch) => {\n+// *Increment Product Quantity*\n+export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(incrementQuantity(productId));\n+\n+    const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n-    \n-    if (!token) {\n-        // If user is not logged in, save locally\n-        return addToCartBeforeLogin(product)(dispatch);\n+\n+    try {\n+        fetch(${API_URL}/${productId}, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error incrementing product quantity:\", error);\n     }\n+};\n \n-    dispatch(addToCart(product));\n+// *Decrement Product Quantity*\n+export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(decrementQuantity(productId));\n \n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n     try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: {\n+        fetch(${API_URL}/${productId}, {\n+            method: \"PUT\",\n+            headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n+                \"Authorization\": Bearer ${token}\n             },\n-            body: JSON.stringify({ product }),\n+            body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n+        console.error(\"Error decrementing product quantity:\", error);\n     }\n-};\n+};\n+\n+// *Remove Product from Cart (Before and After Login)*\n+export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n+    dispatch(removeFromCart(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localSt…\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740491070726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,5 +116,44 @@\n export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n     dispatch(removeFromCart(productId));\n \n     const updatedCart = getState().cart.items;\n-    const token = localSt…\n\\ No newline at end of file\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        await fetch(${API_URL}/${productId}, {\n+            method: \"DELETE\",\n+            headers: { \n+                \"Authorization\": Bearer ${token}\n+            },\n+        });\n+\n+        // Save updated cart on server\n+        await fetch(API_URL, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart on Logout (Before and After Login)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740491079901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740491090143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         await fetch(API_URL, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n \n@@ -150,9 +150,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740491101819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,18 +122,18 @@\n     try {\n         await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n         });\n \n         // Save updated cart on server\n         await fetch(API_URL, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n \n"
                },
                {
                    "date": 1740491107791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n@@ -122,9 +122,9 @@\n     try {\n         await fetch(${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n         });\n \n         // Save updated cart on server\n"
                },
                {
                    "date": 1740491115863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n@@ -119,9 +119,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(${`API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \n                 \"Authorization\": `Bearer ${token}`\n             },\n"
                },
                {
                    "date": 1740491122909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        await fetch(${`API_URL}/${productId}, {\n+        await fetch(${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \n                 \"Authorization\": `Bearer ${token}`\n             },\n"
                },
                {
                    "date": 1740491132861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n@@ -119,9 +119,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        await fetch(${API_URL}/${productId}`, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \n                 \"Authorization\": `Bearer ${token}`\n             },\n"
                },
                {
                    "date": 1740491145768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n@@ -81,9 +81,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740491153362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -56,9 +56,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740491163063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -39,9 +39,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n"
                },
                {
                    "date": 1740491176097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -98,9 +98,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740491187866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -98,9 +98,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(`${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740491198468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -77,9 +77,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(`${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740491645875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n+\n+const API_URL = \"http://localhost:3000/cart\";\n+\n+// *Add to Cart Before Login (Save in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    const existingProduct = localCart.find(item => item.id === product.id);\n+\n+    if (existingProduct) {\n+        existingProduct.quantity += 1;  // Increment quantity if product already in cart\n+    } else {\n+        localCart.push({ ...product, quantity: 1 });\n+    }\n+\n+    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+};\n+\n+// *Add to Cart After Login (Save to Server & Redux)*\n+export const addToCartAfterLogin = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    // Update Redux state\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates by Product ID)\n+        const mergedCart = [\n+            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n+        ];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // Save merged cart to the server\n+        await fetch(${API_URL}/merge, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: mergedCart }),\n+        });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Increment Product Quantity*\n+export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(incrementQuantity(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        fetch(${API_URL}/${productId}, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error incrementing product quantity:\", error);\n+    }\n+};\n+\n+// *Decrement Product Quantity*\n+export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(decrementQuantity(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        fetch(${API_URL}/${productId}, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error decrementing product quantity:\", error);\n+    }\n+};\n+\n+// *Remove Product from Cart*\n+export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n+    dispatch(removeFromCart(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        await fetch(${API_URL}/${productId}, {\n+            method: \"DELETE\",\n+            headers: { \n+                \"Authorization\": Bearer ${token}\n+            },\n+        });\n+\n+        // Save updated cart on server\n+        await fetch(API_URL, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart on Logout (Before and After Login)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": Bearer ${token} },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740491720332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,169 +157,10 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n-};\n-import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:3000/cart\";\n-\n-// *Add to Cart Before Login (Save in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    localCart.push({ ...product, quantity: 1 });\n-    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n-};\n-\n-// *Add to Cart After Login (Save to Server & Redux)*\n-export const addToCartAfterLogin = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    // Update Redux state\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [\n-            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n-        ];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: mergedCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Increment Product Quantity*\n-export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(incrementQuantity(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error incrementing product quantity:\", error);\n-    }\n-};\n-\n-// *Decrement Product Quantity*\n-export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(decrementQuantity(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error decrementing product quantity:\", error);\n-    }\n-};\n-\n-// *Remove Product from Cart (Before and After Login)*\n-export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n-    dispatch(removeFromCart(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \n-                \"Authorization\": `Bearer ${token}`\n-            },\n-        });\n-\n-        // Save updated cart on server\n-        await fetch(API_URL, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart on Logout (Before and After Login)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n\\ No newline at end of file\n-}\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740491736085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n         await fetch(API_URL, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n \n@@ -157,9 +157,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} }`,\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740491741628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        await fetch(${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}, {\n             method: \"DELETE\",\n             headers: { \n                 \"Authorization\": Bearer ${token}\n             },\n@@ -138,9 +138,9 @@\n         await fetch(API_URL, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n \n"
                },
                {
                    "date": 1740491752180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n@@ -126,9 +126,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        await fetch(`${API_URL}/${productId}, {\n+        await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \n                 \"Authorization\": Bearer ${token}\n             },\n"
                },
                {
                    "date": 1740491763031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n@@ -109,9 +109,9 @@\n         fetch(${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740491771542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,13 +84,13 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: updatedCart }),\n         });\n     } catch (error) {\n"
                },
                {
                    "date": 1740491784123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(`${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -129,9 +129,9 @@\n     try {\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n         });\n \n         // Save updated cart on server\n"
                },
                {
                    "date": 1740491795210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n     try {\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n             headers: { \n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n         });\n \n         // Save updated cart on server\n@@ -157,9 +157,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} }`,\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740491813263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n@@ -157,9 +157,9 @@\n \n     try {\n         await fetch(API_URL, {\n             method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n"
                },
                {
                    "date": 1740491825818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token} },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n@@ -105,9 +105,9 @@\n     const updatedCart = getState().cart.items;\n     const token = localStorage.getItem(\"token\");\n \n     try {\n-        fetch(`${API_URL}/${productId}, {\n+        fetch(`${API_URL}/${productId}`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740491841651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -46,9 +46,9 @@\n \n     try {\n         const response = await fetch(API_URL, {\n             method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token} },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n \n         let userCart = response.ok ? await response.json() : { cart: [] };\n \n"
                },
                {
                    "date": 1740491857770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         await fetch(API_URL, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n@@ -63,9 +63,9 @@\n         await fetch(${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740491873583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n             body: JSON.stringify({ cart: mergedCart }),\n         });\n \n"
                },
                {
                    "date": 1740491882809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3000/cart\";\n+const API_URL = \"http://localhost:3001/cart\";\n \n // *Add to Cart Before Login (Save in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n@@ -59,9 +59,9 @@\n \n         dispatch(setCart(mergedCart));\n \n         // Save merged cart to the server\n-        await fetch(`${API_URL}/merge, {\n+        await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n"
                },
                {
                    "date": 1740495185273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +0,0 @@\n-import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:3001/cart\";\n-\n-// *Add to Cart Before Login (Save in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    const existingProduct = localCart.find(item => item.id === product.id);\n-\n-    if (existingProduct) {\n-        existingProduct.quantity += 1;  // Increment quantity if product already in cart\n-    } else {\n-        localCart.push({ ...product, quantity: 1 });\n-    }\n-\n-    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n-};\n-\n-// *Add to Cart After Login (Save to Server & Redux)*\n-export const addToCartAfterLogin = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    // Update Redux state\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates by Product ID)\n-        const mergedCart = [\n-            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n-        ];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: mergedCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Increment Product Quantity*\n-export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(incrementQuantity(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error incrementing product quantity:\", error);\n-    }\n-};\n-\n-// *Decrement Product Quantity*\n-export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(decrementQuantity(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error decrementing product quantity:\", error);\n-    }\n-};\n-\n-// *Remove Product from Cart*\n-export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n-    dispatch(removeFromCart(productId));\n-\n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \n-                \"Authorization\": `Bearer ${token}`\n-            },\n-        });\n-\n-        // Save updated cart on server\n-        await fetch(API_URL, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n-        });\n-\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart on Logout (Before and After Login)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740495263100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+\n+import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n+\n+const API_URL = \"http://localhost:3001/cart\";\n+\n+// *Add to Cart Before Login (Save in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+    const existingProduct = localCart.find(item => item.id === product.id);\n+\n+    if (existingProduct) {\n+        existingProduct.quantity += 1;  // Increment quantity if product already in cart\n+    } else {\n+        localCart.push({ ...product, quantity: 1 });\n+    }\n+\n+    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n+};\n+\n+// *Add to Cart After Login (Save to Server & Redux)*\n+export const addToCartAfterLogin = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    // Update Redux state\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates by Product ID)\n+        const mergedCart = [\n+            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n+        ];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // Save merged cart to the server\n+        await fetch(`${API_URL}/merge`, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ cart: mergedCart }),\n+        });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Increment Product Quantity*\n+export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(incrementQuantity(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        fetch(`${API_URL}/${productId}`, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error incrementing product quantity:\", error);\n+    }\n+};\n+\n+// *Decrement Product Quantity*\n+export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n+    dispatch(decrementQuantity(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        fetch(`${API_URL}/${productId}`, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error decrementing product quantity:\", error);\n+    }\n+};\n+\n+// *Remove Product from Cart*\n+export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n+    dispatch(removeFromCart(productId));\n+\n+    const updatedCart = getState().cart.items;\n+    const token = localStorage.getItem(\"token\");\n+\n+    try {\n+        await fetch(`${API_URL}/${productId}`, {\n+            method: \"DELETE\",\n+            headers: { \n+                \"Authorization\": `Bearer ${token}`\n+            },\n+        });\n+\n+        // Save updated cart on server\n+        await fetch(API_URL, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ cart: updatedCart }),\n+        });\n+\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart on Logout (Before and After Login)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740495293856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,106 @@\n+import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n \n+const API_URL = \"http://localhost:3001/cart\";\n+\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // Save merged cart to the server\n+        await fetch(`${API_URL}/merge`, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ localCart }),\n+        });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Add to Cart After Login*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(removeFromCart(productId));\n+\n+    try {\n+        await fetch(`${API_URL}/${productId}`, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+};\n+\n+\n+\n+\n+\n import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:3001/cart\";\n \n"
                },
                {
                    "date": 1740495397624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,19 +250,4 @@\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n \n-// *Clear Cart on Logout (Before and After Login)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740495439766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,28 +99,10 @@\n \n \n \n \n-import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n \n-// *Add to Cart Before Login (Save in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-    const existingProduct = localCart.find(item => item.id === product.id);\n-\n-    if (existingProduct) {\n-        existingProduct.quantity += 1;  // Increment quantity if product already in cart\n-    } else {\n-        localCart.push({ ...product, quantity: 1 });\n-    }\n-\n-    localStorage.setItem(\"cart\", JSON.stringify(localCart));\n-};\n-\n // *Add to Cart After Login (Save to Server & Redux)*\n export const addToCartAfterLogin = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n"
                },
                {
                    "date": 1740495477119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,46 +122,9 @@\n         console.error(\"Error adding product to cart:\", error);\n     }\n };\n \n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates by Product ID)\n-        const mergedCart = [\n-            ...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()\n-        ];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: mergedCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n+/\n // *Increment Product Quantity*\n export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n     dispatch(incrementQuantity(productId));\n \n"
                },
                {
                    "date": 1740495546561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,13 +96,8 @@\n     }\n };\n \n \n-\n-\n-\n-\n-\n // *Add to Cart After Login (Save to Server & Redux)*\n export const addToCartAfterLogin = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n@@ -122,9 +117,9 @@\n         console.error(\"Error adding product to cart:\", error);\n     }\n };\n \n-/\n+\n // *Increment Product Quantity*\n export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n     dispatch(incrementQuantity(productId));\n \n"
                },
                {
                    "date": 1740495656878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,4 @@\n-import { setCart, addToCart, removeFromCart, incrementQuantity, decrementQuantity, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:3001/cart\";\n-\n-// *Add to Cart Before Login (Saves in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        // Fetch user cart from the server\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n-\n-        dispatch(setCart(mergedCart));\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ localCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Add to Cart After Login*\n-export const addToCartAPI = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Remove Item from Cart*\n-export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(removeFromCart(productId));\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n-\n-\n-// *Add to Cart After Login (Save to Server & Redux)*\n-export const addToCartAfterLogin = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    // Update Redux state\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-\n // *Increment Product Quantity*\n export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n     dispatch(incrementQuantity(productId));\n \n@@ -189,5 +68,4 @@\n     } catch (error) {\n         console.error(\"Error removing product from cart:\", error);\n     }\n };\n-\n"
                },
                {
                    "date": 1740495706101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,98 @@\n-// *Increment Product Quantity*\n-export const incrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(incrementQuantity(productId));\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-    const updatedCart = getState().cart.items;\n+const API_URL = \"http://localhost:3001/cart\";\n+\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n \n     try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n+\n+        dispatch(setCart(mergedCart));\n+\n+        // Save merged cart to the server\n+        await fetch(`${API_URL}/merge`, {\n+            method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n             },\n-            body: JSON.stringify({ cart: updatedCart }),\n+            body: JSON.stringify({ localCart }),\n         });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n     } catch (error) {\n-        console.error(\"Error incrementing product quantity:\", error);\n+        console.error(\"Error fetching cart:\", error);\n     }\n };\n \n-// *Decrement Product Quantity*\n-export const decrementProductQuantity = (productId) => (dispatch, getState) => {\n-    dispatch(decrementQuantity(productId));\n-\n-    const updatedCart = getState().cart.items;\n+// *Add to Cart After Login*\n+export const addToCartAPI = (product) => async (dispatch) => {\n     const token = localStorage.getItem(\"token\");\n \n+    dispatch(addToCart(product));\n+\n     try {\n-        fetch(`${API_URL}/${productId}`, {\n-            method: \"PUT\",\n+        await fetch(API_URL, {\n+            method: \"POST\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": `Bearer ${token}`\n             },\n-            body: JSON.stringify({ cart: updatedCart }),\n+            body: JSON.stringify({ product }),\n         });\n     } catch (error) {\n-        console.error(\"Error decrementing product quantity:\", error);\n+        console.error(\"Error adding product to cart:\", error);\n     }\n };\n \n-// *Remove Product from Cart*\n-export const removeProductFromCart = (productId) => async (dispatch, getState) => {\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n     dispatch(removeFromCart(productId));\n \n-    const updatedCart = getState().cart.items;\n-    const token = localStorage.getItem(\"token\");\n-\n     try {\n         await fetch(`${API_URL}/${productId}`, {\n             method: \"DELETE\",\n-            headers: { \n-                \"Authorization\": `Bearer ${token}`\n-            },\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n \n-        // Save updated cart on server\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n         await fetch(API_URL, {\n-            method: \"PUT\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ cart: updatedCart }),\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n         });\n-\n     } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n+        console.error(\"Error clearing cart:\", error);\n     }\n };\n+\n"
                },
                {
                    "date": 1740501814892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n         // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n+        \n \n         // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n"
                },
                {
                    "date": 1740501857022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n-        \n+        on\n \n         // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n"
                },
                {
                    "date": 1740501862234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n-        on\n+        onslotchange.log\n \n         // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n"
                },
                {
                    "date": 1740501870363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n-        onslotchange.log\n+        console\n \n         // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n"
                },
                {
                    "date": 1740501876638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         // Merge Local Cart & Server Cart (Remove Duplicates)\n         const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n \n         dispatch(setCart(mergedCart));\n-        console\n+        console.log(setCart)\n \n         // Save merged cart to the server\n         await fetch(`${API_URL}/merge`, {\n             method: \"POST\",\n"
                },
                {
                    "date": 1740539747800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:3001/cart\";\n+const API_URL = \"http://localhost:/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740539940305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:/cart\";\n+const API_URL = \"http://localhost:5000//cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740539976564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000//cart\";\n+const API_URL = \"http://localhost:5000/h/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740540016202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/h/cart\";\n+const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740540219754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/cart\";\n+const API_URL = \"http://localhost:5000\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740540253883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000\";\n+const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740540550710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/cart\";\n+const API_URL = \"http://localhost:5000//cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740540559165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000//cart\";\n+const API_URL = \"http://localhost:5000/api/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740541244330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/api/cart\";\n+const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740541502438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/cart\";\n+const API_URL = \"http://localhost:000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740552702806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:000/cart\";\n+const API_URL = \"http://localhost:/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740552769062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:/cart\";\n+const API_URL = \"http://localhost:5000//cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740555859632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000//cart\";\n+const API_URL = \"http://localhost:5000/api/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740555929810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n-const API_URL = \"http://localhost:5000/api/cart\";\n+const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n     dispatch(addToCart(product));\n"
                },
                {
                    "date": 1740597420809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,99 +0,0 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n-\n-const API_URL = \"http://localhost:5000/cart\";\n-\n-// *Add to Cart Before Login (Saves in LocalStorage)*\n-export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n-    dispatch(addToCart(product));\n-    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n-};\n-\n-// *Load Cart After Login (Merge Local with Server)*\n-export const loadCartAfterLogin = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n-\n-    try {\n-        // Fetch user cart from the server\n-        const response = await fetch(API_URL, {\n-            method: \"GET\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-\n-        let userCart = response.ok ? await response.json() : { cart: [] };\n-\n-        // Merge Local Cart & Server Cart (Remove Duplicates)\n-        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n-\n-        dispatch(setCart(mergedCart));\n-        console.log(setCart)\n-\n-        // Save merged cart to the server\n-        await fetch(`${API_URL}/merge`, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ localCart }),\n-        });\n-\n-        // Clear local cart after merging\n-        localStorage.removeItem(\"cart\");\n-    } catch (error) {\n-        console.error(\"Error fetching cart:\", error);\n-    }\n-};\n-\n-// *Add to Cart After Login*\n-export const addToCartAPI = (product) => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(addToCart(product));\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"POST\",\n-            headers: { \n-                \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}`\n-            },\n-            body: JSON.stringify({ product }),\n-        });\n-    } catch (error) {\n-        console.error(\"Error adding product to cart:\", error);\n-    }\n-};\n-\n-// *Remove Item from Cart*\n-export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(removeFromCart(productId));\n-\n-    try {\n-        await fetch(`${API_URL}/${productId}`, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error removing product from cart:\", error);\n-    }\n-};\n-\n-// *Clear Cart (Logout)*\n-export const clearCartOnLogout = () => async (dispatch) => {\n-    const token = localStorage.getItem(\"token\");\n-\n-    dispatch(clearCart());\n-\n-    try {\n-        await fetch(API_URL, {\n-            method: \"DELETE\",\n-            headers: { \"Authorization\": `Bearer ${token}` },\n-        });\n-    } catch (error) {\n-        console.error(\"Error clearing cart:\", error);\n-    }\n-};\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741091166111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,101 @@\n+import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n \n+const API_URL = \"http://localhost:5000/cart\";\n+\n+// *Add to Cart Before Login (Saves in LocalStorage)*\n+export const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n+    dispatch(addToCart(product));\n+    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n+};\n+\n+// *Load Cart After Login (Merge Local with Server)*\n+export const loadCartAfterLogin = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n+\n+    try {\n+        // Fetch user cart from the server\n+        const response = await fetch(API_URL, {\n+            method: \"GET\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+\n+        let userCart = response.ok ? await response.json() : { cart: [] };\n+\n+        // Merge Local Cart & Server Cart (Remove Duplicates)\n+        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n+\n+        dispatch(setCart(mergedCart));\n+        console.log(setCart)\n+\n+        // Save merged cart to the server\n+        await fetch(`${API_URL}/merge`, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ localCart }),\n+        });\n+\n+        // Clear local cart after merging\n+        localStorage.removeItem(\"cart\");\n+    } catch (error) {\n+        console.error(\"Error fetching cart:\", error);\n+    }\n+};\n+\n+// *Add to Cart After Login*\n+export const addToCartAPI = (product) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(addToCart(product));\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"POST\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": `Bearer ${token}`\n+            },\n+            body: JSON.stringify({ product }),\n+        });\n+    } catch (error) {\n+        console.error(\"Error adding product to cart:\", error);\n+    }\n+};\n+\n+// *Remove Item from Cart*\n+export const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(removeFromCart(productId));\n+\n+    try {\n+        await fetch(`${API_URL}/${productId}`, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error removing product from cart:\", error);\n+    }\n+};\n+\n+// *Clear Cart (Logout)*\n+export const clearCartOnLogout = () => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(clearCart());\n+\n+    try {\n+        await fetch(API_URL, {\n+            method: \"DELETE\",\n+            headers: { \"Authorization\": `Bearer ${token}` },\n+        });\n+    } catch (error) {\n+        console.error(\"Error clearing cart:\", error);\n+    }\n+};\n+\n+\n+\n"
                },
                {
                    "date": 1741091191015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,6 +96,42 @@\n         console.error(\"Error clearing cart:\", error);\n     }\n };\n \n+// Increment Product Quantity in Cart\n+export const incrementProductQuantity = (productId) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n \n+    dispatch(incrementQuantity(productId)); // Update state\n \n+    try {\n+        await fetch(`${API_URL}/${productId}/increment, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+        });\n+    } catch (error) {\n+        console.error(\"Error incrementing product quantity:\", error);\n+    }\n+};\n+\n+// Decrement Product Quantity in Cart\n+export const decrementProductQuantity = (productId) => async (dispatch) => {\n+    const token = localStorage.getItem(\"token\");\n+\n+    dispatch(decrementQuantity(productId)); // Update state\n+\n+    try {\n+        await fetch(${API_URL}/${productId}/decrement, {\n+            method: \"PUT\",\n+            headers: { \n+                \"Content-Type\": \"application/json\",\n+                \"Authorization\": Bearer ${token}\n+            },\n+        });\n+    } catch (error) {\n+        console.error(\"Error decrementing product quantity:\", error);\n+    }\n+};\n+\n"
                },
                {
                    "date": 1741091196462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n \n     dispatch(incrementQuantity(productId)); // Update state\n \n     try {\n-        await fetch(`${API_URL}/${productId}/increment, {\n+        await fetch(`${API_URL}/${productId}/increment`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": Bearer ${token}\n"
                },
                {
                    "date": 1741091208690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n         await fetch(`${API_URL}/${productId}/increment`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\": `Bearer ${token}\n             },\n         });\n     } catch (error) {\n         console.error(\"Error incrementing product quantity:\", error);\n"
                },
                {
                    "date": 1741091243649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n         await fetch(`${API_URL}/${productId}/increment`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": `Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n         });\n     } catch (error) {\n         console.error(\"Error incrementing product quantity:\", error);\n@@ -122,9 +122,9 @@\n \n     dispatch(decrementQuantity(productId)); // Update state\n \n     try {\n-        await fetch(${API_URL}/${productId}/decrement, {\n+        await fetch(`${API_URL}/${productId}/decrement, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": Bearer ${token}\n"
                },
                {
                    "date": 1741091259416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n \n     dispatch(decrementQuantity(productId)); // Update state\n \n     try {\n-        await fetch(`${API_URL}/${productId}/decrement, {\n+        await fetch(`${API_URL}/${productId}/decrement`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n                 \"Authorization\": Bearer ${token}\n"
                },
                {
                    "date": 1741091267163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n         await fetch(`${API_URL}/${productId}/decrement`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\": Bearer ${token}\n+                \"Authorization\":`` Bearer ${token}\n             },\n         });\n     } catch (error) {\n         console.error(\"Error decrementing product quantity:\", error);\n"
                },
                {
                    "date": 1741091273966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n         await fetch(`${API_URL}/${productId}/decrement`, {\n             method: \"PUT\",\n             headers: { \n                 \"Content-Type\": \"application/json\",\n-                \"Authorization\":`` Bearer ${token}\n+                \"Authorization\": `Bearer ${token}`\n             },\n         });\n     } catch (error) {\n         console.error(\"Error decrementing product quantity:\", error);\n"
                },
                {
                    "date": 1741091440368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart,  } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n"
                },
                {
                    "date": 1741091446616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { setCart, addToCart, removeFromCart, clearCart,  } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart, incrementQuantity } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n"
                },
                {
                    "date": 1741091453967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { setCart, addToCart, removeFromCart, clearCart, incrementQuantity, dec } from \"./cartSlice\";\n+import { setCart, addToCart, removeFromCart, clearCart, incrementQuantity, decrementQuantity } from \"./cartSlice\";\n \n const API_URL = \"http://localhost:5000/cart\";\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n"
                },
                {
                    "date": 1742216884558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { setCart, addToCart, removeFromCart, clearCart, incrementQuantity, decrementQuantity } from \"./cartSlice\";\n-import {}\n+import {ap}\n \n const userId = localStorage.getItem(\"userId\")\n \n // *Add to Cart Before Login (Saves in LocalStorage)*\n"
                }
            ],
            "date": 1739958215371,
            "name": "Commit-0",
            "content": "export const addToCart = (product) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: \"ADD_TO_CART\",\n            payload: product,\n        });\n\n        // Save cart to localStorage before login\n        localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n    };\n};\n\nexport const loadCartAfterLogin = (userId) => {\n    return async (dispatch) => {\n        let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n\n        // Fetch user's cart from db.json\n        const response = await fetch(http://localhost:3000/carts/${userId});\n        const userCart = response.ok ? await response.json() : { cart: [] };\n\n        // Merge local cart and user cart (avoid duplicates)\n        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n\n        dispatch({\n            type: \"SET_CART\",\n            payload: mergedCart,\n        });\n\n        // Save merged cart to db.json\n        await fetch(http://localhost:3000/carts/${userId}, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ cart: mergedCart }),\n        });\n\n        // Clear localStorage after merging\n        localStorage.removeItem(\"cart\");\n    };\n};"
        }
    ]
}