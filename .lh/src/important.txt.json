{
    "sourceFile": "src/important.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1740489139477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740489160861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,5 +93,121 @@\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n-};\n\\ No newline at end of file\n+};\n+\n+\n+\n+\n+\n+\n+\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+require(\"dotenv\").config();\n+\n+const app = express();\n+const PORT = 3001;\n+const CART_DB = \"./cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return {};\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// *1. Get User Cart*\n+app.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db[req.userId] || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// *2. Add to Cart*\n+app.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+        db[req.userId] = userCart;\n+        writeCartDB(db);\n+    }\n+\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// *3. Remove from Cart*\n+app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    userCart = userCart.filter(item => item.id !== productId);\n+    db[req.userId] = userCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: userCart });\n+});\n+\n+// *4. Merge Local Cart with Server Cart*\n+app.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Merge local cart and server cart (remove duplicates)\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    db[req.userId] = mergedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// *5. Clear Cart (Logout)*\n+app.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db[req.userId] = [];\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+// *Start Server*\n+app.listen(PORT, () => {\n+    console.log(`Server running on http://localhost:${PORT}`);\n+ });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740492169722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,5 +209,7 @@\n \n // *Start Server*\n app.listen(PORT, () => {\n     console.log(`Server running on http://localhost:${PORT}`);\n+\n+    \n  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740492175799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,7 +209,38 @@\n \n // *Start Server*\n app.listen(PORT, () => {\n     console.log(`Server running on http://localhost:${PORT}`);\n+ });\n \n-    \n\\ No newline at end of file\n- });\n+\n+\n+\n+\n+ import { createSlice } from \"@reduxjs/toolkit\";\n+\n+const cartSlice = createSlice({\n+    name: \"cart\",\n+    initialState: {\n+        items: [],\n+    },\n+    reducers: {\n+        setCart: (state, action) => {\n+            state.items = action.payload;\n+        },\n+        addToCart: (state, action) => {\n+            state.items.push(action.payload);\n+            localStorage.setItem(\"cart\", JSON.stringify(state.items)); // Save to localStorage\n+        },\n+        removeFromCart: (state, action) => {\n+            state.items = state.items.filter(item => item.id !== action.payload);\n+            localStorage.setItem(\"cart\", JSON.stringify(state.items));\n+        },\n+        clearCart: (state) => {\n+            state.items = [];\n+            localStorage.removeItem(\"cart\");\n+        }\n+    }\n+});\n+\n+export const { setCart, addToCart, removeFromCart, clearCart } = cartSlice.actions;\n+export default cartSlice.reducer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741793666958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,5 +242,8 @@\n     }\n });\n \n export const { setCart, addToCart, removeFromCart, clearCart } = cartSlice.actions;\n-export default cartSlice.reducer;\n\\ No newline at end of file\n+export default cartSlice.reducer;\n+\n+\n+\n"
                },
                {
                    "date": 1742133155769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,4 +246,231 @@\n export default cartSlice.reducer;\n \n \n \n+import React, { useEffect, useState } from \"react\";\n+import { useSelector } from \"react-redux\";\n+import styled from \"styled-components\";\n+\n+// Styled components\n+const DashboardContainer = styled.div`\n+  padding: 20px;\n+  max-width: 1200px;\n+  margin: 0 auto;\n+  background-color: #f9f9f9;\n+  border-radius: 10px;\n+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n+`;\n+\n+const Section = styled.div`\n+  margin-bottom: 20px;\n+`;\n+\n+const Title = styled.h2`\n+  font-size: 1.5rem;\n+  color: #333;\n+  margin-bottom: 10px;\n+`;\n+\n+const Info = styled.p`\n+  font-size: 1rem;\n+  color: #666;\n+`;\n+\n+const Table = styled.table`\n+  width: 100%;\n+  border-collapse: collapse;\n+  margin-bottom: 20px;\n+`;\n+\n+const TableHeader = styled.th`\n+  background-color: #4caf50;\n+  color: white;\n+  padding: 10px;\n+  border: 1px solid #ddd;\n+`;\n+\n+const TableCell = styled.td`\n+  padding: 10px;\n+  border: 1px solid #ddd;\n+`;\n+\n+const MerchantDashboard = ({ api }) => {\n+  const [userInfo, setUserInfo] = useState({});\n+  const [products, setProducts] = useState([]);\n+  const [soldProducts, setSoldProducts] = useState([]);\n+  const [wallet, setWallet] = useState(0);\n+\n+  useEffect(() => {\n+    fetchUserInfo();\n+    fetchProducts();\n+    fetchSoldProducts();\n+    fetchWallet();\n+  }, []);\n+\n+  const fetchUserInfo = async () => {\n+    const username = sessionStorage.getItem(\"username\");\n+    const response = await fetch(`${api}/users/${username}`);\n+    const data = await response.json();\n+    setUserInfo(data);\n+  };\n+\n+  const fetchProducts = async () => {\n+    const response = await fetch(`${api}/products`);\n+    const data = await response.json();\n+    setProducts(data);\n+  };\n+\n+  const fetchSoldProducts = async () => {\n+    const response = await fetch(`${api}/sold-products`);\n+    const data = await response.json();\n+    setSoldProducts(data);\n+  };\n+\n+  const fetchWallet = async () => {\n+    const response = await fetch(`${api}/wallet`);\n+    const data = await response.json();\n+    setWallet(data.balance);\n+  };\n+\n+  return (\n+    <DashboardContainer>\n+      <Section>\n+        <Title>User Info</Title>\n+        <Info>Username: {userInfo.username}</Info>\n+        <Info>Email: {userInfo.email}</Info>\n+      </Section>\n+\n+      <Section>\n+        <Title>Products</Title>\n+        <Table>\n+          <thead>\n+            <tr>\n+              <TableHeader>Name</TableHeader>\n+              <TableHeader>Price</TableHeader>\n+              <TableHeader>Stock</TableHeader>\n+            </tr>\n+          </thead>\n+          <tbody>\n+            {products.map((product) => (\n+              <tr key={product.id}>\n+                <TableCell>{product.name}</TableCell>\n+                <TableCell>${product.price}</TableCell>\n+                <TableCell>{product.stock}</TableCell>\n+              </tr>\n+            ))}\n+          </tbody>\n+        </Table>\n+      </Section>\n+\n+      <Section>\n+        <Title>Sold Products</Title>\n+        <Table>\n+          <thead>\n+            <tr>\n+              <TableHeader>Name</TableHeader>\n+              <TableHeader>Price</TableHeader>\n+              <TableHeader>Quantity</TableHeader>\n+            </tr>\n+          </thead>\n+          <tbody>\n+            {soldProducts.map((product) => (\n+              <tr key={product.id}>\n+                <TableCell>{product.name}</TableCell>\n+                <TableCell>${product.price}</TableCell>\n+                <TableCell>{product.quantity}</TableCell>\n+              </tr>\n+            ))}\n+          </tbody>\n+        </Table>\n+      </Section>\n+\n+      <Section>\n+        <Title>Wallet</Title>\n+        <Info>Balance: ${wallet}</Info>\n+      </Section>\n+    </DashboardContainer>\n+  );\n+};\n+\n+export default MerchantDashboard;\n+\n+\n+\n+\n+\n+\n+  // Handle form submission\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    if (!validateForm()) return;\n+\n+    const formData = new FormData();\n+    formData.append(\"name\", name);\n+    formData.append(\"brand\", JSON.stringify(brand));\n+    formData.append(\"category\", category);\n+    formData.append(\"price\", price);\n+    formData.append(\"quantity\", quantity);\n+    formData.append(\"numberInStock\", numberInStock);\n+    formData.append(\"owner\", owner);\n+    formData.append(\"weight\", weight);\n+    formData.append(\"ownerId\", ownerId);\n+    formData.append(\"color\", color);\n+    formData.append(\"phoneNumber\", phoneNumber);\n+    formData.append(\"description\", description);\n+    formData.append(\"status\", status);\n+    formData.append(\"address\", address);\n+    formData.append(\"likes\", likes);\n+    formData.append(\"city\", city);\n+    formData.append(\"location\", JSON.stringify(location));\n+    formData.append(\"postedOn\", postedOn);\n+\n+    images.forEach((file, index) => {\n+      formData.append(\"images\", file);\n+    });\n+\n+    try {\n+      const response = await fetch(`${api}/upload`, {\n+        method: \"POST\",\n+        body: formData,\n+      });\n+\n+      if (response.ok) {\n+        alert(\"Product uploaded successfully!\");\n+        // Reset form\n+        setName(\"\");\n+        setBrand([{ id: Date.now(), name: \"\", image: \"\" }]);\n+        setCategory(\"\");\n+        setPrice(\"\");\n+        setImages([]);\n+        setQuantity(1);\n+        setNumberInStock(0);\n+        setOwner(\"\");\n+        setweight(0)\n+        setPhoneNumber(\"\");\n+        setDescription(\"\");\n+        setStatus(\"\");\n+        setAddress(\"\");\n+        setLikes(0);\n+        setCity(\"\");\n+        setColor(\"\");\n+        setownerId(\"\");\n+        setLocation([\n+          { id: Date.now(), location: \"\", latitude: \"\", longitude: \"\" },\n+        ]);\n+        setPostedOn(\n+          new Date().toLocaleString(\"en-US\", {\n+            year: \"numeric\",\n+            month: \"2-digit\",\n+            day: \"2-digit\",\n+            hour: \"2-digit\",\n+            minute: \"2-digit\",\n+            second: \"2-digit\",\n+          })\n+        );\n+      } else {\n+        alert(\"Failed to upload product.\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error uploading product:\", error);\n+    }\n+  };\n"
                },
                {
                    "date": 1743922948284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,4 +473,26 @@\n     } catch (error) {\n       console.error(\"Error uploading product:\", error);\n     }\n   };\n+\n+\n+\n+\n+ // const handleSearchClick = () => {\n+  //   if (searchTerm && searchTerm.trim() !== \"\") {\n+  //     const fuse = new Fuse(glofilteredProducts, {\n+  //       keys: [\"name\", \"category\", \"owner\", \"brand.name\"],\n+  //       threshold: 0.3,\n+  //     });\n+\n+  //     const results = fuse.search(searchTerm.trim());\n+  //     const matched = results.map((res) => res.item);\n+  //     setFilteredProducts(matched);\n+  //     setProducts(matched);\n+  //     setHasMore(false);\n+  //   } else {\n+  //     setFilteredProducts(products);\n+  //     setProducts(products);\n+  //     setHasMore(true);\n+  //   }\n+  // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744714715846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -494,5 +494,50 @@\n   //     setFilteredProducts(products);\n   //     setProducts(products);\n   //     setHasMore(true);\n   //   }\n-  // };\n\\ No newline at end of file\n+  // };\n+\n+\n+\n+\n+  useEffect(() => {\n+    fetch(`${api}/products`)\n+      .then((response) => response.json())\n+      .then((data) => {\n+        const productsData = data.products || data;\n+        setProducts(productsData);\n+        setFilteredProducts(productsData);\n+\n+        // Extract unique categories from the products\n+        const uniqueCategories = [\n+          ...new Set(productsData.map((product) => product.category)),\n+        ];\n+        setCategories(uniqueCategories);\n+\n+        // Filter products that have a discount\n+        const discountedProducts = productsData.filter(\n+          (product) => product.discount > 0\n+        );\n+\n+        // Set the filtered products to state\n+        setDiscount(discountedProducts);\n+\n+        // Extract unique brands from the products\n+        const uniqueBrands = [\n+          ...new Set(\n+            productsData.flatMap((product) =>\n+              product.brand.map((bra) => bra.name)\n+            )\n+          ),\n+        ];\n+\n+        setBrands(uniqueBrands);\n+      })\n+\n+      .catch((error) => console.error(\"Error fetching products:\", error));\n+  }, []);\n+\n+  const mobilefilteredProducts =\n+    category === \"All\"\n+      ? products\n+      : products.filter((product) => product.category === category);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740489139477,
            "name": "Commit-0",
            "content": "import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n\nconst API_URL = \"http://localhost:3001/cart\";\n\n// *Add to Cart Before Login (Saves in LocalStorage)*\nexport const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n    dispatch(addToCart(product));\n    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n};\n\n// *Load Cart After Login (Merge Local with Server)*\nexport const loadCartAfterLogin = () => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n\n    try {\n        // Fetch user cart from the server\n        const response = await fetch(API_URL, {\n            method: \"GET\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n\n        let userCart = response.ok ? await response.json() : { cart: [] };\n\n        // Merge Local Cart & Server Cart (Remove Duplicates)\n        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n\n        dispatch(setCart(mergedCart));\n\n        // Save merged cart to the server\n        await fetch(`${API_URL}/merge`, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ localCart }),\n        });\n\n        // Clear local cart after merging\n        localStorage.removeItem(\"cart\");\n    } catch (error) {\n        console.error(\"Error fetching cart:\", error);\n    }\n};\n\n// *Add to Cart After Login*\nexport const addToCartAPI = (product) => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(addToCart(product));\n\n    try {\n        await fetch(API_URL, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ product }),\n        });\n    } catch (error) {\n        console.error(\"Error adding product to cart:\", error);\n    }\n};\n\n// *Remove Item from Cart*\nexport const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(removeFromCart(productId));\n\n    try {\n        await fetch(`${API_URL}/${productId}`, {\n            method: \"DELETE\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n    } catch (error) {\n        console.error(\"Error removing product from cart:\", error);\n    }\n};\n\n// *Clear Cart (Logout)*\nexport const clearCartOnLogout = () => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(clearCart());\n\n    try {\n        await fetch(API_URL, {\n            method: \"DELETE\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n    } catch (error) {\n        console.error(\"Error clearing cart:\", error);\n    }\n};"
        }
    ]
}