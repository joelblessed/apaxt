{
    "sourceFile": "src/components/pages/brandPage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 94,
            "patches": [
                {
                    "date": 1739464809871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739464824115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-mport React, { useState, useEffect } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n import { useParams, useNavigate } from \"react-router-dom\";\n \n const BrandPage = () => {\n   const { id } = useParams();\n"
                },
                {
                    "date": 1739464847234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n   useEffect(() => {\n-    fetch(http://localhost:5000/brands/${id})\n+    fetch(`http://localhost:5000/brands/${id})\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n       .catch((error) => console.error(\"Error fetching brand:\", error));\n   }, [id]);\n"
                },
                {
                    "date": 1739464857741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n   useEffect(() => {\n-    fetch(`http://localhost:5000/brands/${id})\n+    fetch(`http://localhost:5000/s/${id}`)\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n       .catch((error) => console.error(\"Error fetching brand:\", error));\n   }, [id]);\n"
                },
                {
                    "date": 1739464863551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n   useEffect(() => {\n-    fetch(`http://localhost:5000/s/${id}`)\n+    fetch(`http://localhost:5000/products/${id}`)\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n       .catch((error) => console.error(\"Error fetching brand:\", error));\n   }, [id]);\n"
                },
                {
                    "date": 1739466442674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,14 @@\n   const { id } = useParams();\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n-  useEffect(() => {\n-    fetch(`http://localhost:5000/products/${id}`)\n-      .then((res) => res.json())\n-      .then((data) => setBrand(data))\n-      .catch((error) => console.error(\"Error fetching brand:\", error));\n-  }, [id]);\n+//   useEffect(() => {\n+//     fetch(`http://localhost:5000/products/${id}`)\n+//       .then((res) => res.json())\n+//       .then((data) => setBrand(data))\n+//       .catch((error) => console.error(\"Error fetching brand:\", error));\n+//   }, [id]);\n \n   if (!brand) return <h2>Loading...</h2>;\n \n   return (\n"
                },
                {
                    "date": 1739466454360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useParams, useNavigate } from \"react-router-dom\";\n \n-const BrandPage = () => {\n+const BrandPage = ({}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n"
                },
                {
                    "date": 1739466463702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useParams, useNavigate } from \"react-router-dom\";\n \n-const BrandPage = ({}) => {\n+const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n"
                },
                {
                    "date": 1739466470354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n-  const [brand, setBrand] = useState(null);\n+  const [brand, setBrand] = useState();\n \n //   useEffect(() => {\n //     fetch(`http://localhost:5000/products/${id}`)\n //       .then((res) => res.json())\n"
                },
                {
                    "date": 1739466478916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n-  const [brand, setBrand] = useState();\n+  const [brand, setB] = useState(filteredProducts);\n \n //   useEffect(() => {\n //     fetch(`http://localhost:5000/products/${id}`)\n //       .then((res) => res.json())\n"
                },
                {
                    "date": 1739466537771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n-  const [brand, setB] = useState(filteredProducts);\n+  const [brand, setBrand] = useState(null);\n \n //   useEffect(() => {\n //     fetch(`http://localhost:5000/products/${id}`)\n //       .then((res) => res.json())\n"
                },
                {
                    "date": 1739466543237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,14 @@\n   const { id } = useParams();\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n-//   useEffect(() => {\n-//     fetch(`http://localhost:5000/products/${id}`)\n-//       .then((res) => res.json())\n-//       .then((data) => setBrand(data))\n-//       .catch((error) => console.error(\"Error fetching brand:\", error));\n-//   }, [id]);\n+  useEffect(() => {\n+    fetch(`http://localhost:5000/products/${id}`)\n+      .then((res) => res.json())\n+      .then((data) => setBrand(data))\n+      .catch((error) => console.error(\"Error fetching brand:\", error));\n+  }, [id]);\n \n   if (!brand) return <h2>Loading...</h2>;\n \n   return (\n"
                },
                {
                    "date": 1739466586274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,9 @@\n \n const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n-  const [brand, setBrand] = useState(null);\n-\n+  const [brand, setBrand] = useState(null\n   useEffect(() => {\n     fetch(`http://localhost:5000/products/${id}`)\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n"
                },
                {
                    "date": 1739466594109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,12 @@\n \n const BrandPage = ({filteredProducts}) => {\n   const { id } = useParams();\n   const navigate = useNavigate();\n-  const [brand, setBrand] = useState(null\n+  const [brand, setBrand] = useState(null);\n+\n   useEffect(() => {\n-    fetch(`http://localhost:5000/products/${id}`)\n+    fetch(`http://localhost:5000/brand/${id}`)\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n       .catch((error) => console.error(\"Error fetching brand:\", error));\n   }, [id]);\n"
                },
                {
                    "date": 1739466604187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   const navigate = useNavigate();\n   const [brand, setBrand] = useState(null);\n \n   useEffect(() => {\n-    fetch(`http://localhost:5000/brand/${id}`)\n+    fetch(`http://localhost:5000/products/${id}`)\n       .then((res) => res.json())\n       .then((data) => setBrand(data))\n       .catch((error) => console.error(\"Error fetching brand:\", error));\n   }, [id]);\n"
                },
                {
                    "date": 1739467299694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,91 @@\n import React, { useState, useEffect } from \"react\";\n-import { useParams, useNavigate } from \"react-router-dom\";\n+import { useNavigate } from \"react-router-dom\";\n \n-const BrandPage = ({filteredProducts}) => {\n-  const { id } = useParams();\n+const ProductsPage = () => {\n+  const [products, setProducts] = useState([]);\n+  const [displayedProducts, setDisplayedProducts] = useState([]);\n+  const [isAllProductsVisible, setIsAllProductsVisible] = useState(false);\n   const navigate = useNavigate();\n-  const [brand, setBrand] = useState(null);\n \n   useEffect(() => {\n-    fetch(`http://localhost:5000/products/${id}`)\n+    fetch(\"http://localhost:5000/products\")\n       .then((res) => res.json())\n-      .then((data) => setBrand(data))\n-      .catch((error) => console.error(\"Error fetching brand:\", error));\n-  }, [id]);\n+      .then((data) => {\n+        setProducts(data);\n+        setDisplayedProducts(data.slice(0, 4)); // Display only the first 4 products initially\n+      })\n+      .catch((error) => console.error(\"Error fetching products:\", error));\n+  }, []);\n \n-  if (!brand) return <h2>Loading...</h2>;\n+  const handleShowMore = () => {\n+    setDisplayedProducts(products);\n+    setIsAllProductsVisible(true);\n+  };\n \n+  // Group products by brand\n+  const groupedByBrand = products.reduce((acc, product) => {\n+    const { brand } = product;\n+    if (!acc[brand.id]) {\n+      acc[brand.id] = { ...brand, products: [] };\n+    }\n+    acc[brand.id].products.push(product);\n+    return acc;\n+  }, {});\n+\n   return (\n-    <div style={styles.container}>\n-      <h1>{brand.name} Products</h1>\n-      <button onClick={() => navigate(-1)} style={styles.backButton}>Go Back</button>\n-      <div style={styles.productsGrid}>\n-        {brand.products.map((product) => (\n-          <div key={product.id} style={styles.productBox}>\n-            <img src={product.image} alt={product.name} style={styles.image} />\n-            <p>{product.name}</p>\n+    <div>\n\\ No newline at end of file\n+      <h1>Products</h1>\n+      {Object.values(groupedByBrand).map((brand) => (\n+        <div key={brand.id} style={styles.brandContainer}>\n+          <h2>{brand.name}</h2>\n+          <img src={brand.image} alt={brand.name} style={styles.brandImage} />\n+          \n+          <div style={styles.productsGrid}>\n+            {displayedProducts\n+              .filter((product) => product.brand.id === brand.id)\n+              .map((product) => (\n+                <div key={product.id} style={styles.productBox}>\n+                  <img\n+                    src={product.image}\n+                    alt={product.name}\n+                    style={styles.productImage}\n+                  />\n+                  <p>{product.name}</p>\n+                </div>\n+              ))}\n           </div>\n-        ))}\n-      </div>\n+\n+          {!isAllProductsVisible && (\n+            <button onClick={handleShowMore} style={styles.showMoreButton}>\n+              Show More Products\n+            </button>\n+          )}\n+        </div>\n+      ))}\n     </div>\n   );\n };\n \n const styles = {\n-  container: { width: \"80%\", margin: \"auto\", textAlign: \"center\" },\n-  backButton: { marginBottom: \"15px\", padding: \"10px\", cursor: \"pointer\" },\n-  productsGrid: { display: \"flex\", flexWrap: \"wrap\", gap: \"15px\", justifyContent: \"center\" },\n+  brandContainer: { marginBottom: \"30px\" },\n+  brandImage: { width: \"100px\", height: \"100px\", objectFit: \"contain\" },\n+  productsGrid: { display: \"flex\", gap: \"15px\", flexWrap: \"wrap\" },\n   productBox: {\n-    width: \"180px\",\n-    height: \"200px\",\n-    backgroundColor: \"#f5f5f5\",\n-    display: \"flex\",\n-    flexDirection: \"column\",\n-    justifyContent: \"center\",\n-    alignItems: \"center\",\n+    width: \"150px\",\n+    padding: \"10px\",\n+    textAlign: \"center\",\n+    background: \"#f5f5f5\",\n     borderRadius: \"8px\",\n-    padding: \"10px\",\n-    boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\"\n   },\n-  image: { width: \"100px\", height: \"100px\", objectFit: \"contain\", marginBottom: \"10px\" }\n+  productImage: { width: \"100px\", height: \"100px\", objectFit: \"contain\" },\n+  showMoreButton: {\n+    padding: \"10px 20px\",\n+    background: \"#007BFF\",\n+    color: \"#fff\",\n+    border: \"none\",\n+    cursor: \"pointer\",\n+    marginTop: \"10px\",\n+  },\n };\n \n-export default BrandPage;\n+export default ProductsPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739467329074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const ProductsPage = () => {\n+const Brand = () => {\n   const [products, setProducts] = useState([]);\n   const [displayedProducts, setDisplayedProducts] = useState([]);\n   const [isAllProductsVisible, setIsAllProductsVisible] = useState(false);\n   const navigate = useNavigate();\n@@ -87,5 +87,5 @@\n     marginTop: \"10px\",\n   },\n };\n \n-export default ProductsPage;\n\\ No newline at end of file\n+export default Brand;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739468415387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,91 +1,37 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const Brand = () => {\n+const BrandPage = () => {\n   const [products, setProducts] = useState([]);\n-  const [displayedProducts, setDisplayedProducts] = useState([]);\n-  const [isAllProductsVisible, setIsAllProductsVisible] = useState(false);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n-    fetch(\"http://localhost:5000/products\")\n-      .then((res) => res.json())\n-      .then((data) => {\n-        setProducts(data);\n-        setDisplayedProducts(data.slice(0, 4)); // Display only the first 4 products initially\n-      })\n-      .catch((error) => console.error(\"Error fetching products:\", error));\n+    fetch(\"/db.json\")\n+      .then((response) => response.json())\n+      .then((data) => setProducts(data.products));\n   }, []);\n \n-  const handleShowMore = () => {\n-    setDisplayedProducts(products);\n-    setIsAllProductsVisible(true);\n-  };\n-\n-  // Group products by brand\n-  const groupedByBrand = products.reduce((acc, product) => {\n-    const { brand } = product;\n-    if (!acc[brand.id]) {\n-      acc[brand.id] = { ...brand, products: [] };\n+  const brands = products.reduce((acc, product) => {\n+    if (!acc.some((brand) => brand.id === product.brand.id)) {\n+      acc.push(product.brand);\n     }\n-    acc[brand.id].products.push(product);\n     return acc;\n-  }, {});\n+  }, []);\n \n   return (\n     <div>\n-      <h1>Products</h1>\n-      {Object.values(groupedByBrand).map((brand) => (\n-        <div key={brand.id} style={styles.brandContainer}>\n-          <h2>{brand.name}</h2>\n-          <img src={brand.image} alt={brand.name} style={styles.brandImage} />\n-          \n-          <div style={styles.productsGrid}>\n-            {displayedProducts\n-              .filter((product) => product.brand.id === brand.id)\n-              .map((product) => (\n-                <div key={product.id} style={styles.productBox}>\n-                  <img\n-                    src={product.image}\n-                    alt={product.name}\n-                    style={styles.productImage}\n-                  />\n-                  <p>{product.name}</p>\n-                </div>\n-              ))}\n+      <h1>All Brands</h1>\n+      <div className=\"brands\">\n+        {brands.map((brand) => (\n+          <div key={brand.id} className=\"brand-box\">\n+            <img src={brand.image} alt={brand.name} />\n+            <h3>{brand.name}</h3>\n           </div>\n-\n-          {!isAllProductsVisible && (\n-            <button onClick={handleShowMore} style={styles.showMoreButton}>\n-              Show More Products\n-            </button>\n-          )}\n-        </div>\n-      ))}\n+        ))}\n+      </div>\n+      <button onClick={() => navigate(\"/\")}>Back</button>\n     </div>\n   );\n };\n \n-const styles = {\n-  brandContainer: { marginBottom: \"30px\" },\n-  brandImage: { width: \"100px\", height: \"100px\", objectFit: \"contain\" },\n-  productsGrid: { display: \"flex\", gap: \"15px\", flexWrap: \"wrap\" },\n-  productBox: {\n-    width: \"150px\",\n\\ No newline at end of file\n-    padding: \"10px\",\n-    textAlign: \"center\",\n-    background: \"#f5f5f5\",\n-    borderRadius: \"8px\",\n-  },\n-  productImage: { width: \"100px\", height: \"100px\", objectFit: \"contain\" },\n-  showMoreButton: {\n-    padding: \"10px 20px\",\n-    background: \"#007BFF\",\n-    color: \"#fff\",\n-    border: \"none\",\n-    cursor: \"pointer\",\n-    marginTop: \"10px\",\n-  },\n-};\n-\n-export default Brand;\n+export default BrandPage\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739468757327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const BrandPage = () => {\n+const BrandPage = ({filtered}) => {\n   const [products, setProducts] = useState([]);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1739468762524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const BrandPage = ({filtered}) => {\n+const BrandPage = ({filteredProducts}) => {\n   const [products, setProducts] = useState([]);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1739468771998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n const BrandPage = ({filteredProducts}) => {\n-  const [products, setProducts] = useState([]);\n+  const [products, setProducts] = useState(;\n   const navigate = useNavigate();\n \n   useEffect(() => {\n     fetch(\"/db.json\")\n"
                },
                {
                    "date": 1739468777571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n const BrandPage = ({filteredProducts}) => {\n-  const [products, setProducts] = useState(;\n+  const [products, setProducts] = useState(fi;);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n     fetch(\"/db.json\")\n"
                },
                {
                    "date": 1739468782890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n const BrandPage = ({filteredProducts}) => {\n-  const [products, setProducts] = useState(fi;);\n+  const [products, setProducts] = useState(filteredProducts);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n     fetch(\"/db.json\")\n"
                },
                {
                    "date": 1739468854660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const BrandPage = ({filteredProducts}) => {\n+const BrandPage = ({}) => {\n   const [products, setProducts] = useState(filteredProducts);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1739469113702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from \"react\";\n import { useNavigate } from \"react-router-dom\";\n \n-const BrandPage = ({}) => {\n-  const [products, setProducts] = useState(filteredProducts);\n+const BrandPage = ({filteredProducts}) => {\n+  const [products, setProducts] = useState([]);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n     fetch(\"/db.json\")\n"
                },
                {
                    "date": 1739469124823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   const [products, setProducts] = useState([]);\n   const navigate = useNavigate();\n \n   useEffect(() => {\n-    fetch(\"/db.json\")\n+    fetch()\n       .then((response) => response.json())\n       .then((data) => setProducts(data.products));\n   }, []);\n \n"
                },
                {
                    "date": 1739470700915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,61 @@\n-import React, { useState, useEffect } from \"react\";\n-import { useNavigate } from \"react-router-dom\";\n+mport React, { useState, useEffect } from 'react';\n+import { Link } from 'react-router-dom';\n \n-const BrandPage = ({filteredProducts}) => {\n+const ProductPage = () => {\n   const [products, setProducts] = useState([]);\n-  const navigate = useNavigate();\n+  const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n-    fetch()\n-      .then((response) => response.json())\n-      .then((data) => setProducts(data.products));\n+    fetch(\"/db.json\")\n+      .then(response => response.json())\n+      .then(data => setProducts(data.products));\n   }, []);\n \n-  const brands = products.reduce((acc, product) => {\n-    if (!acc.some((brand) => brand.id === product.brand.id)) {\n-      acc.push(product.brand);\n+  // Group products by brand\n+  const groupedProducts = products.reduce((acc, product) => {\n+    const brand = product.brand[0]; // Since brand is in an array, we take the first element\n+    if (!acc[brand.id]) {\n+      acc[brand.id] = { brand, products: [] };\n     }\n+    acc[brand.id].products.push(product);\n     return acc;\n-  }, []);\n+  }, {});\n \n+  // Create an array of brands with their products\n+  const brandsWithProducts = Object.values(groupedProducts);\n+\n\\ No newline at end of file\n+  // Show More functionality (display all products on a new page)\n+  const showMoreProducts = () => {\n+    setVisibleProducts(products.length);\n+  };\n+\n   return (\n     <div>\n-      <h1>All Brands</h1>\n-      <div className=\"brands\">\n-        {brands.map((brand) => (\n-          <div key={brand.id} className=\"brand-box\">\n-            <img src={brand.image} alt={brand.name} />\n-            <h3>{brand.name}</h3>\n+      <h1>Products by Brand</h1>\n+      \n+      {brandsWithProducts.map(({ brand, products }) => (\n+        <div key={brand.id} className=\"brand-section\">\n+          <h2>{brand.name}</h2>\n+          <div className=\"product-list\">\n+            {products.slice(0, visibleProducts).map(product => (\n+              <div key={product.id} className=\"product-box\">\n+                <img src={product.image} alt={product.name} />\n+                <h3>{product.name}</h3>\n+              </div>\n+            ))}\n           </div>\n-        ))}\n+        </div>\n+      ))}\n+\n+      {visibleProducts < products.length && (\n+        <button onClick={showMoreProducts}>Show More Products</button>\n+      )}\n+\n+      <div>\n+        <Link to=\"/all-products\">See All Products</Link>\n       </div>\n-      <button onClick={() => navigate(\"/\")}>Back</button>\n     </div>\n   );\n };\n \n-export default BrandPage\n+export default ProductPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739470712886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n mport React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n-const ProductPage = () => {\n+const ProducbPage = () => {\n   const [products, setProducts] = useState([]);\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n@@ -57,5 +57,5 @@\n     </div>\n   );\n };\n \n-export default ProductPage;\n\\ No newline at end of file\n+export default ProducbPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739470720038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n mport React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n-const ProducbPage = () => {\n+const BrandPage = () => {\n   const [products, setProducts] = useState([]);\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n@@ -57,5 +57,5 @@\n     </div>\n   );\n };\n \n-export default ProducbPage;\n\\ No newline at end of file\n+export default BrandPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739470725681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-mport React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n const BrandPage = () => {\n   const [products, setProducts] = useState([]);\n"
                },
                {
                    "date": 1739470758699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n-const BrandPage = () => {\n+const BrandPage = ({}) => {\n   const [products, setProducts] = useState([]);\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1739470763825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n-const BrandPage = ({}) => {\n+const BrandPage = ({filteredP}) => {\n   const [products, setProducts] = useState([]);\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1739470771952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n-const BrandPage = ({filteredP}) => {\n-  const [products, setProducts] = useState([]);\n+const BrandPage = ({filteredProducts}) => {\n+  const [products, setProducts] = useState();\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n   useEffect(() => {\n     fetch(\"/db.json\")\n"
                },
                {
                    "date": 1739470782193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import React, { useState, useEffect } from 'react';\n import { Link } from 'react-router-dom';\n \n const BrandPage = ({filteredProducts}) => {\n-  const [products, setProducts] = useState();\n+  const [products, setProducts] = useState(filteredProducts);\n   const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n \n-  useEffect(() => {\n-    fetch(\"/db.json\")\n-      .then(response => response.json())\n-      .then(data => setProducts(data.products));\n-  }, []);\n+  // useEffect(() => {\n+  //   fetch(\"/db.json\")\n+  //     .then(response => response.json())\n+  //     .then(data => setProducts(data.products));\n+  // }, []);\n \n   // Group products by brand\n   const groupedProducts = products.reduce((acc, product) => {\n     const brand = product.brand[0]; // Since brand is in an array, we take the first element\n"
                },
                {
                    "date": 1739478517447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,40 @@\n-import React, { useState, useEffect } from 'react';\n-import { Link } from 'react-router-dom';\n+mport React, { useState, useEffect } from \"react\";\n+import { useParams } from \"react-router-dom\";\n \n-const BrandPage = ({filteredProducts}) => {\n-  const [products, setProducts] = useState(filteredProducts);\n-  const [visibleProducts, setVisibleProducts] = useState(6); // Initially show 6 products\n+const BrandProductsPage = () => {\n+  const { brandId } = useParams();\n+  const [products, setProducts] = useState([]);\n+  const [brand, setBrand] = useState(null);\n \n-  // useEffect(() => {\n-  //   fetch(\"/db.json\")\n-  //     .then(response => response.json())\n-  //     .then(data => setProducts(data.products));\n-  // }, []);\n+  useEffect(() => {\n+    fetch(\"/db.json\")\n+      .then((response) => response.json())\n+      .then((data) => {\n+        const filteredProducts = data.products.filter(\n+          (product) => product.brand[0].id === parseInt(brandId)\n+        );\n+        setProducts(filteredProducts);\n+        if (filteredProducts.length > 0) {\n+          setBrand(filteredProducts[0].brand[0]);\n+        }\n+      });\n+  }, [brandId]);\n \n-  // Group products by brand\n-  const groupedProducts = products.reduce((acc, product) => {\n-    const brand = product.brand[0]; // Since brand is in an array, we take the first element\n-    if (!acc[brand.id]) {\n-      acc[brand.id] = { brand, products: [] };\n-    }\n-    acc[brand.id].products.push(product);\n-    return acc;\n-  }, {});\n+  if (!brand) return <div>Loading...</div>;\n \n-  // Create an array of brands with their products\n-  const brandsWithProducts = Object.values(groupedProducts);\n-\n-  // Show More functionality (display all products on a new page)\n-  const showMoreProducts = () => {\n-    setVisibleProducts(products.length);\n-  };\n-\n   return (\n     <div>\n-      <h1>Products by Brand</h1>\n-      \n-      {brandsWithProducts.map(({ brand, products }) => (\n-        <div key={brand.id} className=\"brand-section\">\n-          <h2>{brand.name}</h2>\n-          <div className=\"product-list\">\n-            {products.slice(0, visibleProducts).map(product => (\n-              <div key={product.id} className=\"product-box\">\n\\ No newline at end of file\n-                <img src={product.image} alt={product.name} />\n-                <h3>{product.name}</h3>\n-              </div>\n-            ))}\n+      <h1>{brand.name} Products</h1>\n+      <div className=\"product-list\">\n+        {products.map((product) => (\n+          <div key={product.id} className=\"product-box\">\n+            <img src={product.image} alt={product.name} />\n+            <h3>{product.name}</h3>\n           </div>\n-        </div>\n-      ))}\n-\n-      {visibleProducts < products.length && (\n-        <button onClick={showMoreProducts}>Show More Products</button>\n-      )}\n-\n-      <div>\n-        <Link to=\"/all-products\">See All Products</Link>\n+        ))}\n       </div>\n     </div>\n   );\n };\n \n-export default BrandPage;\n+export default BrandProductsPage\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739478531984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n mport React, { useState, useEffect } from \"react\";\n import { useParams } from \"react-router-dom\";\n \n-const BrandProductsPage = () => {\n+const = () => {\n   const { brandId } = useParams();\n   const [products, setProducts] = useState([]);\n   const [brand, setBrand] = useState(null);\n \n@@ -36,5 +36,5 @@\n     </div>\n   );\n };\n \n-export default BrandProductsPage\n\\ No newline at end of file\n+export default\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739478543520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-mport React, { useState, useEffect } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n import { useParams } from \"react-router-dom\";\n \n-const = () => {\n+const BrandProducts = () => {\n   const { brandId } = useParams();\n   const [products, setProducts] = useState([]);\n   const [brand, setBrand] = useState(null);\n \n@@ -36,5 +36,5 @@\n     </div>\n   );\n };\n \n-export default\n\\ No newline at end of file\n+export default BrandProducts\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740509916989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { useParams } from \"react-router-dom\";\n+import { useSelector, useDispatch } from \"react-redux\";\n+import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n \n const BrandProducts = () => {\n   const { brandId } = useParams();\n   const [products, setProducts] = useState([]);\n"
                },
                {
                    "date": 1743024484301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,748 @@\n-import React, { useState, useEffect } from \"react\";\n-import { useParams } from \"react-router-dom\";\n+import React, { useEffect, useState, useRef } from \"react\";\n+import \"./products.css\";\n+import { AuthContext } from \"../../AuthContext\";\n+import { useContext } from \"react\";\n import { useSelector, useDispatch } from \"react-redux\";\n import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n+import { addToWishListAPI } from \"../../wishlistAction\";\n+import styled, { keyframes } from \"styled-components\";\n+import { useTranslation } from \"react-i18next\";\n+import Slider from \"react-slick\";\n+import { useNavigate, useParams, Link } from \"react-router-dom\";\n \n-const BrandProducts = () => {\n-  const { brandId } = useParams();\n+import { addToCart, removeFromCart } from \"../../cartSlice\";\n+import e from \"cors\";\n+\n+const categoryOptions = {\n+  1: \"0px 0px 10px 1px red\",\n+  2: \"0px 0px 10px 1px yellow\",\n+  3: \"0px 0px 10px 1px orange\",\n+  4: \"0px 0px 10px 1px blue\",\n+  5: \"0px 0px 10px 1px black\",\n+  6: \"0px 0px 10px 1px violet\",\n+};\n+const categoryShadow = {\n+  farm: 1,\n+  computer: 2,\n+  Clothing: 3,\n+  accesseries: 4,\n+  other: 5,\n+};\n+const CloseButton = styled.button`\n+&:hover{\n+transform: scale(1.1);\n+`;\n+\n+const BoxContainer = styled.div`\n+  border: px solid red;\n+  border-radius: 12px;\n\\ No newline at end of file\n+  box-shadow: ${(props) => categoryOptions[props.categoryOption]};\n+\n+  &:hover {\n+    transform: scale(1.1);\n+  }\n+`;\n+const AddtocartButton = styled.button`\n+background:none;\n+border: 1px solid RED;\n+color: red;\n+padding: 10px 20px;\n+border-radius: 15px;\n+cursor: pointer;\n+font-size: 100%,\n+transition: all 0.3s ease;\n+width: 90%;\n+margin-top:${(props) => (props.main ? \"40px\" : \"10px\")};\n+\n+\n+&:hover{\n+transform: scale(1.1);\n+border:1px solid green;\n+color:green;\n+\n+}\n+`;\n+const MAddtocartButton = styled.button`\n+background:none;\n+border: 1px solid RED;\n+color: red;\n+padding: 10px 20px;\n+border-radius: 15px;\n+cursor: pointer;\n+font-size: 100%,\n+transition: all 0.3s ease;\n+width:auto;\n+margin-top:${(props) => (props.main ? \"5px\" : \"-60px\")};\n+\n+\n+&:hover{\n+transform: scale(1.1);\n+border:1px solid green;\n+color:green;\n+\n+}\n+`;\n+const Name = styled.a`\n+  font-size: ${({ fontSize }) => fontSize || \"20px\"};\n+`;\n+const DescriptionContainer = styled.label`\n+  font-size: 10px;\n+`;\n+\n+const DescriptionTitle = styled.h6`\n+  font-size: 13px;\n+`;\n+const DescriptionContent = styled.a`\n+  font-size: 13px;\n+`;\n+const Price = styled.h4`\n+  font-size: 16px;\n+`;\n+const Discount = styled.h3`\n+  font-size: 13px;\n+`;\n+const StatusContainer = styled.label`\n+  font-size: 13px;\n+`;\n+const StatusTitle = styled.h6`\n+  font-size: 13px;\n+`;\n+const StatusContent = styled.a`\n+  font-size: 13px;\n+`;\n+\n+const CategoryPage = ({\n+  api,\n+  loading,\n+  add,\n+  images,\n+\n+  SelectedProduct,\n+  addToCart,\n+  addToWishList,\n+  handleShowAlert,\n+  showAlert,\n+  mobilefilteredProducts,\n+  searchTerm,\n+  highlightText,\n+  filteredProducts,\n+\n+  selectedCategory,\n+  Fortop,\n+}) => {\n+  const [currentIndex, setCurrentIndex] = useState(0);\n   const [products, setProducts] = useState([]);\n-  const [brand, setBrand] = useState(null);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const [selectedProduct, setSelectedProduct] = useState(null);\n+  const [selectedDProduct, setDSelectedProduct] = useState(null);\n+  const [selected, setSelected] = useState(false);\n+  const userId = localStorage.getItem(\"userId\");\n+  const [showDetails, setShowDetails] = useState(true);\n+  const username = localStorage.getItem(\"username\");\n+  const previewRef = useRef(null);\n+  const { categoryName } = useParams();\n+  const buttonRef = useRef(null);\n+  const navigate = useNavigate();\n+  const { t } = useTranslation();\n+  const dispatch = useDispatch(); // Function to check screen size\n \n+  // Function to check screen size\n+  const handleResize = () => {\n+    setIsMobile(window.innerWidth <= 1000);\n+  };\n+\n   useEffect(() => {\n-    fetch(\"/db.json\")\n+    handleResize(); // Initial check\n+    window.addEventListener(\"resize\", handleResize); // Update on resize\n+    return () => window.removeEventListener(\"resize\", handleResize);\n+  }, []);\n+\n+\n+  const handleProductClick = (product) => {\n+    SelectedProduct(product);\n+    localStorage.setItem(\"selectedProduct\", product);\n+    navigate(\"/selectedProduct\");\n+  };\n+\n+  const hanldleProductHid = () => {\n+    setSelectedProduct(null);\n+  };\n+  const nextImage = () => {\n+    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n+  };\n+\n+  // Toggle the selection state of a product\n+  const toggleSelection = (id, currentSelection) => {\n+    // Update the product on the server using PATCH\n+    fetch(`${api}/updateProducts/${id}`, {\n+      method: \"PATCH\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({ isSelected: !currentSelection }),\n+    })\n       .then((response) => response.json())\n-      .then((data) => {\n-        const filteredProducts = data.products.filter(\n-          (product) => product.brand[0].id === parseInt(brandId)\n+      .then((updatedProduct) => {\n+        // Update the local state to reflect the change\n+        setProducts((prevProducts) =>\n+          prevProducts.map((product) =>\n+            product.id === id ? updatedProduct : product\n+          )\n         );\n-        setProducts(filteredProducts);\n-        if (filteredProducts.length > 0) {\n-          setBrand(filteredProducts[0].brand[0]);\n-        }\n-      });\n-  }, [brandId]);\n+      })\n+      .catch((error) => console.error(\"Error updating product:\", error));\n+  };\n \n-  if (!brand) return <div>Loading...</div>;\n+  // Fetch all products\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      const response = await fetch(`${api}/products`);\n+      const data = await response.json();\n+      const filteredCategory = data.filter(\n+        (product) => product.category === categoryName\n+      );\n+      setProducts(data);\n+      setProducts(filteredCategory);\n+    };\n+    fetchProducts();\n+  }, [api]);\n \n+  // // Toggle like/dislike with one button\n+  // const toggleLike = async (product) => {\n+  //   if (!product) return;\n+\n+  //   const liked = product.likedBy.some((user) => user.userId === userId);\n+  //   const endpoint = liked ? \"dislike\" : \"like\";\n+\n+  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n+  //     method: \"PATCH\",\n+  //     headers: { \"Content-Type\": \"application/json\" },\n+  //     body: JSON.stringify({ userId, username }), // Send user info\n+  //   });\n+\n+  //   const updatedProduct = await response.json();\n+\n+  //   // Update state\n+  //   setProducts(\n+  //     products.map((p) =>\n+  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n+  //     )\n+  //   );\n+  //   setSelectedProduct({ ...product, ...updatedProduct });\n+  // };\n+  // ////////////////////////////////////////////////////////\n+\n+  const handleMouseEnter = () => {\n+    if (buttonRef.current) {\n+      buttonRef.current.click();\n+    }\n+  };\n+\n+  // ///////////////////////////////////////////////////////////\n+\n+  const show = (event) => {\n+    setShowDetails((prevShow) => !prevShow);\n+    if (previewRef.current && !previewRef.current.contains(event.target)) {\n+    }\n+  };\n+\n+  // useEffect(() => {\n+  //   // Attach event listener to the whole document\n+  //   document.addEventListener(\"mousedown\", show);\n+  //   return () => {\n+  //     document.removeEventListener(\"mousedown\", show);\n+  //   };\n+  // }, []);\n+  const styles = {\n+    container: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"20px\",\n+      background: \"white\",\n+      maxWidth: \"96%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"20px\",\n+      marginTop: \"50px\",\n+    },\n+    box: {\n+      width: \"250px\",\n+      height: \"250px\",\n+    },\n+\n+    lastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  const mstyles = {\n+    Mcontainer: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"10px\",\n+      background: \"white\",\n+      maxWidth: \"100%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"0px\",\n+      marginTop: \"200px\",\n+    },\n+    mbox: {\n+      width: \"100px\",\n+      height: \"150px\",\n+    },\n+\n+    mlastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n   return (\n-    <div>\n-      <h1>{brand.name} Products</h1>\n-      <div className=\"product-list\">\n-        {products.map((product) => (\n-          <div key={product.id} className=\"product-box\">\n-            <img src={product.image} alt={product.name} />\n-            <h3>{product.name}</h3>\n-          </div>\n-        ))}\n-      </div>\n-    </div>\n+    <>\n+      {isMobile ? (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n+              {products.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    <BoxContainer\n+                      key={index}\n+                      categoryOption={categoryShadow[product.category]}\n+                    >\n+                      <div\n+                        key={index}\n+                        style={{\n+                          ...mstyles.mbox,\n+\n+                          // justifyContent:\n+                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                        }}\n+                      >\n+                        {product.images.length > 0 ? (\n+                          <img\n+                            src={product.images[0]} // Display first image only\n+                            alt={product.name}\n+                            style={{\n+                              width: \"135px\",\n+                              height: \"150px\",\n+                              objectFit: \"cover\",\n+                              borderRadius: \"10px\",\n+                              cursor: \"pointer\",\n+                            }}\n+                            onClick={() => {\n+                              setSelectedProduct(product);\n+                              handleProductClick(product);\n+                              show();\n+                            }}\n+                          />\n+                        ) : (\n+                          <p>{t(\"No Image Available\")}</p>\n+                        )}\n+                        <button\n+                          style={{\n+                            position: \"relative\",\n+                            left: \"105px\",\n+                            top: \"-15px\",\n+                            background: \"none\",\n+                            border: \"none\",\n+                            fontSize: \"35px\",\n+                            color: \"orange\",\n+                          }}\n+                        >\n+                          +\n+                        </button>\n+                      </div>\n+\n+                      {/* text */}\n+                      <div style={{ display: \"flex\" }}>\n+                        <div\n+                          className=\"text\"\n+                          style={{\n+                            borderRadius: \"10PX\",\n+                            width: \"100%\",\n+                            height: \"100px\",\n+                            // background:\"red\",\n+                            padding: \"10px\",\n+                          }}\n+                        >\n+                          <Name className=\"name\" fontSize=\"17px\">\n+                            <span\n+                              style={{ color: \"black\" }}\n+                              dangerouslySetInnerHTML={{\n+                                __html: highlightText(product.name, searchTerm),\n+                              }}\n+                            ></span>{\" \"}\n+                          </Name>\n+\n+                          {/* <DescriptionContainer>\n+                         <DescriptionTitle>\n+                           {t(\"Description\")}:\n+                           <DescriptionContent>\n+                             {product.description}\n+                           </DescriptionContent>\n+                         </DescriptionTitle>\n+                       </DescriptionContainer> */}\n+                          <StatusContainer>\n+                            <StatusTitle>\n+                              {t(\"Status\")}:\n+                              <StatusContent>{product.status}</StatusContent>\n+                            </StatusTitle>\n+                          </StatusContainer>\n+                          <Price key={index}>\n+                            {t(\"CFA\")}: {product.price - product.discount}\n+                          </Price>\n+                          {product.discount > 0 && (\n+                            <Discount key={index}>\n+                              {t(\"CFA\")}:<s>{product.price}</s>\n+                              <label\n+                                style={{\n+                                  width: \"40px\",\n+                                  height: \"20px\",\n+                                  background: \"#90EE90\",\n+                                  textAlign: \"center\",\n+                                  borderRadius: \"5px\",\n+                                  marginLeft: \"15px\",\n+                                }}\n+                              >\n+                                -\n+                                {(\n+                                  (product.discount / product.price) *\n+                                  100\n+                                ).toFixed(0)}\n+                                %\n+                              </label>\n+                            </Discount>\n+                          )}\n+                        </div>\n+                      </div>\n+\n+                      <div\n+                        style={{\n+                          background: \"\",\n+                          textAlign: \"center\",\n+                          padding: \"5px\",\n+                        }}\n+                      >\n+                        <MAddtocartButton\n+                          main={product.discount > 0}\n+                          width=\"auto\"\n+                          onClick={() => dispatch(addToCartAPI(product))}\n+                        >\n+                          {t(\"Add To Cart\")}\n+                        </MAddtocartButton>\n+                      </div>\n+                    </BoxContainer>\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+\n+              {selectedProduct && showDetails && selectedProduct && <></>}\n+            </div>\n+          }\n+\n+          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n+        </React.Fragment>\n+      ) : (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={styles.container}>\n+              {filteredProducts.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    {selectedProduct === product && (\n+                      <div\n+                        style={{\n+                          padding: \"20px\",\n+                          margin: \"0 auto\",\n+                          marginTop: \"0px\",\n+                          Width: \"40%\",\n+                          maxHeight: \"100vh\",\n+                          border: \"1px solid green\",\n+                          borderRadius: \"20px\",\n+                          // background:'red',\n+                          boxShadow: \"10px 0px 50px 0px pink\",\n+                        }}\n+                      >\n+                        <div style={{ display: \"flex\" }}>\n+                          <div style={{ background: \"\", width: \"400px\" }}>\n+                            {selectedProduct.images &&\n+                            selectedProduct.images.length > 0 ? (\n+                              <Slider {...style.sliderSettings}>\n+                                {selectedProduct.images.map((imgUrl, index) => (\n+                                  <div key={index}>\n+                                    <img\n+                                      src={imgUrl}\n+                                      alt={`${selectedProduct.title} - Image ${\n+                                        index + 1\n+                                      }`}\n+                                      style={{\n+                                        width: \"400px\",\n+                                        height: \"450px\",\n+                                        borderRadius: \"8px\",\n+                                      }}\n+                                    />\n+                                  </div>\n+                                ))}\n+                              </Slider>\n+                            ) : (\n+                              <p>No images available</p>\n+                            )}\n+                          </div>\n+                          <div>{SelectedProduct}</div>\n+                          <div\n+                            style={{\n+                              background: \"#4ECDC4\",\n+                              width: \"500px\",\n+                              marginLeft: \"30px\",\n+                            }}\n+                          >\n+                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n+                              <CloseButton\n+                                style={{\n+                                  position: \"relative\",\n+                                  left: \"420px\",\n+                                  top: \"-40px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"0px 14px 10px 10px\",\n+                                  width: \"80px\",\n+                                  border: \"1px solid red\",\n+                                  cursor: \"pointer\",\n+                                  fontWeight: \"bold\",\n+                                  fontSize: \"30px\",\n+                                  color: \"red\",\n+                                }}\n+                                onClick={() => hanldleProductHid()}\n+                              >\n+                                {t(\"close\")}\n+                              </CloseButton>\n+                              <h4>\n+                                {\" \"}\n+                                <Link\n+                                  to={`/productsByOwner/${selectedProduct.owner}`}\n+                                >\n+                                  <h4> {selectedProduct.owner}</h4>\n+                                </Link>\n+                              </h4>\n+                              <h1>{selectedProduct.name}</h1>\n+                              <p>{selectedProduct.description}</p>\n+                              <p>\n+                                <strong>Price:</strong> {selectedProduct.price}\n+                              </p>\n+                            </div>\n+                            <div style={style.buttonsContainer}>\n+                              <div>\n+                                <button\n+                                  style={style.buttons}\n+                                  onClick={() =>\n+                                    dispatch(\n+                                      addToCartBeforeLogin(selectedProduct)\n+                                    )\n+                                  }\n+                                >\n+                                  Add To Cart\n+                                </button>\n+                              </div>\n+                              <div>\n+                                <button\n+                                  style={{ ...style.buttons }}\n+                                  onClick={() => dispatch(selectedProduct)}\n+                                >\n+                                  [add To WishList]\n+                                </button>\n+                              </div>\n+                            </div>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    )}\n+                    {product !== selectedProduct && (\n+                      <BoxContainer\n+                        key={index}\n+                        categoryOption={categoryShadow[product.category]}\n+                      >\n+                        <div\n+                          key={index}\n+                          style={{\n+                            ...styles.box,\n+\n+                            // justifyContent:\n+                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                          }}\n+                        >\n+                          {product.images.length > 0 ? (\n+                            <img\n+                              src={product.images[0]} // Display first image only\n+                              alt={product.name}\n+                              style={{\n+                                width: \"250px\",\n+                                height: \"250px\",\n+                                objectFit: \"cover\",\n+                                borderRadius: \"10px\",\n+                                cursor: \"pointer\",\n+                              }}\n+                              onClick={() => {\n+                                setSelectedProduct(product);\n+\n+                                show();\n+                              }}\n+                            />\n+                          ) : (\n+                            <p>{t(\"No Image Available\")}</p>\n+                          )}\n+                        </div>\n+\n+                        {/* text */}\n+                        <div style={{ display: \"flex\" }}>\n+                          <div\n+                            className=\"text\"\n+                            style={{\n+                              borderRadius: \"10PX\",\n+                              width: \"100%\",\n+                              height: \"100px\",\n+                              //  background:\"red\",\n+                              padding: \"10px\",\n+                            }}\n+                          >\n+                            <Name className=\"name\">\n+                              <span\n+                                style={{ color: \"black\" }}\n+                                dangerouslySetInnerHTML={{\n+                                  __html: highlightText(\n+                                    product.name,\n+                                    searchTerm\n+                                  ),\n+                                }}\n+                              ></span>{\" \"}\n+                            </Name>\n+                            <DescriptionContainer>\n+                              <DescriptionTitle>\n+                                {t(\"Description\")}:\n+                                <DescriptionContent>\n+                                  {product.description}\n+                                </DescriptionContent>\n+                              </DescriptionTitle>\n+                            </DescriptionContainer>\n+                            <StatusContainer>\n+                              <StatusTitle>\n+                                {t(\"Status\")}:\n+                                <StatusContent>{product.status}</StatusContent>\n+                              </StatusTitle>\n+                            </StatusContainer>\n+                            <Price key={index}>\n+                              {t(\"CFA\")}: {product.price - product.discount}\n+                            </Price>\n+                            {product.discount > 0 && (\n+                              <Discount key={index}>\n+                                {t(\"CFA\")}:<s>{product.price}</s>\n+                                <label\n+                                  style={{\n+                                    width: \"40px\",\n+                                    height: \"20px\",\n+                                    background: \"#90EE90\",\n+                                    textAlign: \"center\",\n+                                    borderRadius: \"5px\",\n+                                    marginLeft: \"15px\",\n+                                  }}\n+                                >\n+                                  -\n+                                  {(\n+                                    (product.discount / product.price) *\n+                                    100\n+                                  ).toFixed(0)}\n+                                  %\n+                                </label>\n+                              </Discount>\n+                            )}\n+                          </div>\n+\n+                          {/* like and wishlist */}\n+                          <div style={{ background: \"\" }}>\n+                            <div>{/* Product Display */}</div>\n+                            <div>\n+                              <button\n+                                style={{\n+                                  background: \"transparent\",\n+                                  border: \"0px solid orange\",\n+                                  color: \"orange\",\n+                                  padding: \"0px 0px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"10px 10px 10px 10px \",\n+                                  cursor: \"pointer\",\n+                                  fontSize: \"40px\",\n+                                  transition: \"all 0.3s ease\",\n+                                  marginRight: \"auto\",\n+                                  width: \"35px\",\n+                                }}\n+                                onClick={() =>\n+                                  dispatch(addToCartBeforeLogin(product))\n+                                }\n+                              >\n+                                +\n+                              </button>\n+                            </div>\n+                          </div>\n+                        </div>\n+\n+                        <div\n+                          style={{\n+                            background: \"\",\n+                            textAlign: \"center\",\n+                            padding: \"5px\",\n+                          }}\n+                        >\n+                          <AddtocartButton\n+                            main={product.discount > 0}\n+                            onClick={() => dispatch(addToCartAPI(product))}\n+                          >\n+                            {t(\"Add To Cart\")}\n+                          </AddtocartButton>\n+                        </div>\n+                      </BoxContainer>\n+                    )}\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+            </div>\n+          }\n+        </React.Fragment>\n+      )}\n+    </>\n   );\n };\n+const style = {\n+  sliderSettings: {\n+    dots: true, // Show navigation dots\n+    infinite: true, // Enable infinite looping\n+    speed: 100, // Transition speed (ms)\n+    slidesToShow: 1, // Show one image at a time\n+    slidesToScroll: 1, // Scroll one image per action\n+    autoplay: true,\n+    autoplaySpeed: 3000, // Autoplay speed (ms)\n+  },\n+  buttonsContainer: {\n+    display: \"flex\",\n+  },\n+  buttons: {\n+    color: \"orangered\",\n+    background: \"none\",\n+    border: \"2px solid orangered\",\n+    margin: \"10px\",\n+    borderRadius: \"10px\",\n+    before: \"+\",\n+  },\n+};\n \n-export default BrandProducts\n+export default CategoryPage;\n"
                },
                {
                    "date": 1743024511152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n   const userId = localStorage.getItem(\"userId\");\n   const [showDetails, setShowDetails] = useState(true);\n   const username = localStorage.getItem(\"username\");\n   const previewRef = useRef(null);\n-  const { categoryName } = useParams();\n+  const { Name } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n   const { t } = useTranslation();\n   const dispatch = useDispatch(); // Function to check screen size\n@@ -744,5 +744,5 @@\n     before: \"+\",\n   },\n };\n \n-export default CategoryPage;\n\\ No newline at end of file\n+export default CategoryPage;\n"
                },
                {
                    "date": 1743024519600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n   const userId = localStorage.getItem(\"userId\");\n   const [showDetails, setShowDetails] = useState(true);\n   const username = localStorage.getItem(\"username\");\n   const previewRef = useRef(null);\n-  const { Name } = useParams();\n+  const { brandName } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n   const { t } = useTranslation();\n   const dispatch = useDispatch(); // Function to check screen size\n"
                },
                {
                    "date": 1743024548780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.category === categoryName\n+        (product) => produc === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743024555457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,748 @@\n+import React, { useEffect, useState, useRef } from \"react\";\n+import \"./products.css\";\n+import { AuthContext } from \"../../AuthContext\";\n+import { useContext } from \"react\";\n+import { useSelector, useDispatch } from \"react-redux\";\n+import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n+import { addToWishListAPI } from \"../../wishlistAction\";\n+import styled, { keyframes } from \"styled-components\";\n+import { useTranslation } from \"react-i18next\";\n+import Slider from \"react-slick\";\n+import { useNavigate, useParams, Link } from \"react-router-dom\";\n+\n+import { addToCart, removeFromCart } from \"../../cartSlice\";\n+import e from \"cors\";\n+\n+const categoryOptions = {\n+  1: \"0px 0px 10px 1px red\",\n+  2: \"0px 0px 10px 1px yellow\",\n+  3: \"0px 0px 10px 1px orange\",\n+  4: \"0px 0px 10px 1px blue\",\n+  5: \"0px 0px 10px 1px black\",\n+  6: \"0px 0px 10px 1px violet\",\n+};\n+const categoryShadow = {\n+  farm: 1,\n+  computer: 2,\n+  Clothing: 3,\n+  accesseries: 4,\n+  other: 5,\n+};\n+const CloseButton = styled.button`\n+&:hover{\n+transform: scale(1.1);\n+`;\n+\n+const BoxContainer = styled.div`\n+  border: px solid red;\n+  border-radius: 12px;\n+  box-shadow: ${(props) => categoryOptions[props.categoryOption]};\n+\n+  &:hover {\n+    transform: scale(1.1);\n+  }\n+`;\n+const AddtocartButton = styled.button`\n+background:none;\n+border: 1px solid RED;\n+color: red;\n+padding: 10px 20px;\n+border-radius: 15px;\n+cursor: pointer;\n+font-size: 100%,\n+transition: all 0.3s ease;\n+width: 90%;\n+margin-top:${(props) => (props.main ? \"40px\" : \"10px\")};\n+\n+\n+&:hover{\n+transform: scale(1.1);\n+border:1px solid green;\n+color:green;\n+\n+}\n+`;\n+const MAddtocartButton = styled.button`\n+background:none;\n+border: 1px solid RED;\n+color: red;\n+padding: 10px 20px;\n+border-radius: 15px;\n+cursor: pointer;\n+font-size: 100%,\n+transition: all 0.3s ease;\n+width:auto;\n+margin-top:${(props) => (props.main ? \"5px\" : \"-60px\")};\n+\n+\n+&:hover{\n+transform: scale(1.1);\n+border:1px solid green;\n+color:green;\n+\n+}\n+`;\n+const Name = styled.a`\n+  font-size: ${({ fontSize }) => fontSize || \"20px\"};\n+`;\n+const DescriptionContainer = styled.label`\n+  font-size: 10px;\n+`;\n+\n+const DescriptionTitle = styled.h6`\n+  font-size: 13px;\n+`;\n+const DescriptionContent = styled.a`\n+  font-size: 13px;\n+`;\n+const Price = styled.h4`\n+  font-size: 16px;\n+`;\n+const Discount = styled.h3`\n+  font-size: 13px;\n+`;\n+const StatusContainer = styled.label`\n+  font-size: 13px;\n+`;\n+const StatusTitle = styled.h6`\n+  font-size: 13px;\n+`;\n+const StatusContent = styled.a`\n+  font-size: 13px;\n+`;\n+\n+const CategoryPage = ({\n+  api,\n+  loading,\n+  add,\n+  images,\n+\n+  SelectedProduct,\n+  addToCart,\n+  addToWishList,\n+  handleShowAlert,\n+  showAlert,\n+  mobilefilteredProducts,\n+  searchTerm,\n+  highlightText,\n+  filteredProducts,\n+\n+  selectedCategory,\n+  Fortop,\n+}) => {\n+  const [currentIndex, setCurrentIndex] = useState(0);\n+  const [products, setProducts] = useState([]);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const [selectedProduct, setSelectedProduct] = useState(null);\n+  const [selectedDProduct, setDSelectedProduct] = useState(null);\n+  const [selected, setSelected] = useState(false);\n+  const userId = localStorage.getItem(\"userId\");\n+  const [showDetails, setShowDetails] = useState(true);\n+  const username = localStorage.getItem(\"username\");\n+  const previewRef = useRef(null);\n+  const { brandName } = useParams();\n+  const buttonRef = useRef(null);\n+  const navigate = useNavigate();\n+  const { t } = useTranslation();\n+  const dispatch = useDispatch(); // Function to check screen size\n+\n+  // Function to check screen size\n+  const handleResize = () => {\n+    setIsMobile(window.innerWidth <= 1000);\n+  };\n+\n+  useEffect(() => {\n+    handleResize(); // Initial check\n+    window.addEventListener(\"resize\", handleResize); // Update on resize\n+    return () => window.removeEventListener(\"resize\", handleResize);\n+  }, []);\n+\n+\n+  const handleProductClick = (product) => {\n+    SelectedProduct(product);\n+    localStorage.setItem(\"selectedProduct\", product);\n+    navigate(\"/selectedProduct\");\n+  };\n+\n+  const hanldleProductHid = () => {\n+    setSelectedProduct(null);\n+  };\n+  const nextImage = () => {\n+    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n+  };\n+\n+  // Toggle the selection state of a product\n+  const toggleSelection = (id, currentSelection) => {\n+    // Update the product on the server using PATCH\n+    fetch(`${api}/updateProducts/${id}`, {\n+      method: \"PATCH\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({ isSelected: !currentSelection }),\n+    })\n+      .then((response) => response.json())\n+      .then((updatedProduct) => {\n+        // Update the local state to reflect the change\n+        setProducts((prevProducts) =>\n+          prevProducts.map((product) =>\n+            product.id === id ? updatedProduct : product\n+          )\n+        );\n+      })\n+      .catch((error) => console.error(\"Error updating product:\", error));\n+  };\n+\n+  // Fetch all products\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      const response = await fetch(`${api}/products`);\n+      const data = await response.json();\n+      const filteredCategory = data.filter(\n+        (product) => product.bran === categoryName\n+      );\n+      setProducts(data);\n+      setProducts(filteredCategory);\n+    };\n+    fetchProducts();\n+  }, [api]);\n+\n+  // // Toggle like/dislike with one button\n+  // const toggleLike = async (product) => {\n+  //   if (!product) return;\n+\n+  //   const liked = product.likedBy.some((user) => user.userId === userId);\n+  //   const endpoint = liked ? \"dislike\" : \"like\";\n+\n+  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n+  //     method: \"PATCH\",\n+  //     headers: { \"Content-Type\": \"application/json\" },\n+  //     body: JSON.stringify({ userId, username }), // Send user info\n+  //   });\n+\n+  //   const updatedProduct = await response.json();\n+\n+  //   // Update state\n+  //   setProducts(\n+  //     products.map((p) =>\n+  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n+  //     )\n+  //   );\n+  //   setSelectedProduct({ ...product, ...updatedProduct });\n+  // };\n+  // ////////////////////////////////////////////////////////\n+\n+  const handleMouseEnter = () => {\n+    if (buttonRef.current) {\n+      buttonRef.current.click();\n+    }\n+  };\n+\n+  // ///////////////////////////////////////////////////////////\n+\n+  const show = (event) => {\n+    setShowDetails((prevShow) => !prevShow);\n+    if (previewRef.current && !previewRef.current.contains(event.target)) {\n+    }\n+  };\n+\n+  // useEffect(() => {\n+  //   // Attach event listener to the whole document\n+  //   document.addEventListener(\"mousedown\", show);\n+  //   return () => {\n+  //     document.removeEventListener(\"mousedown\", show);\n+  //   };\n+  // }, []);\n+  const styles = {\n+    container: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"20px\",\n+      background: \"white\",\n+      maxWidth: \"96%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"20px\",\n+      marginTop: \"50px\",\n+    },\n+    box: {\n+      width: \"250px\",\n+      height: \"250px\",\n+    },\n+\n+    lastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  const mstyles = {\n+    Mcontainer: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"10px\",\n+      background: \"white\",\n+      maxWidth: \"100%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"0px\",\n+      marginTop: \"200px\",\n+    },\n+    mbox: {\n+      width: \"100px\",\n+      height: \"150px\",\n+    },\n+\n+    mlastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  return (\n+    <>\n+      {isMobile ? (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n+              {products.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    <BoxContainer\n+                      key={index}\n+                      categoryOption={categoryShadow[product.category]}\n+                    >\n+                      <div\n+                        key={index}\n+                        style={{\n+                          ...mstyles.mbox,\n+\n+                          // justifyContent:\n+                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                        }}\n+                      >\n+                        {product.images.length > 0 ? (\n+                          <img\n+                            src={product.images[0]} // Display first image only\n+                            alt={product.name}\n+                            style={{\n+                              width: \"135px\",\n+                              height: \"150px\",\n+                              objectFit: \"cover\",\n+                              borderRadius: \"10px\",\n+                              cursor: \"pointer\",\n+                            }}\n+                            onClick={() => {\n+                              setSelectedProduct(product);\n+                              handleProductClick(product);\n+                              show();\n+                            }}\n+                          />\n+                        ) : (\n+                          <p>{t(\"No Image Available\")}</p>\n+                        )}\n+                        <button\n+                          style={{\n+                            position: \"relative\",\n+                            left: \"105px\",\n+                            top: \"-15px\",\n+                            background: \"none\",\n+                            border: \"none\",\n+                            fontSize: \"35px\",\n+                            color: \"orange\",\n+                          }}\n+                        >\n+                          +\n+                        </button>\n+                      </div>\n+\n+                      {/* text */}\n+                      <div style={{ display: \"flex\" }}>\n+                        <div\n+                          className=\"text\"\n+                          style={{\n+                            borderRadius: \"10PX\",\n+                            width: \"100%\",\n+                            height: \"100px\",\n+                            // background:\"red\",\n+                            padding: \"10px\",\n+                          }}\n+                        >\n+                          <Name className=\"name\" fontSize=\"17px\">\n+                            <span\n+                              style={{ color: \"black\" }}\n+                              dangerouslySetInnerHTML={{\n+                                __html: highlightText(product.name, searchTerm),\n+                              }}\n+                            ></span>{\" \"}\n+                          </Name>\n+\n+                          {/* <DescriptionContainer>\n+                         <DescriptionTitle>\n+                           {t(\"Description\")}:\n+                           <DescriptionContent>\n+                             {product.description}\n+                           </DescriptionContent>\n+                         </DescriptionTitle>\n+                       </DescriptionContainer> */}\n+                          <StatusContainer>\n+                            <StatusTitle>\n+                              {t(\"Status\")}:\n+                              <StatusContent>{product.status}</StatusContent>\n+                            </StatusTitle>\n+                          </StatusContainer>\n+                          <Price key={index}>\n+                            {t(\"CFA\")}: {product.price - product.discount}\n+                          </Price>\n+                          {product.discount > 0 && (\n+                            <Discount key={index}>\n+                              {t(\"CFA\")}:<s>{product.price}</s>\n+                              <label\n+                                style={{\n+                                  width: \"40px\",\n+                                  height: \"20px\",\n+                                  background: \"#90EE90\",\n+                                  textAlign: \"center\",\n+                                  borderRadius: \"5px\",\n+                                  marginLeft: \"15px\",\n+                                }}\n+                              >\n+                                -\n+                                {(\n+                                  (product.discount / product.price) *\n+                                  100\n+                                ).toFixed(0)}\n+                                %\n+                              </label>\n+                            </Discount>\n+                          )}\n+                        </div>\n+                      </div>\n+\n+                      <div\n+                        style={{\n+                          background: \"\",\n+                          textAlign: \"center\",\n+                          padding: \"5px\",\n+                        }}\n+                      >\n+                        <MAddtocartButton\n+                          main={product.discount > 0}\n+                          width=\"auto\"\n+                          onClick={() => dispatch(addToCartAPI(product))}\n+                        >\n+                          {t(\"Add To Cart\")}\n+                        </MAddtocartButton>\n+                      </div>\n+                    </BoxContainer>\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+\n+              {selectedProduct && showDetails && selectedProduct && <></>}\n+            </div>\n+          }\n+\n+          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n+        </React.Fragment>\n+      ) : (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={styles.container}>\n+              {filteredProducts.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    {selectedProduct === product && (\n+                      <div\n+                        style={{\n+                          padding: \"20px\",\n+                          margin: \"0 auto\",\n+                          marginTop: \"0px\",\n+                          Width: \"40%\",\n+                          maxHeight: \"100vh\",\n+                          border: \"1px solid green\",\n+                          borderRadius: \"20px\",\n+                          // background:'red',\n+                          boxShadow: \"10px 0px 50px 0px pink\",\n+                        }}\n+                      >\n+                        <div style={{ display: \"flex\" }}>\n+                          <div style={{ background: \"\", width: \"400px\" }}>\n+                            {selectedProduct.images &&\n+                            selectedProduct.images.length > 0 ? (\n+                              <Slider {...style.sliderSettings}>\n+                                {selectedProduct.images.map((imgUrl, index) => (\n+                                  <div key={index}>\n+                                    <img\n+                                      src={imgUrl}\n+                                      alt={`${selectedProduct.title} - Image ${\n+                                        index + 1\n+                                      }`}\n+                                      style={{\n+                                        width: \"400px\",\n+                                        height: \"450px\",\n+                                        borderRadius: \"8px\",\n+                                      }}\n+                                    />\n+                                  </div>\n+                                ))}\n+                              </Slider>\n+                            ) : (\n+                              <p>No images available</p>\n+                            )}\n+                          </div>\n+                          <div>{SelectedProduct}</div>\n+                          <div\n+                            style={{\n+                              background: \"#4ECDC4\",\n+                              width: \"500px\",\n+                              marginLeft: \"30px\",\n+                            }}\n+                          >\n+                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n+                              <CloseButton\n+                                style={{\n+                                  position: \"relative\",\n+                                  left: \"420px\",\n+                                  top: \"-40px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"0px 14px 10px 10px\",\n+                                  width: \"80px\",\n+                                  border: \"1px solid red\",\n+                                  cursor: \"pointer\",\n+                                  fontWeight: \"bold\",\n+                                  fontSize: \"30px\",\n+                                  color: \"red\",\n+                                }}\n+                                onClick={() => hanldleProductHid()}\n+                              >\n+                                {t(\"close\")}\n+                              </CloseButton>\n+                              <h4>\n+                                {\" \"}\n+                                <Link\n+                                  to={`/productsByOwner/${selectedProduct.owner}`}\n+                                >\n+                                  <h4> {selectedProduct.owner}</h4>\n+                                </Link>\n+                              </h4>\n+                              <h1>{selectedProduct.name}</h1>\n+                              <p>{selectedProduct.description}</p>\n+                              <p>\n+                                <strong>Price:</strong> {selectedProduct.price}\n+                              </p>\n+                            </div>\n+                            <div style={style.buttonsContainer}>\n+                              <div>\n+                                <button\n+                                  style={style.buttons}\n+                                  onClick={() =>\n+                                    dispatch(\n+                                      addToCartBeforeLogin(selectedProduct)\n+                                    )\n+                                  }\n+                                >\n+                                  Add To Cart\n+                                </button>\n+                              </div>\n+                              <div>\n+                                <button\n+                                  style={{ ...style.buttons }}\n+                                  onClick={() => dispatch(selectedProduct)}\n+                                >\n+                                  [add To WishList]\n+                                </button>\n+                              </div>\n+                            </div>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    )}\n+                    {product !== selectedProduct && (\n+                      <BoxContainer\n+                        key={index}\n+                        categoryOption={categoryShadow[product.category]}\n+                      >\n+                        <div\n+                          key={index}\n+                          style={{\n+                            ...styles.box,\n+\n+                            // justifyContent:\n+                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                          }}\n+                        >\n+                          {product.images.length > 0 ? (\n+                            <img\n+                              src={product.images[0]} // Display first image only\n+                              alt={product.name}\n+                              style={{\n+                                width: \"250px\",\n+                                height: \"250px\",\n+                                objectFit: \"cover\",\n+                                borderRadius: \"10px\",\n+                                cursor: \"pointer\",\n+                              }}\n+                              onClick={() => {\n+                                setSelectedProduct(product);\n+\n+                                show();\n+                              }}\n+                            />\n+                          ) : (\n+                            <p>{t(\"No Image Available\")}</p>\n+                          )}\n+                        </div>\n+\n+                        {/* text */}\n+                        <div style={{ display: \"flex\" }}>\n+                          <div\n+                            className=\"text\"\n+                            style={{\n+                              borderRadius: \"10PX\",\n+                              width: \"100%\",\n+                              height: \"100px\",\n+                              //  background:\"red\",\n+                              padding: \"10px\",\n+                            }}\n+                          >\n+                            <Name className=\"name\">\n+                              <span\n+                                style={{ color: \"black\" }}\n+                                dangerouslySetInnerHTML={{\n+                                  __html: highlightText(\n+                                    product.name,\n+                                    searchTerm\n+                                  ),\n+                                }}\n+                              ></span>{\" \"}\n+                            </Name>\n+                            <DescriptionContainer>\n+                              <DescriptionTitle>\n+                                {t(\"Description\")}:\n+                                <DescriptionContent>\n+                                  {product.description}\n+                                </DescriptionContent>\n+                              </DescriptionTitle>\n+                            </DescriptionContainer>\n+                            <StatusContainer>\n+                              <StatusTitle>\n+                                {t(\"Status\")}:\n+                                <StatusContent>{product.status}</StatusContent>\n+                              </StatusTitle>\n+                            </StatusContainer>\n+                            <Price key={index}>\n+                              {t(\"CFA\")}: {product.price - product.discount}\n+                            </Price>\n+                            {product.discount > 0 && (\n+                              <Discount key={index}>\n+                                {t(\"CFA\")}:<s>{product.price}</s>\n+                                <label\n+                                  style={{\n+                                    width: \"40px\",\n+                                    height: \"20px\",\n+                                    background: \"#90EE90\",\n+                                    textAlign: \"center\",\n+                                    borderRadius: \"5px\",\n+                                    marginLeft: \"15px\",\n+                                  }}\n+                                >\n+                                  -\n+                                  {(\n+                                    (product.discount / product.price) *\n+                                    100\n+                                  ).toFixed(0)}\n+                                  %\n+                                </label>\n+                              </Discount>\n+                            )}\n+                          </div>\n+\n+                          {/* like and wishlist */}\n+                          <div style={{ background: \"\" }}>\n+                            <div>{/* Product Display */}</div>\n+                            <div>\n+                              <button\n+                                style={{\n+                                  background: \"transparent\",\n+                                  border: \"0px solid orange\",\n+                                  color: \"orange\",\n+                                  padding: \"0px 0px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"10px 10px 10px 10px \",\n+                                  cursor: \"pointer\",\n+                                  fontSize: \"40px\",\n+                                  transition: \"all 0.3s ease\",\n+                                  marginRight: \"auto\",\n+                                  width: \"35px\",\n+                                }}\n+                                onClick={() =>\n+                                  dispatch(addToCartBeforeLogin(product))\n+                                }\n+                              >\n+                                +\n+                              </button>\n+                            </div>\n+                          </div>\n+                        </div>\n+\n+                        <div\n+                          style={{\n+                            background: \"\",\n+                            textAlign: \"center\",\n+                            padding: \"5px\",\n+                          }}\n+                        >\n+                          <AddtocartButton\n+                            main={product.discount > 0}\n+                            onClick={() => dispatch(addToCartAPI(product))}\n+                          >\n+                            {t(\"Add To Cart\")}\n+                          </AddtocartButton>\n+                        </div>\n+                      </BoxContainer>\n+                    )}\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+            </div>\n+          }\n+        </React.Fragment>\n+      )}\n+    </>\n+  );\n+};\n+const style = {\n+  sliderSettings: {\n+    dots: true, // Show navigation dots\n+    infinite: true, // Enable infinite looping\n+    speed: 100, // Transition speed (ms)\n+    slidesToShow: 1, // Show one image at a time\n+    slidesToScroll: 1, // Scroll one image per action\n+    autoplay: true,\n+    autoplaySpeed: 3000, // Autoplay speed (ms)\n+  },\n+  buttonsContainer: {\n+    display: \"flex\",\n+  },\n+  buttons: {\n+    color: \"orangered\",\n+    background: \"none\",\n+    border: \"2px solid orangered\",\n+    margin: \"10px\",\n+    borderRadius: \"10px\",\n+    before: \"+\",\n+  },\n+};\n+\n+export default CategoryPage;\n"
                },
                {
                    "date": 1743024573899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.bran === categoryName\n+        (product) => product.brand === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n@@ -745,752 +745,4 @@\n   },\n };\n \n export default CategoryPage;\n-import React, { useEffect, useState, useRef } from \"react\";\n-import \"./products.css\";\n-import { AuthContext } from \"../../AuthContext\";\n-import { useContext } from \"react\";\n-import { useSelector, useDispatch } from \"react-redux\";\n-import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n-import { addToWishListAPI } from \"../../wishlistAction\";\n-import styled, { keyframes } from \"styled-components\";\n-import { useTranslation } from \"react-i18next\";\n-import Slider from \"react-slick\";\n-import { useNavigate, useParams, Link } from \"react-router-dom\";\n-\n-import { addToCart, removeFromCart } from \"../../cartSlice\";\n-import e from \"cors\";\n-\n-const categoryOptions = {\n-  1: \"0px 0px 10px 1px red\",\n-  2: \"0px 0px 10px 1px yellow\",\n-  3: \"0px 0px 10px 1px orange\",\n-  4: \"0px 0px 10px 1px blue\",\n-  5: \"0px 0px 10px 1px black\",\n-  6: \"0px 0px 10px 1px violet\",\n-};\n-const categoryShadow = {\n-  farm: 1,\n-  computer: 2,\n-  Clothing: 3,\n-  accesseries: 4,\n-  other: 5,\n-};\n-const CloseButton = styled.button`\n-&:hover{\n-transform: scale(1.1);\n-`;\n-\n-const BoxContainer = styled.div`\n-  border: px solid red;\n-  border-radius: 12px;\n-  box-shadow: ${(props) => categoryOptions[props.categoryOption]};\n-\n-  &:hover {\n-    transform: scale(1.1);\n-  }\n-`;\n-const AddtocartButton = styled.button`\n-background:none;\n-border: 1px solid RED;\n-color: red;\n-padding: 10px 20px;\n-border-radius: 15px;\n-cursor: pointer;\n-font-size: 100%,\n-transition: all 0.3s ease;\n-width: 90%;\n-margin-top:${(props) => (props.main ? \"40px\" : \"10px\")};\n-\n-\n-&:hover{\n-transform: scale(1.1);\n-border:1px solid green;\n-color:green;\n-\n-}\n-`;\n-const MAddtocartButton = styled.button`\n-background:none;\n-border: 1px solid RED;\n-color: red;\n-padding: 10px 20px;\n-border-radius: 15px;\n-cursor: pointer;\n-font-size: 100%,\n-transition: all 0.3s ease;\n-width:auto;\n-margin-top:${(props) => (props.main ? \"5px\" : \"-60px\")};\n-\n-\n-&:hover{\n-transform: scale(1.1);\n-border:1px solid green;\n-color:green;\n-\n-}\n-`;\n-const Name = styled.a`\n-  font-size: ${({ fontSize }) => fontSize || \"20px\"};\n-`;\n-const DescriptionContainer = styled.label`\n-  font-size: 10px;\n-`;\n-\n-const DescriptionTitle = styled.h6`\n-  font-size: 13px;\n-`;\n-const DescriptionContent = styled.a`\n-  font-size: 13px;\n-`;\n-const Price = styled.h4`\n-  font-size: 16px;\n-`;\n-const Discount = styled.h3`\n-  font-size: 13px;\n-`;\n-const StatusContainer = styled.label`\n-  font-size: 13px;\n-`;\n-const StatusTitle = styled.h6`\n-  font-size: 13px;\n-`;\n-const StatusContent = styled.a`\n-  font-size: 13px;\n-`;\n-\n-const CategoryPage = ({\n-  api,\n-  loading,\n-  add,\n-  images,\n-\n-  SelectedProduct,\n-  addToCart,\n-  addToWishList,\n-  handleShowAlert,\n-  showAlert,\n-  mobilefilteredProducts,\n-  searchTerm,\n-  highlightText,\n-  filteredProducts,\n-\n-  selectedCategory,\n-  Fortop,\n-}) => {\n-  const [currentIndex, setCurrentIndex] = useState(0);\n-  const [products, setProducts] = useState([]);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const [selectedProduct, setSelectedProduct] = useState(null);\n-  const [selectedDProduct, setDSelectedProduct] = useState(null);\n-  const [selected, setSelected] = useState(false);\n-  const userId = localStorage.getItem(\"userId\");\n-  const [showDetails, setShowDetails] = useState(true);\n-  const username = localStorage.getItem(\"username\");\n-  const previewRef = useRef(null);\n-  const { brandName } = useParams();\n-  const buttonRef = useRef(null);\n-  const navigate = useNavigate();\n-  const { t } = useTranslation();\n-  const dispatch = useDispatch(); // Function to check screen size\n-\n-  // Function to check screen size\n-  const handleResize = () => {\n-    setIsMobile(window.innerWidth <= 1000);\n-  };\n-\n-  useEffect(() => {\n-    handleResize(); // Initial check\n-    window.addEventListener(\"resize\", handleResize); // Update on resize\n-    return () => window.removeEventListener(\"resize\", handleResize);\n-  }, []);\n-\n-\n-  const handleProductClick = (product) => {\n-    SelectedProduct(product);\n-    localStorage.setItem(\"selectedProduct\", product);\n-    navigate(\"/selectedProduct\");\n-  };\n-\n-  const hanldleProductHid = () => {\n-    setSelectedProduct(null);\n-  };\n-  const nextImage = () => {\n-    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n-  };\n-\n-  // Toggle the selection state of a product\n-  const toggleSelection = (id, currentSelection) => {\n-    // Update the product on the server using PATCH\n-    fetch(`${api}/updateProducts/${id}`, {\n-      method: \"PATCH\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify({ isSelected: !currentSelection }),\n-    })\n-      .then((response) => response.json())\n-      .then((updatedProduct) => {\n-        // Update the local state to reflect the change\n-        setProducts((prevProducts) =>\n-          prevProducts.map((product) =>\n-            product.id === id ? updatedProduct : product\n-          )\n-        );\n-      })\n-      .catch((error) => console.error(\"Error updating product:\", error));\n-  };\n-\n-  // Fetch all products\n-  useEffect(() => {\n-    const fetchProducts = async () => {\n-      const response = await fetch(`${api}/products`);\n-      const data = await response.json();\n-      const filteredCategory = data.filter(\n-        (product) => produc === categoryName\n-      );\n-      setProducts(data);\n-      setProducts(filteredCategory);\n-    };\n-    fetchProducts();\n-  }, [api]);\n-\n-  // // Toggle like/dislike with one button\n-  // const toggleLike = async (product) => {\n-  //   if (!product) return;\n-\n-  //   const liked = product.likedBy.some((user) => user.userId === userId);\n-  //   const endpoint = liked ? \"dislike\" : \"like\";\n-\n-  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n-  //     method: \"PATCH\",\n-  //     headers: { \"Content-Type\": \"application/json\" },\n-  //     body: JSON.stringify({ userId, username }), // Send user info\n-  //   });\n-\n-  //   const updatedProduct = await response.json();\n-\n-  //   // Update state\n-  //   setProducts(\n-  //     products.map((p) =>\n-  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n-  //     )\n-  //   );\n-  //   setSelectedProduct({ ...product, ...updatedProduct });\n-  // };\n-  // ////////////////////////////////////////////////////////\n-\n-  const handleMouseEnter = () => {\n-    if (buttonRef.current) {\n-      buttonRef.current.click();\n-    }\n-  };\n-\n-  // ///////////////////////////////////////////////////////////\n-\n-  const show = (event) => {\n-    setShowDetails((prevShow) => !prevShow);\n-    if (previewRef.current && !previewRef.current.contains(event.target)) {\n-    }\n-  };\n-\n-  // useEffect(() => {\n-  //   // Attach event listener to the whole document\n-  //   document.addEventListener(\"mousedown\", show);\n-  //   return () => {\n-  //     document.removeEventListener(\"mousedown\", show);\n-  //   };\n-  // }, []);\n-  const styles = {\n-    container: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"20px\",\n-      background: \"white\",\n-      maxWidth: \"96%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"20px\",\n-      marginTop: \"50px\",\n-    },\n-    box: {\n-      width: \"250px\",\n-      height: \"250px\",\n-    },\n-\n-    lastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  const mstyles = {\n-    Mcontainer: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"10px\",\n-      background: \"white\",\n-      maxWidth: \"100%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"0px\",\n-      marginTop: \"200px\",\n-    },\n-    mbox: {\n-      width: \"100px\",\n-      height: \"150px\",\n-    },\n-\n-    mlastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  return (\n-    <>\n-      {isMobile ? (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {products.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    <BoxContainer\n-                      key={index}\n-                      categoryOption={categoryShadow[product.category]}\n-                    >\n-                      <div\n-                        key={index}\n-                        style={{\n-                          ...mstyles.mbox,\n-\n-                          // justifyContent:\n-                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                        }}\n-                      >\n-                        {product.images.length > 0 ? (\n-                          <img\n-                            src={product.images[0]} // Display first image only\n-                            alt={product.name}\n-                            style={{\n-                              width: \"135px\",\n-                              height: \"150px\",\n-                              objectFit: \"cover\",\n-                              borderRadius: \"10px\",\n-                              cursor: \"pointer\",\n-                            }}\n-                            onClick={() => {\n-                              setSelectedProduct(product);\n-                              handleProductClick(product);\n-                              show();\n-                            }}\n-                          />\n-                        ) : (\n-                          <p>{t(\"No Image Available\")}</p>\n-                        )}\n-                        <button\n-                          style={{\n-                            position: \"relative\",\n-                            left: \"105px\",\n-                            top: \"-15px\",\n-                            background: \"none\",\n-                            border: \"none\",\n-                            fontSize: \"35px\",\n-                            color: \"orange\",\n-                          }}\n-                        >\n-                          +\n-                        </button>\n-                      </div>\n-\n-                      {/* text */}\n-                      <div style={{ display: \"flex\" }}>\n-                        <div\n-                          className=\"text\"\n-                          style={{\n-                            borderRadius: \"10PX\",\n-                            width: \"100%\",\n-                            height: \"100px\",\n-                            // background:\"red\",\n-                            padding: \"10px\",\n-                          }}\n-                        >\n-                          <Name className=\"name\" fontSize=\"17px\">\n-                            <span\n-                              style={{ color: \"black\" }}\n-                              dangerouslySetInnerHTML={{\n-                                __html: highlightText(product.name, searchTerm),\n-                              }}\n-                            ></span>{\" \"}\n-                          </Name>\n-\n-                          {/* <DescriptionContainer>\n-                         <DescriptionTitle>\n-                           {t(\"Description\")}:\n-                           <DescriptionContent>\n-                             {product.description}\n-                           </DescriptionContent>\n-                         </DescriptionTitle>\n-                       </DescriptionContainer> */}\n-                          <StatusContainer>\n-                            <StatusTitle>\n-                              {t(\"Status\")}:\n-                              <StatusContent>{product.status}</StatusContent>\n-                            </StatusTitle>\n-                          </StatusContainer>\n-                          <Price key={index}>\n-                            {t(\"CFA\")}: {product.price - product.discount}\n-                          </Price>\n-                          {product.discount > 0 && (\n-                            <Discount key={index}>\n-                              {t(\"CFA\")}:<s>{product.price}</s>\n-                              <label\n-                                style={{\n-                                  width: \"40px\",\n-                                  height: \"20px\",\n-                                  background: \"#90EE90\",\n-                                  textAlign: \"center\",\n-                                  borderRadius: \"5px\",\n-                                  marginLeft: \"15px\",\n-                                }}\n-                              >\n-                                -\n-                                {(\n-                                  (product.discount / product.price) *\n-                                  100\n-                                ).toFixed(0)}\n-                                %\n-                              </label>\n-                            </Discount>\n-                          )}\n-                        </div>\n-                      </div>\n-\n-                      <div\n-                        style={{\n-                          background: \"\",\n-                          textAlign: \"center\",\n-                          padding: \"5px\",\n-                        }}\n-                      >\n-                        <MAddtocartButton\n-                          main={product.discount > 0}\n-                          width=\"auto\"\n-                          onClick={() => dispatch(addToCartAPI(product))}\n-                        >\n-                          {t(\"Add To Cart\")}\n-                        </MAddtocartButton>\n-                      </div>\n-                    </BoxContainer>\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-\n-              {selectedProduct && showDetails && selectedProduct && <></>}\n-            </div>\n-          }\n-\n-          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n-        </React.Fragment>\n-      ) : (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={styles.container}>\n-              {filteredProducts.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    {selectedProduct === product && (\n-                      <div\n-                        style={{\n-                          padding: \"20px\",\n-                          margin: \"0 auto\",\n-                          marginTop: \"0px\",\n-                          Width: \"40%\",\n-                          maxHeight: \"100vh\",\n-                          border: \"1px solid green\",\n-                          borderRadius: \"20px\",\n-                          // background:'red',\n-                          boxShadow: \"10px 0px 50px 0px pink\",\n-                        }}\n-                      >\n-                        <div style={{ display: \"flex\" }}>\n-                          <div style={{ background: \"\", width: \"400px\" }}>\n-                            {selectedProduct.images &&\n-                            selectedProduct.images.length > 0 ? (\n-                              <Slider {...style.sliderSettings}>\n-                                {selectedProduct.images.map((imgUrl, index) => (\n-                                  <div key={index}>\n-                                    <img\n-                                      src={imgUrl}\n-                                      alt={`${selectedProduct.title} - Image ${\n-                                        index + 1\n-                                      }`}\n-                                      style={{\n-                                        width: \"400px\",\n-                                        height: \"450px\",\n-                                        borderRadius: \"8px\",\n-                                      }}\n-                                    />\n-                                  </div>\n-                                ))}\n-                              </Slider>\n-                            ) : (\n-                              <p>No images available</p>\n-                            )}\n-                          </div>\n-                          <div>{SelectedProduct}</div>\n-                          <div\n-                            style={{\n-                              background: \"#4ECDC4\",\n-                              width: \"500px\",\n-                              marginLeft: \"30px\",\n-                            }}\n-                          >\n-                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n-                              <CloseButton\n-                                style={{\n-                                  position: \"relative\",\n-                                  left: \"420px\",\n-                                  top: \"-40px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"0px 14px 10px 10px\",\n-                                  width: \"80px\",\n-                                  border: \"1px solid red\",\n-                                  cursor: \"pointer\",\n-                                  fontWeight: \"bold\",\n-                                  fontSize: \"30px\",\n-                                  color: \"red\",\n-                                }}\n-                                onClick={() => hanldleProductHid()}\n-                              >\n-                                {t(\"close\")}\n-                              </CloseButton>\n-                              <h4>\n-                                {\" \"}\n-                                <Link\n-                                  to={`/productsByOwner/${selectedProduct.owner}`}\n-                                >\n-                                  <h4> {selectedProduct.owner}</h4>\n-                                </Link>\n-                              </h4>\n-                              <h1>{selectedProduct.name}</h1>\n-                              <p>{selectedProduct.description}</p>\n-                              <p>\n-                                <strong>Price:</strong> {selectedProduct.price}\n-                              </p>\n-                            </div>\n-                            <div style={style.buttonsContainer}>\n-                              <div>\n-                                <button\n-                                  style={style.buttons}\n-                                  onClick={() =>\n-                                    dispatch(\n-                                      addToCartBeforeLogin(selectedProduct)\n-                                    )\n-                                  }\n-                                >\n-                                  Add To Cart\n-                                </button>\n-                              </div>\n-                              <div>\n-                                <button\n-                                  style={{ ...style.buttons }}\n-                                  onClick={() => dispatch(selectedProduct)}\n-                                >\n-                                  [add To WishList]\n-                                </button>\n-                              </div>\n-                            </div>\n-                          </div>\n-                        </div>\n-                      </div>\n-                    )}\n-                    {product !== selectedProduct && (\n-                      <BoxContainer\n-                        key={index}\n-                        categoryOption={categoryShadow[product.category]}\n-                      >\n-                        <div\n-                          key={index}\n-                          style={{\n-                            ...styles.box,\n-\n-                            // justifyContent:\n-                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                          }}\n-                        >\n-                          {product.images.length > 0 ? (\n-                            <img\n-                              src={product.images[0]} // Display first image only\n-                              alt={product.name}\n-                              style={{\n-                                width: \"250px\",\n-                                height: \"250px\",\n-                                objectFit: \"cover\",\n-                                borderRadius: \"10px\",\n-                                cursor: \"pointer\",\n-                              }}\n-                              onClick={() => {\n-                                setSelectedProduct(product);\n-\n-                                show();\n-                              }}\n-                            />\n-                          ) : (\n-                            <p>{t(\"No Image Available\")}</p>\n-                          )}\n-                        </div>\n-\n-                        {/* text */}\n-                        <div style={{ display: \"flex\" }}>\n-                          <div\n-                            className=\"text\"\n-                            style={{\n-                              borderRadius: \"10PX\",\n-                              width: \"100%\",\n-                              height: \"100px\",\n-                              //  background:\"red\",\n-                              padding: \"10px\",\n-                            }}\n-                          >\n-                            <Name className=\"name\">\n-                              <span\n-                                style={{ color: \"black\" }}\n-                                dangerouslySetInnerHTML={{\n-                                  __html: highlightText(\n-                                    product.name,\n-                                    searchTerm\n-                                  ),\n-                                }}\n-                              ></span>{\" \"}\n-                            </Name>\n-                            <DescriptionContainer>\n-                              <DescriptionTitle>\n-                                {t(\"Description\")}:\n-                                <DescriptionContent>\n-                                  {product.description}\n-                                </DescriptionContent>\n-                              </DescriptionTitle>\n-                            </DescriptionContainer>\n-                            <StatusContainer>\n-                              <StatusTitle>\n-                                {t(\"Status\")}:\n-                                <StatusContent>{product.status}</StatusContent>\n-                              </StatusTitle>\n-                            </StatusContainer>\n-                            <Price key={index}>\n-                              {t(\"CFA\")}: {product.price - product.discount}\n-                            </Price>\n-                            {product.discount > 0 && (\n-                              <Discount key={index}>\n-                                {t(\"CFA\")}:<s>{product.price}</s>\n-                                <label\n-                                  style={{\n-                                    width: \"40px\",\n-                                    height: \"20px\",\n-                                    background: \"#90EE90\",\n-                                    textAlign: \"center\",\n-                                    borderRadius: \"5px\",\n-                                    marginLeft: \"15px\",\n-                                  }}\n-                                >\n-                                  -\n-                                  {(\n-                                    (product.discount / product.price) *\n-                                    100\n-                                  ).toFixed(0)}\n-                                  %\n-                                </label>\n-                              </Discount>\n-                            )}\n-                          </div>\n-\n-                          {/* like and wishlist */}\n-                          <div style={{ background: \"\" }}>\n-                            <div>{/* Product Display */}</div>\n-                            <div>\n-                              <button\n-                                style={{\n-                                  background: \"transparent\",\n-                                  border: \"0px solid orange\",\n-                                  color: \"orange\",\n-                                  padding: \"0px 0px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"10px 10px 10px 10px \",\n-                                  cursor: \"pointer\",\n-                                  fontSize: \"40px\",\n-                                  transition: \"all 0.3s ease\",\n-                                  marginRight: \"auto\",\n-                                  width: \"35px\",\n-                                }}\n-                                onClick={() =>\n-                                  dispatch(addToCartBeforeLogin(product))\n-                                }\n-                              >\n-                                +\n-                              </button>\n-                            </div>\n-                          </div>\n-                        </div>\n-\n-                        <div\n-                          style={{\n-                            background: \"\",\n-                            textAlign: \"center\",\n-                            padding: \"5px\",\n-                          }}\n-                        >\n-                          <AddtocartButton\n-                            main={product.discount > 0}\n-                            onClick={() => dispatch(addToCartAPI(product))}\n-                          >\n-                            {t(\"Add To Cart\")}\n-                          </AddtocartButton>\n-                        </div>\n-                      </BoxContainer>\n-                    )}\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-            </div>\n-          }\n-        </React.Fragment>\n-      )}\n-    </>\n-  );\n-};\n-const style = {\n-  sliderSettings: {\n-    dots: true, // Show navigation dots\n-    infinite: true, // Enable infinite looping\n-    speed: 100, // Transition speed (ms)\n-    slidesToShow: 1, // Show one image at a time\n-    slidesToScroll: 1, // Scroll one image per action\n-    autoplay: true,\n-    autoplaySpeed: 3000, // Autoplay speed (ms)\n-  },\n-  buttonsContainer: {\n-    display: \"flex\",\n-  },\n-  buttons: {\n-    color: \"orangered\",\n-    background: \"none\",\n-    border: \"2px solid orangered\",\n-    margin: \"10px\",\n-    borderRadius: \"10px\",\n-    before: \"+\",\n-  },\n-};\n-\n-export default CategoryPage;\n"
                },
                {
                    "date": 1743024585977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand === categoryName\n+        (product) => product.brand.name === categorName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743024594064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.name === categorName\n+        (product) => product.brand.name === brandName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743024600987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filteredCategory = data.filter(\n+      const filtered = data.filter(\n         (product) => product.brand.name === brandName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n"
                },
                {
                    "date": 1743024612324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,13 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filtered = data.filter(\n+      const filteredBrand = data.filter(\n         (product) => product.brand.name === brandName\n       );\n       setProducts(data);\n-      setProducts(filteredCategory);\n+      setProducts(filteredBrand);\n     };\n     fetchProducts();\n   }, [api]);\n \n"
                },
                {
                    "date": 1743024911997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n const StatusContent = styled.a`\n   font-size: 13px;\n `;\n \n-const CategoryPage = ({\n+const Page = ({\n   api,\n   loading,\n   add,\n   images,\n@@ -744,5 +744,5 @@\n     before: \"+\",\n   },\n };\n \n-export default CategoryPage;\n+export default Page;\n"
                },
                {
                    "date": 1743025084606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n const StatusContent = styled.a`\n   font-size: 13px;\n `;\n \n-const Page = ({\n+const CategoryPage = ({\n   api,\n   loading,\n   add,\n   images,\n@@ -201,9 +201,9 @@\n       const filteredBrand = data.filter(\n         (product) => product.brand.name === brandName\n       );\n       setProducts(data);\n-      setProducts(filteredBrand);\n+      setProducts(filtered);\n     };\n     fetchProducts();\n   }, [api]);\n \n@@ -744,5 +744,5 @@\n     before: \"+\",\n   },\n };\n \n-export default Page;\n+export default CategoryPage;\n"
                },
                {
                    "date": 1743025089805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,13 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filteredBrand = data.filter(\n+      const filteredCategory = data.filter(\n         (product) => product.brand.name === brandName\n       );\n       setProducts(data);\n-      setProducts(filtered);\n+      setProducts(filteredCategory);\n     };\n     fetchProducts();\n   }, [api]);\n \n"
                },
                {
                    "date": 1743025113837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.name === brandName\n+        (product) => prod === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025121171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => prod === categoryName\n+        (product) => product === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025126710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product === categoryName\n+        (product) => product.brand === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025133333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand === categoryName\n+        (product) => product.brand.map(()) === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025139686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.map(()) === categoryName\n+        (product) => product.brand.map((brand)) === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025146656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.map((brand)) === categoryName\n+        (product) => product.brand.map((brand) => ) === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025155422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.map((brand) => ) === categoryName\n+        (product) => product.brand.map((brand) => bran) === categoryName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025170277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.map((brand) => bran) === categoryName\n+        (product) => product.brand.map((brand) => brand.name) === Name\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025177090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n       const filteredCategory = data.filter(\n-        (product) => product.brand.map((brand) => brand.name) === Name\n+        (product) => product.brand.map((brand) => brand.name) === brandName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n     };\n"
                },
                {
                    "date": 1743025195617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n const StatusContent = styled.a`\n   font-size: 13px;\n `;\n \n-const CategoryPage = ({\n+const Page = ({\n   api,\n   loading,\n   add,\n   images,\n@@ -744,5 +744,5 @@\n     before: \"+\",\n   },\n };\n \n-export default CategoryPage;\n+export default Page;\n"
                },
                {
                    "date": 1743025230525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n const StatusContent = styled.a`\n   font-size: 13px;\n `;\n \n-const Page = ({\n+const BrandPage = ({\n   api,\n   loading,\n   add,\n   images,\n@@ -197,9 +197,9 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filteredCategory = data.filter(\n+      const filtered = data.filter(\n         (product) => product.brand.map((brand) => brand.name) === brandName\n       );\n       setProducts(data);\n       setProducts(filteredCategory);\n@@ -744,5 +744,5 @@\n     before: \"+\",\n   },\n };\n \n-export default Page;\n+export default BrandPage;\n"
                },
                {
                    "date": 1743025236944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,13 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filtered = data.filter(\n+      const filteredBrands = data.filter(\n         (product) => product.brand.map((brand) => brand.name) === brandName\n       );\n       setProducts(data);\n-      setProducts(filteredCategory);\n+      setProducts(filtered);\n     };\n     fetchProducts();\n   }, [api]);\n \n"
                },
                {
                    "date": 1743025435534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,11 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filteredBrands = data.filter(\n-        (product) => product.brand.map((brand) => brand.name) === brandName\n-      );\n+    \n       setProducts(data);\n-      setProducts(filtered);\n+      setProducts(filteredBrands);\n     };\n     fetchProducts();\n   }, [api]);\n \n"
                },
                {
                    "date": 1743025462802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,11 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-    \n+    const filteredBrands = data.filter((product) => \n+  product.brand.some((brand) => brand.name === brandName)\n+);\n       setProducts(data);\n       setProducts(filteredBrands);\n     };\n     fetchProducts();\n"
                },
                {
                    "date": 1743025468575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,11 +197,11 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-    const filteredBrands = data.filter((product) => \n-  product.brand.some((brand) => brand.name === brandName)\n-);\n+      const filteredBrands = data.filter(\n+        (product) => product.brand.map((brand) => brand.name) === brandName\n+      );\n       setProducts(data);\n       setProducts(filteredBrands);\n     };\n     fetchProducts();\n"
                },
                {
                    "date": 1743025535669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,11 +197,9 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-      const filteredBrands = data.filter(\n-        (product) => product.brand.map((brand) => brand.name) === brandName\n-      );\n+    \n       setProducts(data);\n       setProducts(filteredBrands);\n     };\n     fetchProducts();\n"
                },
                {
                    "date": 1743025552874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,11 @@\n   useEffect(() => {\n     const fetchProducts = async () => {\n       const response = await fetch(`${api}/products`);\n       const data = await response.json();\n-    \n+      const filteredBrands = data.filter((product) => \n+        product.brand.some((brand) => brand.name === brandName)\n+      );\n       setProducts(data);\n       setProducts(filteredBrands);\n     };\n     fetchProducts();\n"
                },
                {
                    "date": 1743037045792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,40 +12,9 @@\n \n import { addToCart, removeFromCart } from \"../../cartSlice\";\n import e from \"cors\";\n \n-const categoryOptions = {\n-  1: \"0px 0px 10px 1px red\",\n-  2: \"0px 0px 10px 1px yellow\",\n-  3: \"0px 0px 10px 1px orange\",\n-  4: \"0px 0px 10px 1px blue\",\n-  5: \"0px 0px 10px 1px black\",\n-  6: \"0px 0px 10px 1px violet\",\n-};\n-const categoryShadow = {\n-  farm: 1,\n-  computer: 2,\n-  Clothing: 3,\n-  accesseries: 4,\n-  other: 5,\n-};\n-const CloseButton = styled.button`\n-&:hover{\n-transform: scale(1.1);\n-`;\n-\n-const BoxContainer = styled.div`\n-  border: px solid red;\n-  border-radius: 12px;\n-  box-shadow: ${(props) => categoryOptions[props.categoryOption]};\n-\n-  &:hover {\n-    transform: scale(1.1);\n-  }\n-`;\n-const AddtocartButton = styled.button`\n-background:none;\n-border: 1px solid RED;\n+c\n color: red;\n padding: 10px 20px;\n border-radius: 15px;\n cursor: pointer;\n"
                },
                {
                    "date": 1743037051747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,26 +12,9 @@\n \n import { addToCart, removeFromCart } from \"../../cartSlice\";\n import e from \"cors\";\n \n-c\n-color: red;\n-padding: 10px 20px;\n-border-radius: 15px;\n-cursor: pointer;\n-font-size: 100%,\n-transition: all 0.3s ease;\n-width: 90%;\n-margin-top:${(props) => (props.main ? \"40px\" : \"10px\")};\n \n-\n-&:hover{\n-transform: scale(1.1);\n-border:1px solid green;\n-color:green;\n-\n-}\n-`;\n const MAddtocartButton = styled.button`\n background:none;\n border: 1px solid RED;\n color: red;\n"
                },
                {
                    "date": 1743037084314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,27 @@\n import styled, { keyframes } from \"styled-components\";\n import { useTranslation } from \"react-i18next\";\n import Slider from \"react-slick\";\n import { useNavigate, useParams, Link } from \"react-router-dom\";\n-\n+import {\n+  BoxContainer,\n+  AddtocartButton,\n+  MAddtocartButton,\n+  MAddToWishList,\n+  Price,\n+  Discount,\n+  DescriptionContainer,\n+  DescriptionTitle,\n+  DescriptionContent,\n+  StatusContainer,\n+  StatusContent,\n+  StatusTitle,\n+  CloseButton,\n+  Name,\n+  positions,\n+  fontSizes,\n+  categoryShadow,\n+} from \"./styledComponents\";\n import { addToCart, removeFromCart } from \"../../cartSlice\";\n import e from \"cors\";\n \n \n"
                },
                {
                    "date": 1743037097238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n import styled, { keyframes } from \"styled-components\";\n import { useTranslation } from \"react-i18next\";\n import Slider from \"react-slick\";\n import { useNavigate, useParams, Link } from \"react-router-dom\";\n+import \"../translations/i18n\";\n+\n import {\n   BoxContainer,\n   AddtocartButton,\n   MAddtocartButton,\n"
                },
                {
                    "date": 1743037148430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n import { useTranslation } from \"react-i18next\";\n import Slider from \"react-slick\";\n import { useNavigate, useParams, Link } from \"react-router-dom\";\n import \"../translations/i18n\";\n-\n import {\n   BoxContainer,\n   AddtocartButton,\n   MAddtocartButton,\n@@ -33,57 +32,8 @@\n import { addToCart, removeFromCart } from \"../../cartSlice\";\n import e from \"cors\";\n \n \n-const MAddtocartButton = styled.button`\n-background:none;\n-border: 1px solid RED;\n-color: red;\n-padding: 10px 20px;\n-border-radius: 15px;\n-cursor: pointer;\n-font-size: 100%,\n-transition: all 0.3s ease;\n-width:auto;\n-margin-top:${(props) => (props.main ? \"5px\" : \"-60px\")};\n-\n-\n-&:hover{\n-transform: scale(1.1);\n-border:1px solid green;\n-color:green;\n-\n-}\n-`;\n-const Name = styled.a`\n-  font-size: ${({ fontSize }) => fontSize || \"20px\"};\n-`;\n-const DescriptionContainer = styled.label`\n-  font-size: 10px;\n-`;\n-\n-const DescriptionTitle = styled.h6`\n-  font-size: 13px;\n-`;\n-const DescriptionContent = styled.a`\n-  font-size: 13px;\n-`;\n-const Price = styled.h4`\n-  font-size: 16px;\n-`;\n-const Discount = styled.h3`\n-  font-size: 13px;\n-`;\n-const StatusContainer = styled.label`\n-  font-size: 13px;\n-`;\n-const StatusTitle = styled.h6`\n-  font-size: 13px;\n-`;\n-const StatusContent = styled.a`\n-  font-size: 13px;\n-`;\n-\n const BrandPage = ({\n   api,\n   loading,\n   add,\n"
                },
                {
                    "date": 1743037157874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,10 @@\n   const { brandName } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n   const { t } = useTranslation();\n+     const position = positions[i18n.language] || position.en;\n+      const fontSize = fontSizes[i18n.language] || fontSize.en;\n   const dispatch = useDispatch(); // Function to check screen size\n \n   // Function to check screen size\n   const handleResize = () => {\n"
                },
                {
                    "date": 1743037163214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   const previewRef = useRef(null);\n   const { brandName } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n-  const { t } = useTranslation();\n+  const { t,} = useTranslation();\n      const position = positions[i18n.language] || position.en;\n       const fontSize = fontSizes[i18n.language] || fontSize.en;\n   const dispatch = useDispatch(); // Function to check screen size\n \n"
                },
                {
                    "date": 1743037169289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   const previewRef = useRef(null);\n   const { brandName } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n-  const { t,} = useTranslation();\n+  const { t,i1} = useTranslation();\n      const position = positions[i18n.language] || position.en;\n       const fontSize = fontSizes[i18n.language] || fontSize.en;\n   const dispatch = useDispatch(); // Function to check screen size\n \n"
                },
                {
                    "date": 1743037191504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   const previewRef = useRef(null);\n   const { brandName } = useParams();\n   const buttonRef = useRef(null);\n   const navigate = useNavigate();\n-  const { t,i1} = useTranslation();\n+  const { t,i18n} = useTranslation();\n      const position = positions[i18n.language] || position.en;\n       const fontSize = fontSizes[i18n.language] || fontSize.en;\n   const dispatch = useDispatch(); // Function to check screen size\n \n@@ -271,17 +271,9 @@\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n                         <button\n-                          style={{\n-                            position: \"relative\",\n-                            left: \"105px\",\n-                            top: \"-15px\",\n-                            background: \"none\",\n-                            border: \"none\",\n-                            fontSize: \"35px\",\n-                            color: \"orange\",\n-                          }}\n+                        \n                         >\n                           +\n                         </button>\n                       </div>\n"
                },
                {
                    "date": 1743037210028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,13 +270,13 @@\n                           />\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n-                        <button\n+                        <\n                         \n                         >\n                           +\n-                        </button>\n+                        </>\n                       </div>\n \n                       {/* text */}\n                       <div style={{ display: \"flex\" }}>\n"
                },
                {
                    "date": 1743037218505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,13 +270,13 @@\n                           />\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n-                        <\n+                        <MAddToWishList\n                         \n                         >\n                           +\n-                        </>\n+                        </MAddToWishList>\n                       </div>\n \n                       {/* text */}\n                       <div style={{ display: \"flex\" }}>\n"
                },
                {
                    "date": 1743037225888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n                         <MAddToWishList\n-                        \n+                        pos\n                         >\n                           +\n                         </MAddToWishList>\n                       </div>\n"
                },
                {
                    "date": 1743037231602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n                         <MAddToWishList\n-                        pos\n+                        position={poi}\n                         >\n                           +\n                         </MAddToWishList>\n                       </div>\n"
                },
                {
                    "date": 1743037237902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                         ) : (\n                           <p>{t(\"No Image Available\")}</p>\n                         )}\n                         <MAddToWishList\n-                        position={poi}\n+                        position={position}\n                         >\n                           +\n                         </MAddToWishList>\n                       </div>\n"
                },
                {
                    "date": 1743037254666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,665 @@\n+import React, { useEffect, useState, useRef } from \"react\";\n+import \"./products.css\";\n+import { AuthContext } from \"../../AuthContext\";\n+import { useContext } from \"react\";\n+import { useSelector, useDispatch } from \"react-redux\";\n+import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n+import { addToWishListAPI } from \"../../wishlistAction\";\n+import styled, { keyframes } from \"styled-components\";\n+import { useTranslation } from \"react-i18next\";\n+import Slider from \"react-slick\";\n+import { useNavigate, useParams, Link } from \"react-router-dom\";\n+import \"../translations/i18n\";\n+import {\n+  BoxContainer,\n+  AddtocartButton,\n+  MAddtocartButton,\n+  MAddToWishList,\n+  Price,\n+  Discount,\n+  DescriptionContainer,\n+  DescriptionTitle,\n+  DescriptionContent,\n+  StatusContainer,\n+  StatusContent,\n+  StatusTitle,\n+  CloseButton,\n+  Name,\n+  positions,\n+  fontSizes,\n+  categoryShadow,\n+} from \"./styledComponents\";\n+import { addToCart, removeFromCart } from \"../../cartSlice\";\n+import e from \"cors\";\n+\n+\n+const BrandPage = ({\n+  api,\n+  loading,\n+  add,\n+  images,\n+\n+  SelectedProduct,\n+  addToCart,\n+  addToWishList,\n+  handleShowAlert,\n+  showAlert,\n+  mobilefilteredProducts,\n+  searchTerm,\n+  highlightText,\n+  filteredProducts,\n+\n+  selectedCategory,\n+  Fortop,\n+}) => {\n+  const [currentIndex, setCurrentIndex] = useState(0);\n+  const [products, setProducts] = useState([]);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const [selectedProduct, setSelectedProduct] = useState(null);\n+  const [selectedDProduct, setDSelectedProduct] = useState(null);\n+  const [selected, setSelected] = useState(false);\n+  const userId = localStorage.getItem(\"userId\");\n+  const [showDetails, setShowDetails] = useState(true);\n+  const username = localStorage.getItem(\"username\");\n+  const previewRef = useRef(null);\n+  const { brandName } = useParams();\n+  const buttonRef = useRef(null);\n+  const navigate = useNavigate();\n+  const { t,i18n} = useTranslation();\n+     const position = positions[i18n.language] || position.en;\n+      const fontSize = fontSizes[i18n.language] || fontSize.en;\n+  const dispatch = useDispatch(); // Function to check screen size\n+\n+  // Function to check screen size\n+  const handleResize = () => {\n+    setIsMobile(window.innerWidth <= 1000);\n+  };\n+\n+  useEffect(() => {\n+    handleResize(); // Initial check\n+    window.addEventListener(\"resize\", handleResize); // Update on resize\n+    return () => window.removeEventListener(\"resize\", handleResize);\n+  }, []);\n+\n+\n+  const handleProductClick = (product) => {\n+    SelectedProduct(product);\n+    localStorage.setItem(\"selectedProduct\", product);\n+    navigate(\"/selectedProduct\");\n+  };\n+\n+  const hanldleProductHid = () => {\n+    setSelectedProduct(null);\n+  };\n+  const nextImage = () => {\n+    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n+  };\n+\n+  // Toggle the selection state of a product\n+  const toggleSelection = (id, currentSelection) => {\n+    // Update the product on the server using PATCH\n+    fetch(`${api}/updateProducts/${id}`, {\n+      method: \"PATCH\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({ isSelected: !currentSelection }),\n+    })\n+      .then((response) => response.json())\n+      .then((updatedProduct) => {\n+        // Update the local state to reflect the change\n+        setProducts((prevProducts) =>\n+          prevProducts.map((product) =>\n+            product.id === id ? updatedProduct : product\n+          )\n+        );\n+      })\n+      .catch((error) => console.error(\"Error updating product:\", error));\n+  };\n+\n+  // Fetch all products\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      const response = await fetch(`${api}/products`);\n+      const data = await response.json();\n+      const filteredBrands = data.filter((product) => \n+        product.brand.some((brand) => brand.name === brandName)\n+      );\n+      setProducts(data);\n+      setProducts(filteredBrands);\n+    };\n+    fetchProducts();\n+  }, [api]);\n+\n+  // // Toggle like/dislike with one button\n+  // const toggleLike = async (product) => {\n+  //   if (!product) return;\n+\n+  //   const liked = product.likedBy.some((user) => user.userId === userId);\n+  //   const endpoint = liked ? \"dislike\" : \"like\";\n+\n+  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n+  //     method: \"PATCH\",\n+  //     headers: { \"Content-Type\": \"application/json\" },\n+  //     body: JSON.stringify({ userId, username }), // Send user info\n+  //   });\n+\n+  //   const updatedProduct = await response.json();\n+\n+  //   // Update state\n+  //   setProducts(\n+  //     products.map((p) =>\n+  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n+  //     )\n+  //   );\n+  //   setSelectedProduct({ ...product, ...updatedProduct });\n+  // };\n+  // ////////////////////////////////////////////////////////\n+\n+  const handleMouseEnter = () => {\n+    if (buttonRef.current) {\n+      buttonRef.current.click();\n+    }\n+  };\n+\n+  // ///////////////////////////////////////////////////////////\n+\n+  const show = (event) => {\n+    setShowDetails((prevShow) => !prevShow);\n+    if (previewRef.current && !previewRef.current.contains(event.target)) {\n+    }\n+  };\n+\n+  // useEffect(() => {\n+  //   // Attach event listener to the whole document\n+  //   document.addEventListener(\"mousedown\", show);\n+  //   return () => {\n+  //     document.removeEventListener(\"mousedown\", show);\n+  //   };\n+  // }, []);\n+  const styles = {\n+    container: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"20px\",\n+      background: \"white\",\n+      maxWidth: \"96%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"20px\",\n+      marginTop: \"50px\",\n+    },\n+    box: {\n+      width: \"250px\",\n+      height: \"250px\",\n+    },\n+\n+    lastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  const mstyles = {\n+    Mcontainer: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"10px\",\n+      background: \"white\",\n+      maxWidth: \"100%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"0px\",\n+      marginTop: \"200px\",\n+    },\n+    mbox: {\n+      width: \"100px\",\n+      height: \"150px\",\n+    },\n+\n+    mlastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  return (\n+    <>\n+      {isMobile ? (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n+              {products.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    <BoxContainer\n+                      key={index}\n+                      categoryOption={categoryShadow[product.category]}\n+                    >\n+                      <div\n+                        key={index}\n+                        style={{\n+                          ...mstyles.mbox,\n+\n+                          // justifyContent:\n+                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                        }}\n+                      >\n+                        {product.images.length > 0 ? (\n+                          <img\n+                            src={product.images[0]} // Display first image only\n+                            alt={product.name}\n+                            style={{\n+                              width: \"135px\",\n+                              height: \"150px\",\n+                              objectFit: \"cover\",\n+                              borderRadius: \"10px\",\n+                              cursor: \"pointer\",\n+                            }}\n+                            onClick={() => {\n+                              setSelectedProduct(product);\n+                              handleProductClick(product);\n+                              show();\n+                            }}\n+                          />\n+                        ) : (\n+                          <p>{t(\"No Image Available\")}</p>\n+                        )}\n+                        <MAddToWishList\n+                        position={position}\n+                        >\n+                          +\n+                        </MAddToWishList>\n+                      </div>\n+\n+                      {/* text */}\n+                      <div style={{ display: \"flex\" }}>\n+                        <div\n+                          className=\"text\"\n+                          style={{\n+                            borderRadius: \"10PX\",\n+                            width: \"100%\",\n+                            height: \"100px\",\n+                            // background:\"red\",\n+                            padding: \"10px\",\n+                          }}\n+                        >\n+                          <Name className=\"name\" fontSize=\"17px\">\n+                            <span\n+                              style={{ color: \"black\" }}\n+                              dangerouslySetInnerHTML={{\n+                                __html: highlightText(product.name, searchTerm),\n+                              }}\n+                            ></span>{\" \"}\n+                          </Name>\n+\n+                          {/* <DescriptionContainer>\n+                         <DescriptionTitle>\n+                           {t(\"Description\")}:\n+                           <DescriptionContent>\n+                             {product.description}\n+                           </DescriptionContent>\n+                         </DescriptionTitle>\n+                       </DescriptionContainer> */}\n+                          <StatusContainer>\n+                            <StatusTitle>\n+                              {t(\"Status\")}:\n+                              <StatusContent>{product.status}</StatusContent>\n+                            </StatusTitle>\n+                          </StatusContainer>\n+                          <Price key={index}>\n+                            {t(\"CFA\")}: {product.price - product.discount}\n+                          </Price>\n+                          {product.discount > 0 && (\n+                            <Discount key={index}>\n+                              {t(\"CFA\")}:<s>{product.price}</s>\n+                              <label\n+                                style={{\n+                                  width: \"40px\",\n+                                  height: \"20px\",\n+                                  background: \"#90EE90\",\n+                                  textAlign: \"center\",\n+                                  borderRadius: \"5px\",\n+                                  marginLeft: \"15px\",\n+                                }}\n+                              >\n+                                -\n+                                {(\n+                                  (product.discount / product.price) *\n+                                  100\n+                                ).toFixed(0)}\n+                                %\n+                              </label>\n+                            </Discount>\n+                          )}\n+                        </div>\n+                      </div>\n+\n+                      <div\n+                        style={{\n+                          background: \"\",\n+                          textAlign: \"center\",\n+                          padding: \"5px\",\n+                        }}\n+                      >\n+                        <MAddtocartButton\n+                        \n+                          main={product.discount > 0}\n+                          width=\"auto\"\n+                          onClick={() => dispatch(addToCartAPI(product))}\n+                        >\n+                          {t(\"Add To Cart\")}\n+                        </MAddtocartButton>\n+                      </div>\n+                    </BoxContainer>\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+\n+              {selectedProduct && showDetails && selectedProduct && <></>}\n+            </div>\n+          }\n+\n+          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n+        </React.Fragment>\n+      ) : (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={styles.container}>\n+              {filteredProducts.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    {selectedProduct === product && (\n+                      <div\n+                        style={{\n+                          padding: \"20px\",\n+                          margin: \"0 auto\",\n+                          marginTop: \"0px\",\n+                          Width: \"40%\",\n+                          maxHeight: \"100vh\",\n+                          border: \"1px solid green\",\n+                          borderRadius: \"20px\",\n+                          // background:'red',\n+                          boxShadow: \"10px 0px 50px 0px pink\",\n+                        }}\n+                      >\n+                        <div style={{ display: \"flex\" }}>\n+                          <div style={{ background: \"\", width: \"400px\" }}>\n+                            {selectedProduct.images &&\n+                            selectedProduct.images.length > 0 ? (\n+                              <Slider {...style.sliderSettings}>\n+                                {selectedProduct.images.map((imgUrl, index) => (\n+                                  <div key={index}>\n+                                    <img\n+                                      src={imgUrl}\n+                                      alt={`${selectedProduct.title} - Image ${\n+                                        index + 1\n+                                      }`}\n+                                      style={{\n+                                        width: \"400px\",\n+                                        height: \"450px\",\n+                                        borderRadius: \"8px\",\n+                                      }}\n+                                    />\n+                                  </div>\n+                                ))}\n+                              </Slider>\n+                            ) : (\n+                              <p>No images available</p>\n+                            )}\n+                          </div>\n+                          <div>{SelectedProduct}</div>\n+                          <div\n+                            style={{\n+                              background: \"#4ECDC4\",\n+                              width: \"500px\",\n+                              marginLeft: \"30px\",\n+                            }}\n+                          >\n+                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n+                              <CloseButton\n+                                style={{\n+                                  position: \"relative\",\n+                                  left: \"420px\",\n+                                  top: \"-40px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"0px 14px 10px 10px\",\n+                                  width: \"80px\",\n+                                  border: \"1px solid red\",\n+                                  cursor: \"pointer\",\n+                                  fontWeight: \"bold\",\n+                                  fontSize: \"30px\",\n+                                  color: \"red\",\n+                                }}\n+                                onClick={() => hanldleProductHid()}\n+                              >\n+                                {t(\"close\")}\n+                              </CloseButton>\n+                              <h4>\n+                                {\" \"}\n+                                <Link\n+                                  to={`/productsByOwner/${selectedProduct.owner}`}\n+                                >\n+                                  <h4> {selectedProduct.owner}</h4>\n+                                </Link>\n+                              </h4>\n+                              <h1>{selectedProduct.name}</h1>\n+                              <p>{selectedProduct.description}</p>\n+                              <p>\n+                                <strong>Price:</strong> {selectedProduct.price}\n+                              </p>\n+                            </div>\n+                            <div style={style.buttonsContainer}>\n+                              <div>\n+                                <button\n+                                  style={style.buttons}\n+                                  onClick={() =>\n+                                    dispatch(\n+                                      addToCartBeforeLogin(selectedProduct)\n+                                    )\n+                                  }\n+                                >\n+                                  Add To Cart\n+                                </button>\n+                              </div>\n+                              <div>\n+                                <button\n+                                  style={{ ...style.buttons }}\n+                                  onClick={() => dispatch(selectedProduct)}\n+                                >\n+                                  [add To WishList]\n+                                </button>\n+                              </div>\n+                            </div>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    )}\n+                    {product !== selectedProduct && (\n+                      <BoxContainer\n+                        key={index}\n+                        categoryOption={categoryShadow[product.category]}\n+                      >\n+                        <div\n+                          key={index}\n+                          style={{\n+                            ...styles.box,\n+\n+                            // justifyContent:\n+                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                          }}\n+                        >\n+                          {product.images.length > 0 ? (\n+                            <img\n+                              src={product.images[0]} // Display first image only\n+                              alt={product.name}\n+                              style={{\n+                                width: \"250px\",\n+                                height: \"250px\",\n+                                objectFit: \"cover\",\n+                                borderRadius: \"10px\",\n+                                cursor: \"pointer\",\n+                              }}\n+                              onClick={() => {\n+                                setSelectedProduct(product);\n+\n+                                show();\n+                              }}\n+                            />\n+                          ) : (\n+                            <p>{t(\"No Image Available\")}</p>\n+                          )}\n+                        </div>\n+\n+                        {/* text */}\n+                        <div style={{ display: \"flex\" }}>\n+                          <div\n+                            className=\"text\"\n+                            style={{\n+                              borderRadius: \"10PX\",\n+                              width: \"100%\",\n+                              height: \"100px\",\n+                              //  background:\"red\",\n+                              padding: \"10px\",\n+                            }}\n+                          >\n+                            <Name className=\"name\">\n+                              <span\n+                                style={{ color: \"black\" }}\n+                                dangerouslySetInnerHTML={{\n+                                  __html: highlightText(\n+                                    product.name,\n+                                    searchTerm\n+                                  ),\n+                                }}\n+                              ></span>{\" \"}\n+                            </Name>\n+                            <DescriptionContainer>\n+                              <DescriptionTitle>\n+                                {t(\"Description\")}:\n+                                <DescriptionContent>\n+                                  {product.description}\n+                                </DescriptionContent>\n+                              </DescriptionTitle>\n+                            </DescriptionContainer>\n+                            <StatusContainer>\n+                              <StatusTitle>\n+                                {t(\"Status\")}:\n+                                <StatusContent>{product.status}</StatusContent>\n+                              </StatusTitle>\n+                            </StatusContainer>\n+                            <Price key={index}>\n+                              {t(\"CFA\")}: {product.price - product.discount}\n+                            </Price>\n+                            {product.discount > 0 && (\n+                              <Discount key={index}>\n+                                {t(\"CFA\")}:<s>{product.price}</s>\n+                                <label\n+                                  style={{\n+                                    width: \"40px\",\n+                                    height: \"20px\",\n+                                    background: \"#90EE90\",\n+                                    textAlign: \"center\",\n+                                    borderRadius: \"5px\",\n+                                    marginLeft: \"15px\",\n+                                  }}\n+                                >\n+                                  -\n+                                  {(\n+                                    (product.discount / product.price) *\n+                                    100\n+                                  ).toFixed(0)}\n+                                  %\n+                                </label>\n+                              </Discount>\n+                            )}\n+                          </div>\n+\n+                          {/* like and wishlist */}\n+                          <div style={{ background: \"\" }}>\n+                            <div>{/* Product Display */}</div>\n+                            <div>\n+                              <button\n+                                style={{\n+                                  background: \"transparent\",\n+                                  border: \"0px solid orange\",\n+                                  color: \"orange\",\n+                                  padding: \"0px 0px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"10px 10px 10px 10px \",\n+                                  cursor: \"pointer\",\n+                                  fontSize: \"40px\",\n+                                  transition: \"all 0.3s ease\",\n+                                  marginRight: \"auto\",\n+                                  width: \"35px\",\n+                                }}\n+                                onClick={() =>\n+                                  dispatch(addToCartBeforeLogin(product))\n+                                }\n+                              >\n+                                +\n+                              </button>\n+                            </div>\n+                          </div>\n+                        </div>\n+\n+                        <div\n+                          style={{\n+                            background: \"\",\n+                            textAlign: \"center\",\n+                            padding: \"5px\",\n+                          }}\n+                        >\n+                          <AddtocartButton\n+                            main={product.discount > 0}\n+                            onClick={() => dispatch(addToCartAPI(product))}\n+                          >\n+                            {t(\"Add To Cart\")}\n+                          </AddtocartButton>\n+                        </div>\n+                      </BoxContainer>\n+                    )}\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+            </div>\n+          }\n+        </React.Fragment>\n+      )}\n+    </>\n+  );\n+};\n+const style = {\n+  sliderSettings: {\n+    dots: true, // Show navigation dots\n+    infinite: true, // Enable infinite looping\n+    speed: 100, // Transition speed (ms)\n+    slidesToShow: 1, // Show one image at a time\n+    slidesToScroll: 1, // Scroll one image per action\n+    autoplay: true,\n+    autoplaySpeed: 3000, // Autoplay speed (ms)\n+  },\n+  buttonsContainer: {\n+    display: \"flex\",\n+  },\n+  buttons: {\n+    color: \"orangered\",\n+    background: \"none\",\n+    border: \"2px solid orangered\",\n+    margin: \"10px\",\n+    borderRadius: \"10px\",\n+    before: \"+\",\n+  },\n+};\n+\n+export default BrandPage;\n"
                },
                {
                    "date": 1743037260288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,9 +348,9 @@\n                           padding: \"5px\",\n                         }}\n                       >\n                         <MAddtocartButton\n-                        \n+                        fontSize\n                           main={product.discount > 0}\n                           width=\"auto\"\n                           onClick={() => dispatch(addToCartAPI(product))}\n                         >\n@@ -662,668 +662,4 @@\n   },\n };\n \n export default BrandPage;\n-import React, { useEffect, useState, useRef } from \"react\";\n-import \"./products.css\";\n-import { AuthContext } from \"../../AuthContext\";\n-import { useContext } from \"react\";\n-import { useSelector, useDispatch } from \"react-redux\";\n-import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n-import { addToWishListAPI } from \"../../wishlistAction\";\n-import styled, { keyframes } from \"styled-components\";\n-import { useTranslation } from \"react-i18next\";\n-import Slider from \"react-slick\";\n-import { useNavigate, useParams, Link } from \"react-router-dom\";\n-import \"../translations/i18n\";\n-import {\n-  BoxContainer,\n-  AddtocartButton,\n-  MAddtocartButton,\n-  MAddToWishList,\n-  Price,\n-  Discount,\n-  DescriptionContainer,\n-  DescriptionTitle,\n-  DescriptionContent,\n-  StatusContainer,\n-  StatusContent,\n-  StatusTitle,\n-  CloseButton,\n-  Name,\n-  positions,\n-  fontSizes,\n-  categoryShadow,\n-} from \"./styledComponents\";\n-import { addToCart, removeFromCart } from \"../../cartSlice\";\n-import e from \"cors\";\n-\n-\n-const BrandPage = ({\n-  api,\n-  loading,\n-  add,\n-  images,\n-\n-  SelectedProduct,\n-  addToCart,\n-  addToWishList,\n-  handleShowAlert,\n-  showAlert,\n-  mobilefilteredProducts,\n-  searchTerm,\n-  highlightText,\n-  filteredProducts,\n-\n-  selectedCategory,\n-  Fortop,\n-}) => {\n-  const [currentIndex, setCurrentIndex] = useState(0);\n-  const [products, setProducts] = useState([]);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const [selectedProduct, setSelectedProduct] = useState(null);\n-  const [selectedDProduct, setDSelectedProduct] = useState(null);\n-  const [selected, setSelected] = useState(false);\n-  const userId = localStorage.getItem(\"userId\");\n-  const [showDetails, setShowDetails] = useState(true);\n-  const username = localStorage.getItem(\"username\");\n-  const previewRef = useRef(null);\n-  const { brandName } = useParams();\n-  const buttonRef = useRef(null);\n-  const navigate = useNavigate();\n-  const { t,i18n} = useTranslation();\n-     const position = positions[i18n.language] || position.en;\n-      const fontSize = fontSizes[i18n.language] || fontSize.en;\n-  const dispatch = useDispatch(); // Function to check screen size\n-\n-  // Function to check screen size\n-  const handleResize = () => {\n-    setIsMobile(window.innerWidth <= 1000);\n-  };\n-\n-  useEffect(() => {\n-    handleResize(); // Initial check\n-    window.addEventListener(\"resize\", handleResize); // Update on resize\n-    return () => window.removeEventListener(\"resize\", handleResize);\n-  }, []);\n-\n-\n-  const handleProductClick = (product) => {\n-    SelectedProduct(product);\n-    localStorage.setItem(\"selectedProduct\", product);\n-    navigate(\"/selectedProduct\");\n-  };\n-\n-  const hanldleProductHid = () => {\n-    setSelectedProduct(null);\n-  };\n-  const nextImage = () => {\n-    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n-  };\n-\n-  // Toggle the selection state of a product\n-  const toggleSelection = (id, currentSelection) => {\n-    // Update the product on the server using PATCH\n-    fetch(`${api}/updateProducts/${id}`, {\n-      method: \"PATCH\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify({ isSelected: !currentSelection }),\n-    })\n-      .then((response) => response.json())\n-      .then((updatedProduct) => {\n-        // Update the local state to reflect the change\n-        setProducts((prevProducts) =>\n-          prevProducts.map((product) =>\n-            product.id === id ? updatedProduct : product\n-          )\n-        );\n-      })\n-      .catch((error) => console.error(\"Error updating product:\", error));\n-  };\n-\n-  // Fetch all products\n-  useEffect(() => {\n-    const fetchProducts = async () => {\n-      const response = await fetch(`${api}/products`);\n-      const data = await response.json();\n-      const filteredBrands = data.filter((product) => \n-        product.brand.some((brand) => brand.name === brandName)\n-      );\n-      setProducts(data);\n-      setProducts(filteredBrands);\n-    };\n-    fetchProducts();\n-  }, [api]);\n-\n-  // // Toggle like/dislike with one button\n-  // const toggleLike = async (product) => {\n-  //   if (!product) return;\n-\n-  //   const liked = product.likedBy.some((user) => user.userId === userId);\n-  //   const endpoint = liked ? \"dislike\" : \"like\";\n-\n-  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n-  //     method: \"PATCH\",\n-  //     headers: { \"Content-Type\": \"application/json\" },\n-  //     body: JSON.stringify({ userId, username }), // Send user info\n-  //   });\n-\n-  //   const updatedProduct = await response.json();\n-\n-  //   // Update state\n-  //   setProducts(\n-  //     products.map((p) =>\n-  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n-  //     )\n-  //   );\n-  //   setSelectedProduct({ ...product, ...updatedProduct });\n-  // };\n-  // ////////////////////////////////////////////////////////\n-\n-  const handleMouseEnter = () => {\n-    if (buttonRef.current) {\n-      buttonRef.current.click();\n-    }\n-  };\n-\n-  // ///////////////////////////////////////////////////////////\n-\n-  const show = (event) => {\n-    setShowDetails((prevShow) => !prevShow);\n-    if (previewRef.current && !previewRef.current.contains(event.target)) {\n-    }\n-  };\n-\n-  // useEffect(() => {\n-  //   // Attach event listener to the whole document\n-  //   document.addEventListener(\"mousedown\", show);\n-  //   return () => {\n-  //     document.removeEventListener(\"mousedown\", show);\n-  //   };\n-  // }, []);\n-  const styles = {\n-    container: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"20px\",\n-      background: \"white\",\n-      maxWidth: \"96%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"20px\",\n-      marginTop: \"50px\",\n-    },\n-    box: {\n-      width: \"250px\",\n-      height: \"250px\",\n-    },\n-\n-    lastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  const mstyles = {\n-    Mcontainer: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"10px\",\n-      background: \"white\",\n-      maxWidth: \"100%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"0px\",\n-      marginTop: \"200px\",\n-    },\n-    mbox: {\n-      width: \"100px\",\n-      height: \"150px\",\n-    },\n-\n-    mlastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  return (\n-    <>\n-      {isMobile ? (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {products.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    <BoxContainer\n-                      key={index}\n-                      categoryOption={categoryShadow[product.category]}\n-                    >\n-                      <div\n-                        key={index}\n-                        style={{\n-                          ...mstyles.mbox,\n-\n-                          // justifyContent:\n-                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                        }}\n-                      >\n-                        {product.images.length > 0 ? (\n-                          <img\n-                            src={product.images[0]} // Display first image only\n-                            alt={product.name}\n-                            style={{\n-                              width: \"135px\",\n-                              height: \"150px\",\n-                              objectFit: \"cover\",\n-                              borderRadius: \"10px\",\n-                              cursor: \"pointer\",\n-                            }}\n-                            onClick={() => {\n-                              setSelectedProduct(product);\n-                              handleProductClick(product);\n-                              show();\n-                            }}\n-                          />\n-                        ) : (\n-                          <p>{t(\"No Image Available\")}</p>\n-                        )}\n-                        <MAddToWishList\n-                        position={position}\n-                        >\n-                          +\n-                        </MAddToWishList>\n-                      </div>\n-\n-                      {/* text */}\n-                      <div style={{ display: \"flex\" }}>\n-                        <div\n-                          className=\"text\"\n-                          style={{\n-                            borderRadius: \"10PX\",\n-                            width: \"100%\",\n-                            height: \"100px\",\n-                            // background:\"red\",\n-                            padding: \"10px\",\n-                          }}\n-                        >\n-                          <Name className=\"name\" fontSize=\"17px\">\n-                            <span\n-                              style={{ color: \"black\" }}\n-                              dangerouslySetInnerHTML={{\n-                                __html: highlightText(product.name, searchTerm),\n-                              }}\n-                            ></span>{\" \"}\n-                          </Name>\n-\n-                          {/* <DescriptionContainer>\n-                         <DescriptionTitle>\n-                           {t(\"Description\")}:\n-                           <DescriptionContent>\n-                             {product.description}\n-                           </DescriptionContent>\n-                         </DescriptionTitle>\n-                       </DescriptionContainer> */}\n-                          <StatusContainer>\n-                            <StatusTitle>\n-                              {t(\"Status\")}:\n-                              <StatusContent>{product.status}</StatusContent>\n-                            </StatusTitle>\n-                          </StatusContainer>\n-                          <Price key={index}>\n-                            {t(\"CFA\")}: {product.price - product.discount}\n-                          </Price>\n-                          {product.discount > 0 && (\n-                            <Discount key={index}>\n-                              {t(\"CFA\")}:<s>{product.price}</s>\n-                              <label\n-                                style={{\n-                                  width: \"40px\",\n-                                  height: \"20px\",\n-                                  background: \"#90EE90\",\n-                                  textAlign: \"center\",\n-                                  borderRadius: \"5px\",\n-                                  marginLeft: \"15px\",\n-                                }}\n-                              >\n-                                -\n-                                {(\n-                                  (product.discount / product.price) *\n-                                  100\n-                                ).toFixed(0)}\n-                                %\n-                              </label>\n-                            </Discount>\n-                          )}\n-                        </div>\n-                      </div>\n-\n-                      <div\n-                        style={{\n-                          background: \"\",\n-                          textAlign: \"center\",\n-                          padding: \"5px\",\n-                        }}\n-                      >\n-                        <MAddtocartButton\n-                          main={product.discount > 0}\n-                          width=\"auto\"\n-                          onClick={() => dispatch(addToCartAPI(product))}\n-                        >\n-                          {t(\"Add To Cart\")}\n-                        </MAddtocartButton>\n-                      </div>\n-                    </BoxContainer>\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-\n-              {selectedProduct && showDetails && selectedProduct && <></>}\n-            </div>\n-          }\n-\n-          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n-        </React.Fragment>\n-      ) : (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={styles.container}>\n-              {filteredProducts.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    {selectedProduct === product && (\n-                      <div\n-                        style={{\n-                          padding: \"20px\",\n-                          margin: \"0 auto\",\n-                          marginTop: \"0px\",\n-                          Width: \"40%\",\n-                          maxHeight: \"100vh\",\n-                          border: \"1px solid green\",\n-                          borderRadius: \"20px\",\n-                          // background:'red',\n-                          boxShadow: \"10px 0px 50px 0px pink\",\n-                        }}\n-                      >\n-                        <div style={{ display: \"flex\" }}>\n-                          <div style={{ background: \"\", width: \"400px\" }}>\n-                            {selectedProduct.images &&\n-                            selectedProduct.images.length > 0 ? (\n-                              <Slider {...style.sliderSettings}>\n-                                {selectedProduct.images.map((imgUrl, index) => (\n-                                  <div key={index}>\n-                                    <img\n-                                      src={imgUrl}\n-                                      alt={`${selectedProduct.title} - Image ${\n-                                        index + 1\n-                                      }`}\n-                                      style={{\n-                                        width: \"400px\",\n-                                        height: \"450px\",\n-                                        borderRadius: \"8px\",\n-                                      }}\n-                                    />\n-                                  </div>\n-                                ))}\n-                              </Slider>\n-                            ) : (\n-                              <p>No images available</p>\n-                            )}\n-                          </div>\n-                          <div>{SelectedProduct}</div>\n-                          <div\n-                            style={{\n-                              background: \"#4ECDC4\",\n-                              width: \"500px\",\n-                              marginLeft: \"30px\",\n-                            }}\n-                          >\n-                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n-                              <CloseButton\n-                                style={{\n-                                  position: \"relative\",\n-                                  left: \"420px\",\n-                                  top: \"-40px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"0px 14px 10px 10px\",\n-                                  width: \"80px\",\n-                                  border: \"1px solid red\",\n-                                  cursor: \"pointer\",\n-                                  fontWeight: \"bold\",\n-                                  fontSize: \"30px\",\n-                                  color: \"red\",\n-                                }}\n-                                onClick={() => hanldleProductHid()}\n-                              >\n-                                {t(\"close\")}\n-                              </CloseButton>\n-                              <h4>\n-                                {\" \"}\n-                                <Link\n-                                  to={`/productsByOwner/${selectedProduct.owner}`}\n-                                >\n-                                  <h4> {selectedProduct.owner}</h4>\n-                                </Link>\n-                              </h4>\n-                              <h1>{selectedProduct.name}</h1>\n-                              <p>{selectedProduct.description}</p>\n-                              <p>\n-                                <strong>Price:</strong> {selectedProduct.price}\n-                              </p>\n-                            </div>\n-                            <div style={style.buttonsContainer}>\n-                              <div>\n-                                <button\n-                                  style={style.buttons}\n-                                  onClick={() =>\n-                                    dispatch(\n-                                      addToCartBeforeLogin(selectedProduct)\n-                                    )\n-                                  }\n-                                >\n-                                  Add To Cart\n-                                </button>\n-                              </div>\n-                              <div>\n-                                <button\n-                                  style={{ ...style.buttons }}\n-                                  onClick={() => dispatch(selectedProduct)}\n-                                >\n-                                  [add To WishList]\n-                                </button>\n-                              </div>\n-                            </div>\n-                          </div>\n-                        </div>\n-                      </div>\n-                    )}\n-                    {product !== selectedProduct && (\n-                      <BoxContainer\n-                        key={index}\n-                        categoryOption={categoryShadow[product.category]}\n-                      >\n-                        <div\n-                          key={index}\n-                          style={{\n-                            ...styles.box,\n-\n-                            // justifyContent:\n-                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                          }}\n-                        >\n-                          {product.images.length > 0 ? (\n-                            <img\n-                              src={product.images[0]} // Display first image only\n-                              alt={product.name}\n-                              style={{\n-                                width: \"250px\",\n-                                height: \"250px\",\n-                                objectFit: \"cover\",\n-                                borderRadius: \"10px\",\n-                                cursor: \"pointer\",\n-                              }}\n-                              onClick={() => {\n-                                setSelectedProduct(product);\n-\n-                                show();\n-                              }}\n-                            />\n-                          ) : (\n-                            <p>{t(\"No Image Available\")}</p>\n-                          )}\n-                        </div>\n-\n-                        {/* text */}\n-                        <div style={{ display: \"flex\" }}>\n-                          <div\n-                            className=\"text\"\n-                            style={{\n-                              borderRadius: \"10PX\",\n-                              width: \"100%\",\n-                              height: \"100px\",\n-                              //  background:\"red\",\n-                              padding: \"10px\",\n-                            }}\n-                          >\n-                            <Name className=\"name\">\n-                              <span\n-                                style={{ color: \"black\" }}\n-                                dangerouslySetInnerHTML={{\n-                                  __html: highlightText(\n-                                    product.name,\n-                                    searchTerm\n-                                  ),\n-                                }}\n-                              ></span>{\" \"}\n-                            </Name>\n-                            <DescriptionContainer>\n-                              <DescriptionTitle>\n-                                {t(\"Description\")}:\n-                                <DescriptionContent>\n-                                  {product.description}\n-                                </DescriptionContent>\n-                              </DescriptionTitle>\n-                            </DescriptionContainer>\n-                            <StatusContainer>\n-                              <StatusTitle>\n-                                {t(\"Status\")}:\n-                                <StatusContent>{product.status}</StatusContent>\n-                              </StatusTitle>\n-                            </StatusContainer>\n-                            <Price key={index}>\n-                              {t(\"CFA\")}: {product.price - product.discount}\n-                            </Price>\n-                            {product.discount > 0 && (\n-                              <Discount key={index}>\n-                                {t(\"CFA\")}:<s>{product.price}</s>\n-                                <label\n-                                  style={{\n-                                    width: \"40px\",\n-                                    height: \"20px\",\n-                                    background: \"#90EE90\",\n-                                    textAlign: \"center\",\n-                                    borderRadius: \"5px\",\n-                                    marginLeft: \"15px\",\n-                                  }}\n-                                >\n-                                  -\n-                                  {(\n-                                    (product.discount / product.price) *\n-                                    100\n-                                  ).toFixed(0)}\n-                                  %\n-                                </label>\n-                              </Discount>\n-                            )}\n-                          </div>\n-\n-                          {/* like and wishlist */}\n-                          <div style={{ background: \"\" }}>\n-                            <div>{/* Product Display */}</div>\n-                            <div>\n-                              <button\n-                                style={{\n-                                  background: \"transparent\",\n-                                  border: \"0px solid orange\",\n-                                  color: \"orange\",\n-                                  padding: \"0px 0px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"10px 10px 10px 10px \",\n-                                  cursor: \"pointer\",\n-                                  fontSize: \"40px\",\n-                                  transition: \"all 0.3s ease\",\n-                                  marginRight: \"auto\",\n-                                  width: \"35px\",\n-                                }}\n-                                onClick={() =>\n-                                  dispatch(addToCartBeforeLogin(product))\n-                                }\n-                              >\n-                                +\n-                              </button>\n-                            </div>\n-                          </div>\n-                        </div>\n-\n-                        <div\n-                          style={{\n-                            background: \"\",\n-                            textAlign: \"center\",\n-                            padding: \"5px\",\n-                          }}\n-                        >\n-                          <AddtocartButton\n-                            main={product.discount > 0}\n-                            onClick={() => dispatch(addToCartAPI(product))}\n-                          >\n-                            {t(\"Add To Cart\")}\n-                          </AddtocartButton>\n-                        </div>\n-                      </BoxContainer>\n-                    )}\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-            </div>\n-          }\n-        </React.Fragment>\n-      )}\n-    </>\n-  );\n-};\n-const style = {\n-  sliderSettings: {\n-    dots: true, // Show navigation dots\n-    infinite: true, // Enable infinite looping\n-    speed: 100, // Transition speed (ms)\n-    slidesToShow: 1, // Show one image at a time\n-    slidesToScroll: 1, // Scroll one image per action\n-    autoplay: true,\n-    autoplaySpeed: 3000, // Autoplay speed (ms)\n-  },\n-  buttonsContainer: {\n-    display: \"flex\",\n-  },\n-  buttons: {\n-    color: \"orangered\",\n-    background: \"none\",\n-    border: \"2px solid orangered\",\n-    margin: \"10px\",\n-    borderRadius: \"10px\",\n-    before: \"+\",\n-  },\n-};\n-\n-export default BrandPage;\n"
                },
                {
                    "date": 1743037267665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,9 +348,9 @@\n                           padding: \"5px\",\n                         }}\n                       >\n                         <MAddtocartButton\n-                        fontSize\n+                        fontSize={fontSize}\n                           main={product.discount > 0}\n                           width=\"auto\"\n                           onClick={() => dispatch(addToCartAPI(product))}\n                         >\n"
                },
                {
                    "date": 1743037596108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,659 @@\n+import React, { useEffect, useState, useRef } from \"react\";\n+import \"./products.css\";\n+import { AuthContext } from \"../../AuthContext\";\n+import { useContext } from \"react\";\n+import { useSelector, useDispatch } from \"react-redux\";\n+import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n+import { addToWishListAPI } from \"../../wishlistAction\";\n+import styled, { keyframes } from \"styled-components\";\n+import { useTranslation } from \"react-i18next\";\n+import Slider from \"react-slick\";\n+import { useNavigate, useParams, Link } from \"react-router-dom\";\n+import \"../translations/i18n\";\n+import {\n+  BoxContainer,\n+  AddtocartButton,\n+  MAddtocartButton,\n+  MAddToWishList,\n+  Price,\n+  Discount,\n+  DescriptionContainer,\n+  DescriptionTitle,\n+  DescriptionContent,\n+  StatusContainer,\n+  StatusContent,\n+  StatusTitle,\n+  CloseButton,\n+  Name,\n+  positions,\n+  fontSizes,\n+  categoryShadow,\n+} from \"./styledComponents\";\n+import { addToCart, removeFromCart } from \"../../cartSlice\";\n+import e from \"cors\";\n+\n+const BrandPage = ({\n+  api,\n+  loading,\n+  add,\n+  images,\n+\n+  SelectedProduct,\n+  addToCart,\n+  addToWishList,\n+  handleShowAlert,\n+  showAlert,\n+  mobilefilteredProducts,\n+  searchTerm,\n+  highlightText,\n+  filteredProducts,\n+\n+  selectedCategory,\n+  Fortop,\n+}) => {\n+  const [currentIndex, setCurrentIndex] = useState(0);\n+  const [products, setProducts] = useState([]);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const [selectedProduct, setSelectedProduct] = useState(null);\n+  const [selectedDProduct, setDSelectedProduct] = useState(null);\n+  const [selected, setSelected] = useState(false);\n+  const userId = localStorage.getItem(\"userId\");\n+  const [showDetails, setShowDetails] = useState(true);\n+  const username = localStorage.getItem(\"username\");\n+  const previewRef = useRef(null);\n+  const { brandName } = useParams();\n+  const buttonRef = useRef(null);\n+  const navigate = useNavigate();\n+  const { t, i18n } = useTranslation();\n+  const position = positions[i18n.language] || position.en;\n+  const fontSize = fontSizes[i18n.language] || fontSize.en;\n+  const dispatch = useDispatch(); // Function to check screen size\n+\n+  // Function to check screen size\n+  const handleResize = () => {\n+    setIsMobile(window.innerWidth <= 1000);\n+  };\n+\n+  useEffect(() => {\n+    handleResize(); // Initial check\n+    window.addEventListener(\"resize\", handleResize); // Update on resize\n+    return () => window.removeEventListener(\"resize\", handleResize);\n+  }, []);\n+\n+  const handleProductClick = (product) => {\n+    SelectedProduct(product);\n+    localStorage.setItem(\"selectedProduct\", product);\n+    navigate(\"/selectedProduct\");\n+  };\n+\n+  const hanldleProductHid = () => {\n+    setSelectedProduct(null);\n+  };\n+  const nextImage = () => {\n+    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n+  };\n+\n+  // Toggle the selection state of a product\n+  const toggleSelection = (id, currentSelection) => {\n+    // Update the product on the server using PATCH\n+    fetch(`${api}/updateProducts/${id}`, {\n+      method: \"PATCH\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({ isSelected: !currentSelection }),\n+    })\n+      .then((response) => response.json())\n+      .then((updatedProduct) => {\n+        // Update the local state to reflect the change\n+        setProducts((prevProducts) =>\n+          prevProducts.map((product) =>\n+            product.id === id ? updatedProduct : product\n+          )\n+        );\n+      })\n+      .catch((error) => console.error(\"Error updating product:\", error));\n+  };\n+\n+  // Fetch all products\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      const response = await fetch(`${api}/products`);\n+      const data = await response.json();\n+      const filteredBrands = data.filter((product) =>\n+        product.brand.some((brand) => brand.name === brandName)\n+      );\n+      setProducts(data);\n+      setProducts(filteredBrands);\n+    };\n+    fetchProducts();\n+  }, [api]);\n+\n+  // // Toggle like/dislike with one button\n+  // const toggleLike = async (product) => {\n+  //   if (!product) return;\n+\n+  //   const liked = product.likedBy.some((user) => user.userId === userId);\n+  //   const endpoint = liked ? \"dislike\" : \"like\";\n+\n+  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n+  //     method: \"PATCH\",\n+  //     headers: { \"Content-Type\": \"application/json\" },\n+  //     body: JSON.stringify({ userId, username }), // Send user info\n+  //   });\n+\n+  //   const updatedProduct = await response.json();\n+\n+  //   // Update state\n+  //   setProducts(\n+  //     products.map((p) =>\n+  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n+  //     )\n+  //   );\n+  //   setSelectedProduct({ ...product, ...updatedProduct });\n+  // };\n+  // ////////////////////////////////////////////////////////\n+\n+  const handleMouseEnter = () => {\n+    if (buttonRef.current) {\n+      buttonRef.current.click();\n+    }\n+  };\n+\n+  // ///////////////////////////////////////////////////////////\n+\n+  const show = (event) => {\n+    setShowDetails((prevShow) => !prevShow);\n+    if (previewRef.current && !previewRef.current.contains(event.target)) {\n+    }\n+  };\n+\n+  // useEffect(() => {\n+  //   // Attach event listener to the whole document\n+  //   document.addEventListener(\"mousedown\", show);\n+  //   return () => {\n+  //     document.removeEventListener(\"mousedown\", show);\n+  //   };\n+  // }, []);\n+  const styles = {\n+    container: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"20px\",\n+      background: \"white\",\n+      maxWidth: \"96%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"20px\",\n+      marginTop: \"50px\",\n+    },\n+    box: {\n+      width: \"250px\",\n+      height: \"250px\",\n+    },\n+\n+    lastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  const mstyles = {\n+    Mcontainer: {\n+      display: \"flex\",\n+      flexDirection: \"row\",\n+      flexWrap: \"wrap\",\n+      justifyContent: \"center\",\n+      alignItems: \"center\",\n+      gap: \"10px\",\n+      background: \"white\",\n+      maxWidth: \"100%\", // Prevents full width spread\n+      margin: \"auto\", // Centers the whole container\n+      padding: \"0px\",\n+      marginTop: \"200px\",\n+    },\n+    mbox: {\n+      width: \"100px\",\n+      height: \"150px\",\n+    },\n+\n+    mlastBox: {\n+      background: \"blue\",\n+\n+      // Pushes last box to the left\n+    },\n+  };\n+\n+  return (\n+    <>\n+      {isMobile ? (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n+              {products.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    <BoxContainer\n+                      key={index}\n+                      categoryOption={categoryShadow[product.category]}\n+                    >\n+                      <div\n+                        key={index}\n+                        style={{\n+                          ...mstyles.mbox,\n+\n+                          // justifyContent:\n+                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                        }}\n+                      >\n+                        {product.images.length > 0 ? (\n+                          <img\n+                            src={product.images[0]} // Display first image only\n+                            alt={product.name}\n+                            style={{\n+                              width: \"135px\",\n+                              height: \"150px\",\n+                              objectFit: \"cover\",\n+                              borderRadius: \"10px\",\n+                              cursor: \"pointer\",\n+                            }}\n+                            onClick={() => {\n+                              setSelectedProduct(product);\n+                              handleProductClick(product);\n+                              show();\n+                            }}\n+                          />\n+                        ) : (\n+                          <p>{t(\"No Image Available\")}</p>\n+                        )}\n+                        <MAddToWishList position={position}>+</MAddToWishList>\n+                      </div>\n+\n+                      {/* text */}\n+                      <div style={{ display: \"flex\" }}>\n+                        <div\n+                          className=\"text\"\n+                          style={{\n+                            borderRadius: \"10PX\",\n+                            width: \"100%\",\n+                            height: \"100px\",\n+                            // background:\"red\",\n+                            padding: \"10px\",\n+                          }}\n+                        >\n+                          <Name className=\"name\" fontSize=\"17px\">\n+                            <span\n+                              style={{ color: \"black\" }}\n+                              dangerouslySetInnerHTML={{\n+                                __html: highlightText(product.name, searchTerm),\n+                              }}\n+                            ></span>{\" \"}\n+                          </Name>\n+\n+                          {/* <DescriptionContainer>\n+                         <DescriptionTitle>\n+                           {t(\"Description\")}:\n+                           <DescriptionContent>\n+                             {product.description}\n+                           </DescriptionContent>\n+                         </DescriptionTitle>\n+                       </DescriptionContainer> */}\n+                          <StatusContainer>\n+                            <StatusTitle>\n+                              {t(\"Status\")}:\n+                              <StatusContent>{product.status}</StatusContent>\n+                            </StatusTitle>\n+                          </StatusContainer>\n+                          <Price key={index}>\n+                            {t(\"CFA\")}: {product.price - product.discount}\n+                          </Price>\n+                          {product.discount > 0 && (\n+                            <Discount key={index}>\n+                              {t(\"CFA\")}:<s>{product.price}</s>\n+                              <label\n+                                style={{\n+                                  width: \"40px\",\n+                                  height: \"20px\",\n+                                  background: \"#90EE90\",\n+                                  textAlign: \"center\",\n+                                  borderRadius: \"5px\",\n+                                  marginLeft: \"15px\",\n+                                }}\n+                              >\n+                                -\n+                                {(\n+                                  (product.discount / product.price) *\n+                                  100\n+                                ).toFixed(0)}\n+                                %\n+                              </label>\n+                            </Discount>\n+                          )}\n+                        </div>\n+                      </div>\n+\n+                      <div\n+                        style={{\n+                          background: \"\",\n+                          textAlign: \"center\",\n+                          padding: \"5px\",\n+                        }}\n+                      >\n+                        <MAddtocartButton\n+                          fontSize={fontSize}\n+                          main={product.discount > 0}\n+                          width=\"auto\"\n+                          onClick={() => dispatch(addToCartAPI(product))}\n+                        >\n+                          {t(\"Add To Cart\")}\n+                        </MAddtocartButton>\n+                      </div>\n+                    </BoxContainer>\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+\n+              {selectedProduct && showDetails && selectedProduct && <></>}\n+            </div>\n+          }\n+\n+          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n+        </React.Fragment>\n+      ) : (\n+        <React.Fragment>\n+          {\n+            <div className=\"animated-box\" style={styles.container}>\n+              {filteredProducts.length > 0 ? (\n+                products.map((product, index) => (\n+                  <div>\n+                    {selectedProduct === product && (\n+                      <div\n+                        style={{\n+                          padding: \"20px\",\n+                          margin: \"0 auto\",\n+                          marginTop: \"0px\",\n+                          Width: \"40%\",\n+                          maxHeight: \"100vh\",\n+                          border: \"1px solid green\",\n+                          borderRadius: \"20px\",\n+                          // background:'red',\n+                          boxShadow: \"10px 0px 50px 0px pink\",\n+                        }}\n+                      >\n+                        <div style={{ display: \"flex\" }}>\n+                          <div style={{ background: \"\", width: \"400px\" }}>\n+                            {selectedProduct.images &&\n+                            selectedProduct.images.length > 0 ? (\n+                              <Slider {...style.sliderSettings}>\n+                                {selectedProduct.images.map((imgUrl, index) => (\n+                                  <div key={index}>\n+                                    <img\n+                                      src={imgUrl}\n+                                      alt={`${selectedProduct.title} - Image ${\n+                                        index + 1\n+                                      }`}\n+                                      style={{\n+                                        width: \"400px\",\n+                                        height: \"450px\",\n+                                        borderRadius: \"8px\",\n+                                      }}\n+                                    />\n+                                  </div>\n+                                ))}\n+                              </Slider>\n+                            ) : (\n+                              <p>No images available</p>\n+                            )}\n+                          </div>\n+                          <div>{SelectedProduct}</div>\n+                          <div\n+                            style={{\n+                              background: \"#4ECDC4\",\n+                              width: \"500px\",\n+                              marginLeft: \"30px\",\n+                            }}\n+                          >\n+                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n+                              <CloseButton\n+                                style={{\n+                                  position: \"relative\",\n+                                  left: \"420px\",\n+                                  top: \"-40px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"0px 14px 10px 10px\",\n+                                  width: \"80px\",\n+                                  border: \"1px solid red\",\n+                                  cursor: \"pointer\",\n+                                  fontWeight: \"bold\",\n+                                  fontSize: \"30px\",\n+                                  color: \"red\",\n+                                }}\n+                                onClick={() => hanldleProductHid()}\n+                              >\n+                                {t(\"close\")}\n+                              </CloseButton>\n+                              <h4>\n+                                {\" \"}\n+                                <Link\n+                                  to={`/productsByOwner/${selectedProduct.owner}`}\n+                                >\n+                                  <h4> {selectedProduct.owner}</h4>\n+                                </Link>\n+                              </h4>\n+                              <h1>{selectedProduct.name}</h1>\n+                              <p>{selectedProduct.description}</p>\n+                              <p>\n+                                <strong>Price:</strong> {selectedProduct.price}\n+                              </p>\n+                            </div>\n+                            <div style={style.buttonsContainer}>\n+                              <div>\n+                                <button\n+                                  style={style.buttons}\n+                                  onClick={() =>\n+                                    dispatch(\n+                                      addToCartBeforeLogin(selectedProduct)\n+                                    )\n+                                  }\n+                                >\n+                                  Add To Cart\n+                                </button>\n+                              </div>\n+                              <div>\n+                                <button\n+                                  style={{ ...style.buttons }}\n+                                  onClick={() => dispatch(selectedProduct)}\n+                                >\n+                                  [add To WishList]\n+                                </button>\n+                              </div>\n+                            </div>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    )}\n+                    {product !== selectedProduct && (\n+                      <BoxContainer\n+                        key={index}\n+                        categoryOption={categoryShadow[product.category]}\n+                      >\n+                        <div\n+                          key={index}\n+                          style={{\n+                            ...styles.box,\n+\n+                            // justifyContent:\n+                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n+                          }}\n+                        >\n+                          {product.images.length > 0 ? (\n+                            <img\n+                              src={product.images[0]} // Display first image only\n+                              alt={product.name}\n+                              style={{\n+                                width: \"250px\",\n+                                height: \"250px\",\n+                                objectFit: \"cover\",\n+                                borderRadius: \"10px\",\n+                                cursor: \"pointer\",\n+                              }}\n+                              onClick={() => {\n+                                setSelectedProduct(product);\n+\n+                                show();\n+                              }}\n+                            />\n+                          ) : (\n+                            <p>{t(\"No Image Available\")}</p>\n+                          )}\n+                        </div>\n+\n+                        {/* text */}\n+                        <div style={{ display: \"flex\" }}>\n+                          <div\n+                            className=\"text\"\n+                            style={{\n+                              borderRadius: \"10PX\",\n+                              width: \"100%\",\n+                              height: \"100px\",\n+                              //  background:\"red\",\n+                              padding: \"10px\",\n+                            }}\n+                          >\n+                            <Name className=\"name\">\n+                              <span\n+                                style={{ color: \"black\" }}\n+                                dangerouslySetInnerHTML={{\n+                                  __html: highlightText(\n+                                    product.name,\n+                                    searchTerm\n+                                  ),\n+                                }}\n+                              ></span>{\" \"}\n+                            </Name>\n+                            <DescriptionContainer>\n+                              <DescriptionTitle>\n+                                {t(\"Description\")}:\n+                                <DescriptionContent>\n+                                  {product.description}\n+                                </DescriptionContent>\n+                              </DescriptionTitle>\n+                            </DescriptionContainer>\n+                            <StatusContainer>\n+                              <StatusTitle>\n+                                {t(\"Status\")}:\n+                                <StatusContent>{product.status}</StatusContent>\n+                              </StatusTitle>\n+                            </StatusContainer>\n+                            <Price key={index}>\n+                              {t(\"CFA\")}: {product.price - product.discount}\n+                            </Price>\n+                            {product.discount > 0 && (\n+                              <Discount key={index}>\n+                                {t(\"CFA\")}:<s>{product.price}</s>\n+                                <label\n+                                  style={{\n+                                    width: \"40px\",\n+                                    height: \"20px\",\n+                                    background: \"#90EE90\",\n+                                    textAlign: \"center\",\n+                                    borderRadius: \"5px\",\n+                                    marginLeft: \"15px\",\n+                                  }}\n+                                >\n+                                  -\n+                                  {(\n+                                    (product.discount / product.price) *\n+                                    100\n+                                  ).toFixed(0)}\n+                                  %\n+                                </label>\n+                              </Discount>\n+                            )}\n+                          </div>\n+\n+                          {/* like and wishlist */}\n+                          <div style={{ background: \"\" }}>\n+                            <div>{/* Product Display */}</div>\n+                            <div>\n+                              <button\n+                                style={{\n+                                  background: \"transparent\",\n+                                  border: \"0px solid orange\",\n+                                  color: \"orange\",\n+                                  padding: \"0px 0px\",\n+                                  background: \"none\",\n+                                  borderRadius: \"10px 10px 10px 10px \",\n+                                  cursor: \"pointer\",\n+                                  fontSize: \"40px\",\n+                                  transition: \"all 0.3s ease\",\n+                                  marginRight: \"auto\",\n+                                  width: \"35px\",\n+                                }}\n+                                onClick={() =>\n+                                  dispatch(addToCartBeforeLogin(product))\n+                                }\n+                              >\n+                                +\n+                              </button>\n+                            </div>\n+                          </div>\n+                        </div>\n+\n+                        <div\n+                          style={{\n+                            background: \"\",\n+                            textAlign: \"center\",\n+                            padding: \"5px\",\n+                          }}\n+                        >\n+                          <AddtocartButton\n+                            main={product.discount > 0}\n+                            onClick={() => dispatch(addToCartAPI(product))}\n+                          >\n+                            {t(\"Add To Cart\")}\n+                          </AddtocartButton>\n+                        </div>\n+                      </BoxContainer>\n+                    )}\n+                  </div>\n+                ))\n+              ) : (\n+                <p>{t(\"Loading...\")}</p>\n+              )}\n+            </div>\n+          }\n+        </React.Fragment>\n+      )}\n+    </>\n+  );\n+};\n+const style = {\n+  sliderSettings: {\n+    dots: true, // Show navigation dots\n+    infinite: true, // Enable infinite looping\n+    speed: 100, // Transition speed (ms)\n+    slidesToShow: 1, // Show one image at a time\n+    slidesToScroll: 1, // Scroll one image per action\n+    autoplay: true,\n+    autoplaySpeed: 3000, // Autoplay speed (ms)\n+  },\n+  buttonsContainer: {\n+    display: \"flex\",\n+  },\n+  buttons: {\n+    color: \"orangered\",\n+    background: \"none\",\n+    border: \"2px solid orangered\",\n+    margin: \"10px\",\n+    borderRadius: \"10px\",\n+    before: \"+\",\n+  },\n+};\n+\n+export default BrandPage;\n"
                },
                {
                    "date": 1743067140770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n       ) : (\n         <React.Fragment>\n           {\n             <div className=\"animated-box\" style={styles.container}>\n-              {filteredProducts.length > 0 ? (\n+              {pro.length > 0 ? (\n                 products.map((product, index) => (\n                   <div>\n                     {selectedProduct === product && (\n                       <div\n@@ -656,669 +656,4 @@\n   },\n };\n \n export default BrandPage;\n-import React, { useEffect, useState, useRef } from \"react\";\n-import \"./products.css\";\n-import { AuthContext } from \"../../AuthContext\";\n-import { useContext } from \"react\";\n-import { useSelector, useDispatch } from \"react-redux\";\n-import { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\n-import { addToWishListAPI } from \"../../wishlistAction\";\n-import styled, { keyframes } from \"styled-components\";\n-import { useTranslation } from \"react-i18next\";\n-import Slider from \"react-slick\";\n-import { useNavigate, useParams, Link } from \"react-router-dom\";\n-import \"../translations/i18n\";\n-import {\n-  BoxContainer,\n-  AddtocartButton,\n-  MAddtocartButton,\n-  MAddToWishList,\n-  Price,\n-  Discount,\n-  DescriptionContainer,\n-  DescriptionTitle,\n-  DescriptionContent,\n-  StatusContainer,\n-  StatusContent,\n-  StatusTitle,\n-  CloseButton,\n-  Name,\n-  positions,\n-  fontSizes,\n-  categoryShadow,\n-} from \"./styledComponents\";\n-import { addToCart, removeFromCart } from \"../../cartSlice\";\n-import e from \"cors\";\n-\n-\n-const BrandPage = ({\n-  api,\n-  loading,\n-  add,\n-  images,\n-\n-  SelectedProduct,\n-  addToCart,\n-  addToWishList,\n-  handleShowAlert,\n-  showAlert,\n-  mobilefilteredProducts,\n-  searchTerm,\n-  highlightText,\n-  filteredProducts,\n-\n-  selectedCategory,\n-  Fortop,\n-}) => {\n-  const [currentIndex, setCurrentIndex] = useState(0);\n-  const [products, setProducts] = useState([]);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const [selectedProduct, setSelectedProduct] = useState(null);\n-  const [selectedDProduct, setDSelectedProduct] = useState(null);\n-  const [selected, setSelected] = useState(false);\n-  const userId = localStorage.getItem(\"userId\");\n-  const [showDetails, setShowDetails] = useState(true);\n-  const username = localStorage.getItem(\"username\");\n-  const previewRef = useRef(null);\n-  const { brandName } = useParams();\n-  const buttonRef = useRef(null);\n-  const navigate = useNavigate();\n-  const { t,i18n} = useTranslation();\n-     const position = positions[i18n.language] || position.en;\n-      const fontSize = fontSizes[i18n.language] || fontSize.en;\n-  const dispatch = useDispatch(); // Function to check screen size\n-\n-  // Function to check screen size\n-  const handleResize = () => {\n-    setIsMobile(window.innerWidth <= 1000);\n-  };\n-\n-  useEffect(() => {\n-    handleResize(); // Initial check\n-    window.addEventListener(\"resize\", handleResize); // Update on resize\n-    return () => window.removeEventListener(\"resize\", handleResize);\n-  }, []);\n-\n-\n-  const handleProductClick = (product) => {\n-    SelectedProduct(product);\n-    localStorage.setItem(\"selectedProduct\", product);\n-    navigate(\"/selectedProduct\");\n-  };\n-\n-  const hanldleProductHid = () => {\n-    setSelectedProduct(null);\n-  };\n-  const nextImage = () => {\n-    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n-  };\n-\n-  // Toggle the selection state of a product\n-  const toggleSelection = (id, currentSelection) => {\n-    // Update the product on the server using PATCH\n-    fetch(`${api}/updateProducts/${id}`, {\n-      method: \"PATCH\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify({ isSelected: !currentSelection }),\n-    })\n-      .then((response) => response.json())\n-      .then((updatedProduct) => {\n-        // Update the local state to reflect the change\n-        setProducts((prevProducts) =>\n-          prevProducts.map((product) =>\n-            product.id === id ? updatedProduct : product\n-          )\n-        );\n-      })\n-      .catch((error) => console.error(\"Error updating product:\", error));\n-  };\n-\n-  // Fetch all products\n-  useEffect(() => {\n-    const fetchProducts = async () => {\n-      const response = await fetch(`${api}/products`);\n-      const data = await response.json();\n-      const filteredBrands = data.filter((product) => \n-        product.brand.some((brand) => brand.name === brandName)\n-      );\n-      setProducts(data);\n-      setProducts(filteredBrands);\n-    };\n-    fetchProducts();\n-  }, [api]);\n-\n-  // // Toggle like/dislike with one button\n-  // const toggleLike = async (product) => {\n-  //   if (!product) return;\n-\n-  //   const liked = product.likedBy.some((user) => user.userId === userId);\n-  //   const endpoint = liked ? \"dislike\" : \"like\";\n-\n-  //   const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n-  //     method: \"PATCH\",\n-  //     headers: { \"Content-Type\": \"application/json\" },\n-  //     body: JSON.stringify({ userId, username }), // Send user info\n-  //   });\n-\n-  //   const updatedProduct = await response.json();\n-\n-  //   // Update state\n-  //   setProducts(\n-  //     products.map((p) =>\n-  //       p.id === product.id ? { ...p, ...updatedProduct } : p\n-  //     )\n-  //   );\n-  //   setSelectedProduct({ ...product, ...updatedProduct });\n-  // };\n-  // ////////////////////////////////////////////////////////\n-\n-  const handleMouseEnter = () => {\n-    if (buttonRef.current) {\n-      buttonRef.current.click();\n-    }\n-  };\n-\n-  // ///////////////////////////////////////////////////////////\n-\n-  const show = (event) => {\n-    setShowDetails((prevShow) => !prevShow);\n-    if (previewRef.current && !previewRef.current.contains(event.target)) {\n-    }\n-  };\n-\n-  // useEffect(() => {\n-  //   // Attach event listener to the whole document\n-  //   document.addEventListener(\"mousedown\", show);\n-  //   return () => {\n-  //     document.removeEventListener(\"mousedown\", show);\n-  //   };\n-  // }, []);\n-  const styles = {\n-    container: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"20px\",\n-      background: \"white\",\n-      maxWidth: \"96%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"20px\",\n-      marginTop: \"50px\",\n-    },\n-    box: {\n-      width: \"250px\",\n-      height: \"250px\",\n-    },\n-\n-    lastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  const mstyles = {\n-    Mcontainer: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"10px\",\n-      background: \"white\",\n-      maxWidth: \"100%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"0px\",\n-      marginTop: \"200px\",\n-    },\n-    mbox: {\n-      width: \"100px\",\n-      height: \"150px\",\n-    },\n-\n-    mlastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  return (\n-    <>\n-      {isMobile ? (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {products.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    <BoxContainer\n-                      key={index}\n-                      categoryOption={categoryShadow[product.category]}\n-                    >\n-                      <div\n-                        key={index}\n-                        style={{\n-                          ...mstyles.mbox,\n-\n-                          // justifyContent:\n-                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                        }}\n-                      >\n-                        {product.images.length > 0 ? (\n-                          <img\n-                            src={product.images[0]} // Display first image only\n-                            alt={product.name}\n-                            style={{\n-                              width: \"135px\",\n-                              height: \"150px\",\n-                              objectFit: \"cover\",\n-                              borderRadius: \"10px\",\n-                              cursor: \"pointer\",\n-                            }}\n-                            onClick={() => {\n-                              setSelectedProduct(product);\n-                              handleProductClick(product);\n-                              show();\n-                            }}\n-                          />\n-                        ) : (\n-                          <p>{t(\"No Image Available\")}</p>\n-                        )}\n-                        <MAddToWishList\n-                        position={position}\n-                        >\n-                          +\n-                        </MAddToWishList>\n-                      </div>\n-\n-                      {/* text */}\n-                      <div style={{ display: \"flex\" }}>\n-                        <div\n-                          className=\"text\"\n-                          style={{\n-                            borderRadius: \"10PX\",\n-                            width: \"100%\",\n-                            height: \"100px\",\n-                            // background:\"red\",\n-                            padding: \"10px\",\n-                          }}\n-                        >\n-                          <Name className=\"name\" fontSize=\"17px\">\n-                            <span\n-                              style={{ color: \"black\" }}\n-                              dangerouslySetInnerHTML={{\n-                                __html: highlightText(product.name, searchTerm),\n-                              }}\n-                            ></span>{\" \"}\n-                          </Name>\n-\n-                          {/* <DescriptionContainer>\n-                         <DescriptionTitle>\n-                           {t(\"Description\")}:\n-                           <DescriptionContent>\n-                             {product.description}\n-                           </DescriptionContent>\n-                         </DescriptionTitle>\n-                       </DescriptionContainer> */}\n-                          <StatusContainer>\n-                            <StatusTitle>\n-                              {t(\"Status\")}:\n-                              <StatusContent>{product.status}</StatusContent>\n-                            </StatusTitle>\n-                          </StatusContainer>\n-                          <Price key={index}>\n-                            {t(\"CFA\")}: {product.price - product.discount}\n-                          </Price>\n-                          {product.discount > 0 && (\n-                            <Discount key={index}>\n-                              {t(\"CFA\")}:<s>{product.price}</s>\n-                              <label\n-                                style={{\n-                                  width: \"40px\",\n-                                  height: \"20px\",\n-                                  background: \"#90EE90\",\n-                                  textAlign: \"center\",\n-                                  borderRadius: \"5px\",\n-                                  marginLeft: \"15px\",\n-                                }}\n-                              >\n-                                -\n-                                {(\n-                                  (product.discount / product.price) *\n-                                  100\n-                                ).toFixed(0)}\n-                                %\n-                              </label>\n-                            </Discount>\n-                          )}\n-                        </div>\n-                      </div>\n-\n-                      <div\n-                        style={{\n-                          background: \"\",\n-                          textAlign: \"center\",\n-                          padding: \"5px\",\n-                        }}\n-                      >\n-                        <MAddtocartButton\n-                        fontSize={fontSize}\n-                          main={product.discount > 0}\n-                          width=\"auto\"\n-                          onClick={() => dispatch(addToCartAPI(product))}\n-                        >\n-                          {t(\"Add To Cart\")}\n-                        </MAddtocartButton>\n-                      </div>\n-                    </BoxContainer>\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-\n-              {selectedProduct && showDetails && selectedProduct && <></>}\n-            </div>\n-          }\n-\n-          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n-        </React.Fragment>\n-      ) : (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={styles.container}>\n-              {filteredProducts.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    {selectedProduct === product && (\n-                      <div\n-                        style={{\n-                          padding: \"20px\",\n-                          margin: \"0 auto\",\n-                          marginTop: \"0px\",\n-                          Width: \"40%\",\n-                          maxHeight: \"100vh\",\n-                          border: \"1px solid green\",\n-                          borderRadius: \"20px\",\n-                          // background:'red',\n-                          boxShadow: \"10px 0px 50px 0px pink\",\n-                        }}\n-                      >\n-                        <div style={{ display: \"flex\" }}>\n-                          <div style={{ background: \"\", width: \"400px\" }}>\n-                            {selectedProduct.images &&\n-                            selectedProduct.images.length > 0 ? (\n-                              <Slider {...style.sliderSettings}>\n-                                {selectedProduct.images.map((imgUrl, index) => (\n-                                  <div key={index}>\n-                                    <img\n-                                      src={imgUrl}\n-                                      alt={`${selectedProduct.title} - Image ${\n-                                        index + 1\n-                                      }`}\n-                                      style={{\n-                                        width: \"400px\",\n-                                        height: \"450px\",\n-                                        borderRadius: \"8px\",\n-                                      }}\n-                                    />\n-                                  </div>\n-                                ))}\n-                              </Slider>\n-                            ) : (\n-                              <p>No images available</p>\n-                            )}\n-                          </div>\n-                          <div>{SelectedProduct}</div>\n-                          <div\n-                            style={{\n-                              background: \"#4ECDC4\",\n-                              width: \"500px\",\n-                              marginLeft: \"30px\",\n-                            }}\n-                          >\n-                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n-                              <CloseButton\n-                                style={{\n-                                  position: \"relative\",\n-                                  left: \"420px\",\n-                                  top: \"-40px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"0px 14px 10px 10px\",\n-                                  width: \"80px\",\n-                                  border: \"1px solid red\",\n-                                  cursor: \"pointer\",\n-                                  fontWeight: \"bold\",\n-                                  fontSize: \"30px\",\n-                                  color: \"red\",\n-                                }}\n-                                onClick={() => hanldleProductHid()}\n-                              >\n-                                {t(\"close\")}\n-                              </CloseButton>\n-                              <h4>\n-                                {\" \"}\n-                                <Link\n-                                  to={`/productsByOwner/${selectedProduct.owner}`}\n-                                >\n-                                  <h4> {selectedProduct.owner}</h4>\n-                                </Link>\n-                              </h4>\n-                              <h1>{selectedProduct.name}</h1>\n-                              <p>{selectedProduct.description}</p>\n-                              <p>\n-                                <strong>Price:</strong> {selectedProduct.price}\n-                              </p>\n-                            </div>\n-                            <div style={style.buttonsContainer}>\n-                              <div>\n-                                <button\n-                                  style={style.buttons}\n-                                  onClick={() =>\n-                                    dispatch(\n-                                      addToCartBeforeLogin(selectedProduct)\n-                                    )\n-                                  }\n-                                >\n-                                  Add To Cart\n-                                </button>\n-                              </div>\n-                              <div>\n-                                <button\n-                                  style={{ ...style.buttons }}\n-                                  onClick={() => dispatch(selectedProduct)}\n-                                >\n-                                  [add To WishList]\n-                                </button>\n-                              </div>\n-                            </div>\n-                          </div>\n-                        </div>\n-                      </div>\n-                    )}\n-                    {product !== selectedProduct && (\n-                      <BoxContainer\n-                        key={index}\n-                        categoryOption={categoryShadow[product.category]}\n-                      >\n-                        <div\n-                          key={index}\n-                          style={{\n-                            ...styles.box,\n-\n-                            // justifyContent:\n-                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                          }}\n-                        >\n-                          {product.images.length > 0 ? (\n-                            <img\n-                              src={product.images[0]} // Display first image only\n-                              alt={product.name}\n-                              style={{\n-                                width: \"250px\",\n-                                height: \"250px\",\n-                                objectFit: \"cover\",\n-                                borderRadius: \"10px\",\n-                                cursor: \"pointer\",\n-                              }}\n-                              onClick={() => {\n-                                setSelectedProduct(product);\n-\n-                                show();\n-                              }}\n-                            />\n-                          ) : (\n-                            <p>{t(\"No Image Available\")}</p>\n-                          )}\n-                        </div>\n-\n-                        {/* text */}\n-                        <div style={{ display: \"flex\" }}>\n-                          <div\n-                            className=\"text\"\n-                            style={{\n-                              borderRadius: \"10PX\",\n-                              width: \"100%\",\n-                              height: \"100px\",\n-                              //  background:\"red\",\n-                              padding: \"10px\",\n-                            }}\n-                          >\n-                            <Name className=\"name\">\n-                              <span\n-                                style={{ color: \"black\" }}\n-                                dangerouslySetInnerHTML={{\n-                                  __html: highlightText(\n-                                    product.name,\n-                                    searchTerm\n-                                  ),\n-                                }}\n-                              ></span>{\" \"}\n-                            </Name>\n-                            <DescriptionContainer>\n-                              <DescriptionTitle>\n-                                {t(\"Description\")}:\n-                                <DescriptionContent>\n-                                  {product.description}\n-                                </DescriptionContent>\n-                              </DescriptionTitle>\n-                            </DescriptionContainer>\n-                            <StatusContainer>\n-                              <StatusTitle>\n-                                {t(\"Status\")}:\n-                                <StatusContent>{product.status}</StatusContent>\n-                              </StatusTitle>\n-                            </StatusContainer>\n-                            <Price key={index}>\n-                              {t(\"CFA\")}: {product.price - product.discount}\n-                            </Price>\n-                            {product.discount > 0 && (\n-                              <Discount key={index}>\n-                                {t(\"CFA\")}:<s>{product.price}</s>\n-                                <label\n-                                  style={{\n-                                    width: \"40px\",\n-                                    height: \"20px\",\n-                                    background: \"#90EE90\",\n-                                    textAlign: \"center\",\n-                                    borderRadius: \"5px\",\n-                                    marginLeft: \"15px\",\n-                                  }}\n-                                >\n-                                  -\n-                                  {(\n-                                    (product.discount / product.price) *\n-                                    100\n-                                  ).toFixed(0)}\n-                                  %\n-                                </label>\n-                              </Discount>\n-                            )}\n-                          </div>\n-\n-                          {/* like and wishlist */}\n-                          <div style={{ background: \"\" }}>\n-                            <div>{/* Product Display */}</div>\n-                            <div>\n-                              <button\n-                                style={{\n-                                  background: \"transparent\",\n-                                  border: \"0px solid orange\",\n-                                  color: \"orange\",\n-                                  padding: \"0px 0px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"10px 10px 10px 10px \",\n-                                  cursor: \"pointer\",\n-                                  fontSize: \"40px\",\n-                                  transition: \"all 0.3s ease\",\n-                                  marginRight: \"auto\",\n-                                  width: \"35px\",\n-                                }}\n-                                onClick={() =>\n-                                  dispatch(addToCartBeforeLogin(product))\n-                                }\n-                              >\n-                                +\n-                              </button>\n-                            </div>\n-                          </div>\n-                        </div>\n-\n-                        <div\n-                          style={{\n-                            background: \"\",\n-                            textAlign: \"center\",\n-                            padding: \"5px\",\n-                          }}\n-                        >\n-                          <AddtocartButton\n-                            main={product.discount > 0}\n-                            onClick={() => dispatch(addToCartAPI(product))}\n-                          >\n-                            {t(\"Add To Cart\")}\n-                          </AddtocartButton>\n-                        </div>\n-                      </BoxContainer>\n-                    )}\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-            </div>\n-          }\n-        </React.Fragment>\n-      )}\n-    </>\n-  );\n-};\n-const style = {\n-  sliderSettings: {\n-    dots: true, // Show navigation dots\n-    infinite: true, // Enable infinite looping\n-    speed: 100, // Transition speed (ms)\n-    slidesToShow: 1, // Show one image at a time\n-    slidesToScroll: 1, // Scroll one image per action\n-    autoplay: true,\n-    autoplaySpeed: 3000, // Autoplay speed (ms)\n-  },\n-  buttonsContainer: {\n-    display: \"flex\",\n-  },\n-  buttons: {\n-    color: \"orangered\",\n-    background: \"none\",\n-    border: \"2px solid orangered\",\n-    margin: \"10px\",\n-    borderRadius: \"10px\",\n-    before: \"+\",\n-  },\n-};\n-\n-export default BrandPage;\n"
                },
                {
                    "date": 1743067215589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,411 +227,28 @@\n     },\n   };\n \n   return (\n-    <>\n-      {isMobile ? (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {products.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    <BoxContainer\n-                      key={index}\n-                      categoryOption={categoryShadow[product.category]}\n-                    >\n-                      <div\n-                        key={index}\n-                        style={{\n-                          ...mstyles.mbox,\n-\n-                          // justifyContent:\n-                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                        }}\n-                      >\n-                        {product.images.length > 0 ? (\n-                          <img\n-                            src={product.images[0]} // Display first image only\n-                            alt={product.name}\n-                            style={{\n-                              width: \"135px\",\n-                              height: \"150px\",\n-                              objectFit: \"cover\",\n-                              borderRadius: \"10px\",\n-                              cursor: \"pointer\",\n-                            }}\n-                            onClick={() => {\n-                              setSelectedProduct(product);\n-                              handleProductClick(product);\n-                              show();\n-                            }}\n-                          />\n-                        ) : (\n-                          <p>{t(\"No Image Available\")}</p>\n-                        )}\n-                        <MAddToWishList position={position}>+</MAddToWishList>\n-                      </div>\n-\n-                      {/* text */}\n-                      <div style={{ display: \"flex\" }}>\n-                        <div\n-                          className=\"text\"\n-                          style={{\n-                            borderRadius: \"10PX\",\n-                            width: \"100%\",\n-                            height: \"100px\",\n-                            // background:\"red\",\n-                            padding: \"10px\",\n-                          }}\n-                        >\n-                          <Name className=\"name\" fontSize=\"17px\">\n-                            <span\n-                              style={{ color: \"black\" }}\n-                              dangerouslySetInnerHTML={{\n-                                __html: highlightText(product.name, searchTerm),\n-                              }}\n-                            ></span>{\" \"}\n-                          </Name>\n-\n-                          {/* <DescriptionContainer>\n-                         <DescriptionTitle>\n-                           {t(\"Description\")}:\n-                           <DescriptionContent>\n-                             {product.description}\n-                           </DescriptionContent>\n-                         </DescriptionTitle>\n-                       </DescriptionContainer> */}\n-                          <StatusContainer>\n-                            <StatusTitle>\n-                              {t(\"Status\")}:\n-                              <StatusContent>{product.status}</StatusContent>\n-                            </StatusTitle>\n-                          </StatusContainer>\n-                          <Price key={index}>\n-                            {t(\"CFA\")}: {product.price - product.discount}\n-                          </Price>\n-                          {product.discount > 0 && (\n-                            <Discount key={index}>\n-                              {t(\"CFA\")}:<s>{product.price}</s>\n-                              <label\n-                                style={{\n-                                  width: \"40px\",\n-                                  height: \"20px\",\n-                                  background: \"#90EE90\",\n-                                  textAlign: \"center\",\n-                                  borderRadius: \"5px\",\n-                                  marginLeft: \"15px\",\n-                                }}\n-                              >\n-                                -\n-                                {(\n-                                  (product.discount / product.price) *\n-                                  100\n-                                ).toFixed(0)}\n-                                %\n-                              </label>\n-                            </Discount>\n-                          )}\n-                        </div>\n-                      </div>\n-\n-                      <div\n-                        style={{\n-                          background: \"\",\n-                          textAlign: \"center\",\n-                          padding: \"5px\",\n-                        }}\n-                      >\n-                        <MAddtocartButton\n-                          fontSize={fontSize}\n-                          main={product.discount > 0}\n-                          width=\"auto\"\n-                          onClick={() => dispatch(addToCartAPI(product))}\n-                        >\n-                          {t(\"Add To Cart\")}\n-                        </MAddtocartButton>\n-                      </div>\n-                    </BoxContainer>\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-\n-              {selectedProduct && showDetails && selectedProduct && <></>}\n-            </div>\n-          }\n-\n-          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n-        </React.Fragment>\n-      ) : (\n-        <React.Fragment>\n-          {\n-            <div className=\"animated-box\" style={styles.container}>\n-              {pro.length > 0 ? (\n-                products.map((product, index) => (\n-                  <div>\n-                    {selectedProduct === product && (\n-                      <div\n-                        style={{\n-                          padding: \"20px\",\n-                          margin: \"0 auto\",\n-                          marginTop: \"0px\",\n-                          Width: \"40%\",\n-                          maxHeight: \"100vh\",\n-                          border: \"1px solid green\",\n-                          borderRadius: \"20px\",\n-                          // background:'red',\n-                          boxShadow: \"10px 0px 50px 0px pink\",\n-                        }}\n-                      >\n-                        <div style={{ display: \"flex\" }}>\n-                          <div style={{ background: \"\", width: \"400px\" }}>\n-                            {selectedProduct.images &&\n-                            selectedProduct.images.length > 0 ? (\n-                              <Slider {...style.sliderSettings}>\n-                                {selectedProduct.images.map((imgUrl, index) => (\n-                                  <div key={index}>\n-                                    <img\n-                                      src={imgUrl}\n-                                      alt={`${selectedProduct.title} - Image ${\n-                                        index + 1\n-                                      }`}\n-                                      style={{\n-                                        width: \"400px\",\n-                                        height: \"450px\",\n-                                        borderRadius: \"8px\",\n-                                      }}\n-                                    />\n-                                  </div>\n-                                ))}\n-                              </Slider>\n-                            ) : (\n-                              <p>No images available</p>\n-                            )}\n-                          </div>\n-                          <div>{SelectedProduct}</div>\n-                          <div\n-                            style={{\n-                              background: \"#4ECDC4\",\n-                              width: \"500px\",\n-                              marginLeft: \"30px\",\n-                            }}\n-                          >\n-                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n-                              <CloseButton\n-                                style={{\n-                                  position: \"relative\",\n-                                  left: \"420px\",\n-                                  top: \"-40px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"0px 14px 10px 10px\",\n-                                  width: \"80px\",\n-                                  border: \"1px solid red\",\n-                                  cursor: \"pointer\",\n-                                  fontWeight: \"bold\",\n-                                  fontSize: \"30px\",\n-                                  color: \"red\",\n-                                }}\n-                                onClick={() => hanldleProductHid()}\n-                              >\n-                                {t(\"close\")}\n-                              </CloseButton>\n-                              <h4>\n-                                {\" \"}\n-                                <Link\n-                                  to={`/productsByOwner/${selectedProduct.owner}`}\n-                                >\n-                                  <h4> {selectedProduct.owner}</h4>\n-                                </Link>\n-                              </h4>\n-                              <h1>{selectedProduct.name}</h1>\n-                              <p>{selectedProduct.description}</p>\n-                              <p>\n-                                <strong>Price:</strong> {selectedProduct.price}\n-                              </p>\n-                            </div>\n-                            <div style={style.buttonsContainer}>\n-                              <div>\n-                                <button\n-                                  style={style.buttons}\n-                                  onClick={() =>\n-                                    dispatch(\n-                                      addToCartBeforeLogin(selectedProduct)\n-                                    )\n-                                  }\n-                                >\n-                                  Add To Cart\n-                                </button>\n-                              </div>\n-                              <div>\n-                                <button\n-                                  style={{ ...style.buttons }}\n-                                  onClick={() => dispatch(selectedProduct)}\n-                                >\n-                                  [add To WishList]\n-                                </button>\n-                              </div>\n-                            </div>\n-                          </div>\n-                        </div>\n-                      </div>\n-                    )}\n-                    {product !== selectedProduct && (\n-                      <BoxContainer\n-                        key={index}\n-                        categoryOption={categoryShadow[product.category]}\n-                      >\n-                        <div\n-                          key={index}\n-                          style={{\n-                            ...styles.box,\n-\n-                            // justifyContent:\n-                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n-                          }}\n-                        >\n-                          {product.images.length > 0 ? (\n-                            <img\n-                              src={product.images[0]} // Display first image only\n-                              alt={product.name}\n-                              style={{\n-                                width: \"250px\",\n-                                height: \"250px\",\n-                                objectFit: \"cover\",\n-                                borderRadius: \"10px\",\n-                                cursor: \"pointer\",\n-                              }}\n-                              onClick={() => {\n-                                setSelectedProduct(product);\n-\n-                                show();\n-                              }}\n-                            />\n-                          ) : (\n-                            <p>{t(\"No Image Available\")}</p>\n-                          )}\n-                        </div>\n-\n-                        {/* text */}\n-                        <div style={{ display: \"flex\" }}>\n-                          <div\n-                            className=\"text\"\n-                            style={{\n-                              borderRadius: \"10PX\",\n-                              width: \"100%\",\n-                              height: \"100px\",\n-                              //  background:\"red\",\n-                              padding: \"10px\",\n-                            }}\n-                          >\n-                            <Name className=\"name\">\n-                              <span\n-                                style={{ color: \"black\" }}\n-                                dangerouslySetInnerHTML={{\n-                                  __html: highlightText(\n-                                    product.name,\n-                                    searchTerm\n-                                  ),\n-                                }}\n-                              ></span>{\" \"}\n-                            </Name>\n-                            <DescriptionContainer>\n-                              <DescriptionTitle>\n-                                {t(\"Description\")}:\n-                                <DescriptionContent>\n-                                  {product.description}\n-                                </DescriptionContent>\n-                              </DescriptionTitle>\n-                            </DescriptionContainer>\n-                            <StatusContainer>\n-                              <StatusTitle>\n-                                {t(\"Status\")}:\n-                                <StatusContent>{product.status}</StatusContent>\n-                              </StatusTitle>\n-                            </StatusContainer>\n-                            <Price key={index}>\n-                              {t(\"CFA\")}: {product.price - product.discount}\n-                            </Price>\n-                            {product.discount > 0 && (\n-                              <Discount key={index}>\n-                                {t(\"CFA\")}:<s>{product.price}</s>\n-                                <label\n-                                  style={{\n-                                    width: \"40px\",\n-                                    height: \"20px\",\n-                                    background: \"#90EE90\",\n-                                    textAlign: \"center\",\n-                                    borderRadius: \"5px\",\n-                                    marginLeft: \"15px\",\n-                                  }}\n-                                >\n-                                  -\n-                                  {(\n-                                    (product.discount / product.price) *\n-                                    100\n-                                  ).toFixed(0)}\n-                                  %\n-                                </label>\n-                              </Discount>\n-                            )}\n-                          </div>\n-\n-                          {/* like and wishlist */}\n-                          <div style={{ background: \"\" }}>\n-                            <div>{/* Product Display */}</div>\n-                            <div>\n-                              <button\n-                                style={{\n-                                  background: \"transparent\",\n-                                  border: \"0px solid orange\",\n-                                  color: \"orange\",\n-                                  padding: \"0px 0px\",\n-                                  background: \"none\",\n-                                  borderRadius: \"10px 10px 10px 10px \",\n-                                  cursor: \"pointer\",\n-                                  fontSize: \"40px\",\n-                                  transition: \"all 0.3s ease\",\n-                                  marginRight: \"auto\",\n-                                  width: \"35px\",\n-                                }}\n-                                onClick={() =>\n-                                  dispatch(addToCartBeforeLogin(product))\n-                                }\n-                              >\n-                                +\n-                              </button>\n-                            </div>\n-                          </div>\n-                        </div>\n-\n-                        <div\n-                          style={{\n-                            background: \"\",\n-                            textAlign: \"center\",\n-                            padding: \"5px\",\n-                          }}\n-                        >\n-                          <AddtocartButton\n-                            main={product.discount > 0}\n-                            onClick={() => dispatch(addToCartAPI(product))}\n-                          >\n-                            {t(\"Add To Cart\")}\n-                          </AddtocartButton>\n-                        </div>\n-                      </BoxContainer>\n-                    )}\n-                  </div>\n-                ))\n-              ) : (\n-                <p>{t(\"Loading...\")}</p>\n-              )}\n-            </div>\n-          }\n-        </React.Fragment>\n-      )}\n-    </>\n+    <div>\n+          <div>\n+            <Box\n+              Mobject={filteredProducts}\n+              Dobject={filteredProducts}\n+              selectedDProduct={selectedProduct}\n+              toggleLike={toggleLike}\n+              show={show}\n+              handleProductClick={handleProductClick}\n+              hanldleProductHid={handleProductClick}\n+              isMobile={isMobile}\n+              setSelectedProduct={setSelectedProduct}\n+              selectedProduct={selectedProduct}\n+              showDetails={showDetails}\n+              position={position}\n+              fontSize={fontSize}\n+              highlightText={highlightText}\n+            />\n+          </div>\n+        </div>\n   );\n };\n const style = {\n   sliderSettings: {\n"
                },
                {
                    "date": 1743067223731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,28 +249,6 @@\n           </div>\n         </div>\n   );\n };\n-const style = {\n-  sliderSettings: {\n-    dots: true, // Show navigation dots\n-    infinite: true, // Enable infinite looping\n-    speed: 100, // Transition speed (ms)\n-    slidesToShow: 1, // Show one image at a time\n-    slidesToScroll: 1, // Scroll one image per action\n-    autoplay: true,\n-    autoplaySpeed: 3000, // Autoplay speed (ms)\n-  },\n-  buttonsContainer: {\n-    display: \"flex\",\n-  },\n-  buttons: {\n-    color: \"orangered\",\n-    background: \"none\",\n-    border: \"2px solid orangered\",\n-    margin: \"10px\",\n-    borderRadius: \"10px\",\n-    before: \"+\",\n-  },\n-};\n \n export default BrandPage;\n"
                },
                {
                    "date": 1743067252063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n   return (\n     <div>\n           <div>\n             <Box\n-              Mobject={filteredProducts}\n+              Mobject={pro}\n               Dobject={filteredProducts}\n               selectedDProduct={selectedProduct}\n               toggleLike={toggleLike}\n               show={show}\n"
                },
                {
                    "date": 1743067262372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,10 +230,10 @@\n   return (\n     <div>\n           <div>\n             <Box\n-              Mobject={pro}\n-              Dobject={filteredProducts}\n+              Mobject={products}\n+              Dobject={pr}\n               selectedDProduct={selectedProduct}\n               toggleLike={toggleLike}\n               show={show}\n               handleProductClick={handleProductClick}\n"
                },
                {
                    "date": 1743067284339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,11 +231,11 @@\n     <div>\n           <div>\n             <Box\n               Mobject={products}\n-              Dobject={pr}\n+              Dobject={products}\n               selectedDProduct={selectedProduct}\n-              toggleLike={toggleLike}\n+              // toggleLike={toggleLike}\n               show={show}\n               handleProductClick={handleProductClick}\n               hanldleProductHid={handleProductClick}\n               isMobile={isMobile}\n"
                },
                {
                    "date": 1743067290486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { useTranslation } from \"react-i18next\";\n import Slider from \"react-slick\";\n import { useNavigate, useParams, Link } from \"react-router-dom\";\n import \"../translations/i18n\";\n+\n import {\n   BoxContainer,\n   AddtocartButton,\n   MAddtocartButton,\n"
                },
                {
                    "date": 1743067297150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useTranslation } from \"react-i18next\";\n import Slider from \"react-slick\";\n import { useNavigate, useParams, Link } from \"react-router-dom\";\n import \"../translations/i18n\";\n-import Box\n+import Box \n import {\n   BoxContainer,\n   AddtocartButton,\n   MAddtocartButton,\n"
                },
                {
                    "date": 1743068596369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n               selectedDProduct={selectedProduct}\n               // toggleLike={toggleLike}\n               show={show}\n               handleProductClick={handleProductClick}\n-              hanldleProductHid={handleProductClick}\n+              hanldleProductHid={handleProduct}\n               isMobile={isMobile}\n               setSelectedProduct={setSelectedProduct}\n               selectedProduct={selectedProduct}\n               showDetails={showDetails}\n"
                }
            ],
            "date": 1739464809871,
            "name": "Commit-0",
            "content": "mport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst BrandPage = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [brand, setBrand] = useState(null);\n\n  useEffect(() => {\n    fetch(http://localhost:5000/brands/${id})\n      .then((res) => res.json())\n      .then((data) => setBrand(data))\n      .catch((error) => console.error(\"Error fetching brand:\", error));\n  }, [id]);\n\n  if (!brand) return <h2>Loading...</h2>;\n\n  return (\n    <div style={styles.container}>\n      <h1>{brand.name} Products</h1>\n      <button onClick={() => navigate(-1)} style={styles.backButton}>Go Back</button>\n      <div style={styles.productsGrid}>\n        {brand.products.map((product) => (\n          <div key={product.id} style={styles.productBox}>\n            <img src={product.image} alt={product.name} style={styles.image} />\n            <p>{product.name}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  container: { width: \"80%\", margin: \"auto\", textAlign: \"center\" },\n  backButton: { marginBottom: \"15px\", padding: \"10px\", cursor: \"pointer\" },\n  productsGrid: { display: \"flex\", flexWrap: \"wrap\", gap: \"15px\", justifyContent: \"center\" },\n  productBox: {\n    width: \"180px\",\n    height: \"200px\",\n    backgroundColor: \"#f5f5f5\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"8px\",\n    padding: \"10px\",\n    boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\"\n  },\n  image: { width: \"100px\", height: \"100px\", objectFit: \"contain\", marginBottom: \"10px\" }\n};\n\nexport default BrandPage;"
        }
    ]
}