{
    "sourceFile": "src/components/pages/selectedProductsDesktop.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1743502894048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743502902657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n   color: ${(props) => (props.active ? \"white\" : \"black\")};\n   cursor: pointer;\n \n   &:hover {\n-    background: ${(props) => (props.active ? \"darkorange\" : \"lightgray\")};\n+    background: `${(props) => (props.active ? \"darkorange\" : \"lightgray\")};\n   }\n `;\n \n const TabContent = styled.div`\n"
                },
                {
                    "date": 1743502913312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n   color: ${(props) => (props.active ? \"white\" : \"black\")};\n   cursor: pointer;\n \n   &:hover {\n-    background: `${(props) => (props.active ? \"darkorange\" : \"lightgray\")};\n+    background: ${(props) => (props.active ? \"darkorange\" : \"lightgray\")};\n   }\n `;\n \n const TabContent = styled.div`\n"
                },
                {
                    "date": 1743502936526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             {selectedProduct.images?.length > 0 ? (\n               <Slider {...sliderSettings}>\n                 {selectedProduct.images.map((imgUrl, index) => (\n                   <ImageWrapper key={index}>\n-                    <ProductImage src={imgUrl} alt={Product Image ${index + 1}} />\n+                    <ProductImage src={imgUrl} alt=`{Product Image ${index + 1}} />\n                   </ImageWrapper>\n                 ))}\n               </Slider>\n             ) : (\n"
                },
                {
                    "date": 1743502942514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             {selectedProduct.images?.length > 0 ? (\n               <Slider {...sliderSettings}>\n                 {selectedProduct.images.map((imgUrl, index) => (\n                   <ImageWrapper key={index}>\n-                    <ProductImage src={imgUrl} alt=`{Product Image ${index + 1}} />\n+                    <ProductImage src={imgUrl} alt={`Product Image ${index + 1}`} />\n                   </ImageWrapper>\n                 ))}\n               </Slider>\n             ) : (\n"
                },
                {
                    "date": 1743502955145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \n           <DetailsSection>\n             <SellerInfo>\n               Seller:{\" \"}\n-              <SellerLink to={/productsByOwner/${selectedProduct.owner}}>\n+              <SellerLink to={`/productsByOwner/${selectedProduct.owner}}>\n                 {selectedProduct.owner}\n               </SellerLink>\n             </SellerInfo>\n \n"
                },
                {
                    "date": 1743503641187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   return (\n     <ModalOverlay>\n       <ProductContainer>\n         {/* Close Button */}\n-        <CloseButton onClick={han}>X</CloseButton>\n+        <CloseButton onClick={handle}>X</CloseButton>\n \n         {/* Product Image & Details */}\n         <ContentWrapper>\n           <ImageSection>\n"
                },
                {
                    "date": 1743521476533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   if (!selectedProduct) {\n     return <LoadingMessage>Loading product...</LoadingMessage>;\n \n   }\n-const text = lor  \n+const text = lore  \n   const displayText = isExpanded ? text : text.slice(0, maxLength);\n   \n   // Slider settings\n   const sliderSettings = {\n"
                }
            ],
            "date": 1743502894048,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport Slider from \"react-slick\";\nimport { useDispatch } from \"react-redux\";\nimport { addToCartBeforeLogin } from \"../../cartAction\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst SelectedProduct = ({ selectedProduct, handleClose }) => {\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState(\"details\"); // Tabs state\n\n  if (!selectedProduct) {\n    return <LoadingMessage>Loading product...</LoadingMessage>;\n  }\n\n  // Slider settings\n  const sliderSettings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 3000,\n  };\n\n  return (\n    <ModalOverlay>\n      <ProductContainer>\n        {/* Close Button */}\n        <CloseButton onClick={handleClose}>X</CloseButton>\n\n        {/* Product Image & Details */}\n        <ContentWrapper>\n          <ImageSection>\n            {selectedProduct.images?.length > 0 ? (\n              <Slider {...sliderSettings}>\n                {selectedProduct.images.map((imgUrl, index) => (\n                  <ImageWrapper key={index}>\n                    <ProductImage src={imgUrl} alt={Product Image ${index + 1}} />\n                  </ImageWrapper>\n                ))}\n              </Slider>\n            ) : (\n              <NoImage>No images available</NoImage>\n            )}\n          </ImageSection>\n\n          <DetailsSection>\n            <SellerInfo>\n              Seller:{\" \"}\n              <SellerLink to={/productsByOwner/${selectedProduct.owner}}>\n                {selectedProduct.owner}\n              </SellerLink>\n            </SellerInfo>\n\n            <ProductName>{selectedProduct.name}</ProductName>\n            <ProductPrice>Price: ${selectedProduct.price}</ProductPrice>\n\n            {/* Display Rating Above Add to Cart Button */}\n            {selectedProduct.rating && <Rating>‚≠ê {selectedProduct.rating} / 5</Rating>}\n\n            <ButtonGroup>\n              <ActionButton onClick={() => dispatch(addToCartBeforeLogin(selectedProduct))}>\n                Add To Cart\n              </ActionButton>\n              <ActionButton secondary>Add To Wishlist</ActionButton>\n            </ButtonGroup>\n          </DetailsSection>\n        </ContentWrapper>\n\n        {/* Tabs for Product Info */}\n        <Tabs>\n          <Tab active={activeTab === \"details\"} onClick={() => setActiveTab(\"details\")}>\n            Product Details\n          </Tab>\n          <Tab active={activeTab === \"seller\"} onClick={() => setActiveTab(\"seller\")}>\n            Seller Info\n          </Tab>\n          <Tab active={activeTab === \"description\"} onClick={() => setActiveTab(\"description\")}>\n            Description\n          </Tab>\n        </Tabs>\n\n        <TabContent>\n          {activeTab === \"details\" && <p><strong>Stock:</strong> {selectedProduct.stock} available</p>}\n          {activeTab === \"seller\" && <p><strong>Contact:</strong> {selectedProduct.phoneNumber}</p>}\n          {activeTab === \"description\" && <p>{selectedProduct.description}</p>}\n        </TabContent>\n      </ProductContainer>\n    </ModalOverlay>\n  );\n};\n\nexport default SelectedProduct;\n\n//\n// Styled Components\n//\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ProductContainer = styled.div`\n  background: white;\n  width: 80%;\n  max-width: 900px;\n  padding: 20px;\n  border-radius: 10px;\n  position: relative;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  background: red;\n  color: white;\n  border: none;\n  font-size: 18px;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  cursor: pointer;\n\n  &:hover {\n    background: darkred;\n  }\n`;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nconst ImageSection = styled.div`\n  width: 100%;\n  max-width: 400px;\n  margin-bottom: 20px;\n\n  @media (min-width: 768px) {\n    width: 50%;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ProductImage = styled.img`\n  width: 100%;\n  border-radius: 8px;\n`;\n\nconst NoImage = styled.p`\n  text-align: center;\n  font-size: 14px;\n  color: gray;\n`;\n\nconst DetailsSection = styled.div`\n  flex: 1;\n  padding: 20px;\n`;\n\nconst SellerInfo = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nconst SellerLink = styled(Link)`\n  color: blue;\n  text-decoration: none;\n  font-weight: bold;\n`;\n\nconst ProductName = styled.h1`\n  font-size: 24px;\n  margin: 10px 0;\n`;\n\nconst ProductPrice = styled.p`\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst Rating = styled.div`\n  font-size: 20px;\n  margin: 10px 0;\n  color: gold;\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 10px 20px;\n  border: 2px solid ${(props) => (props.secondary ? \"gray\" : \"orangered\")};\n  background: ${(props) => (props.secondary ? \"none\" : \"orangered\")};\n  color: ${(props) => (props.secondary ? \"gray\" : \"white\")};\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n\n  &:hover {\n    background: ${(props) => (props.secondary ? \"lightgray\" : \"darkorange\")};\n  }\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n  border-bottom: 2px solid lightgray;\n`;\n\nconst Tab = styled.button`\n  flex: 1;\n  padding: 10px;\n  font-size: 16px;\n  border: none;\n  background: ${(props) => (props.active ? \"orangered\" : \"none\")};\n  color: ${(props) => (props.active ? \"white\" : \"black\")};\n  cursor: pointer;\n\n  &:hover {\n    background: ${(props) => (props.active ? \"darkorange\" : \"lightgray\")};\n  }\n`;\n\nconst TabContent = styled.div`\n  padding: 20px;\n  font-size: 16px;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  font-size: 18px;\n  color: gray;\n  padding: 20px;\n`;"
        }
    ]
}