{
    "sourceFile": "src/components/pages/boxes.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1743040093367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743040128004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,181 +47,10 @@\n   highlightText,\n   selectedCategory,\n   Fortop,\n }) => {\n-  const [currentIndex, setCurrentIndex] = useState(0);\n-  const [products, setProducts] = useState(null);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const [selectedProduct, setSelectedProduct] = useState(null);\n-  const [selectedDProduct, setDSelectedProduct] = useState(null);\n-  const [selected, setSelected] = useState(false);\n-  const userId = localStorage.getItem(\"userId\");\n-  const [showDetails, setShowDetails] = useState(true);\n-  const username = localStorage.getItem(\"username\");\n-  const previewRef = useRef(null);\n-  const { t, i18n } = useTranslation();\n-  const buttonRef = useRef(null);\n-  const position = positions[i18n.language] || position.en;\n-  const fontSize = fontSizes[i18n.language] || fontSize.en;\n+ \n \n-  const dispatch = useDispatch(); // Function to check screen size\n-\n-  // Function to check screen size\n-  const handleResize = () => {\n-    setIsMobile(window.innerWidth <= 1000);\n-  };\n-\n-  useEffect(() => {\n-    handleResize(); // Initial check\n-    window.addEventListener(\"resize\", handleResize); // Update on resize\n-    return () => window.removeEventListener(\"resize\", handleResize);\n-  }, []);\n-\n-  const navigate = useNavigate();\n-\n-  const handleProductClick = (product) => {\n-    SelectedProduct(product);\n-    localStorage.setItem(\"selectedProduct\", product);\n-    navigate(\"/selectedProduct\");\n-  };\n-\n-  const hanldleProductHid = () => {\n-    setSelectedProduct(null);\n-  };\n-  const nextImage = () => {\n-    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n-  };\n-\n-  // Toggle the selection state of a product\n-  const toggleSelection = (id, currentSelection) => {\n-    // Update the product on the server using PATCH\n-    fetch(`${api}/updateProducts/${id}`, {\n-      method: \"PATCH\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify({ isSelected: !currentSelection }),\n-    })\n-      .then((response) => response.json())\n-      .then((updatedProduct) => {\n-        // Update the local state to reflect the change\n-        setProducts((prevProducts) =>\n-          prevProducts.map((product) =>\n-            product.id === id ? updatedProduct : product\n-          )\n-        );\n-      })\n-      .catch((error) => console.error(\"Error updating product:\", error));\n-  };\n-\n-  // Fetch all products\n-  useEffect(() => {\n-    const fetchProducts = async () => {\n-      const response = await fetch(`${api}/products`);\n-      const data = await response.json();\n-      setProducts(data);\n-    };\n-    fetchProducts();\n-  }, [api]);\n-\n-  // Toggle like/dislike with one button\n-  const toggleLike = async (product) => {\n-    if (!product) return;\n-\n-    const liked = product.likedBy.some((user) => user.userId === userId);\n-    const endpoint = liked ? \"dislike\" : \"like\";\n-\n-    const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n-      method: \"PATCH\",\n-      headers: { \"Content-Type\": \"application/json\" },\n-      body: JSON.stringify({ userId, username }), // Send user info\n-    });\n-\n-    const updatedProduct = await response.json();\n-\n-    // Update state\n-    setProducts(\n-      products.map((p) =>\n-        p.id === product.id ? { ...p, ...updatedProduct } : p\n-      )\n-    );\n-    setSelectedProduct({ ...product, ...updatedProduct });\n-  };\n-  // ////////////////////////////////////////////////////////\n-\n-  const handleMouseEnter = () => {\n-    if (buttonRef.current) {\n-      buttonRef.current.click();\n-    }\n-  };\n-\n-  // ///////////////////////////////////////////////////////////\n-\n-  const show = (event) => {\n-    setShowDetails((prevShow) => !prevShow);\n-    if (previewRef.current && !previewRef.current.contains(event.target)) {\n-    }\n-  };\n-\n-  // useEffect(() => {\n-  //   // Attach event listener to the whole document\n-  //   document.addEventListener(\"mousedown\", show);\n-  //   return () => {\n-  //     document.removeEventListener(\"mousedown\", show);\n-  //   };\n-  // }, []);\n-  const styles = {\n-    container: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"20px\",\n-      background: \"white\",\n-      maxWidth: \"96%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"20px\",\n-      marginTop: \"50px\",\n-    },\n-    box: {\n-      width: \"250px\",\n-      height: \"250px\",\n-    },\n-\n-    lastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n-  const mstyles = {\n-    Mcontainer: {\n-      display: \"flex\",\n-      flexDirection: \"row\",\n-      flexWrap: \"wrap\",\n-      justifyContent: \"center\",\n-      alignItems: \"center\",\n-      gap: \"10px\",\n-      background: \"white\",\n-      maxWidth: \"100%\", // Prevents full width spread\n-      margin: \"auto\", // Centers the whole container\n-      padding: \"0px\",\n-      marginTop: \"200px\",\n-    },\n-    mbox: {\n-      width: \"100px\",\n-      height: \"150px\",\n-    },\n-\n-    mlastBox: {\n-      background: \"blue\",\n-\n-      // Pushes last box to the left\n-    },\n-  };\n-\n   return (\n     <>\n       {isMobile ? (\n         <React.Fragment>\n"
                },
                {
                    "date": 1743040175674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       {isMobile ? (\n         <React.Fragment>\n           {\n             <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {filteredProducts.length > 0 ? (\n+              {.length > 0 ? (\n                 filteredProducts.map((product, index) => (\n                   <div>\n                     <BoxContainer\n                       key={index}\n"
                },
                {
                    "date": 1743040196694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       {isMobile ? (\n         <React.Fragment>\n           {\n             <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {{Ar}.length > 0 ? (\n+              {{Arr}.length > 0 ? (\n                 filteredProducts.map((product, index) => (\n                   <div>\n                     <BoxContainer\n                       key={index}\n"
                },
                {
                    "date": 1743040207111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       {isMobile ? (\n         <React.Fragment>\n           {\n             <div className=\"animated-box\" style={mstyles.Mcontainer}>\n-              {{obj}.length > 0 ? (\n+              {{object}.length > 0 ? (\n                 filteredProducts.map((product, index) => (\n                   <div>\n                     <BoxContainer\n                       key={index}\n"
                }
            ],
            "date": 1743040093367,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useRef } from \"react\";\nimport \"./products.css\";\nimport { AuthContext } from \"../../AuthContext\";\nimport { useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addToCartBeforeLogin, addToCartAPI } from \"../../cartAction\";\nimport { addToWishListAPI } from \"../../wishlistAction\";\nimport styled, { keyframes } from \"styled-components\";\nimport { useTranslation } from \"react-i18next\";\nimport Slider from \"react-slick\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport \"../translations/i18n\";\nimport {\n  BoxContainer,\n  AddtocartButton,\n  MAddtocartButton,\n  MAddToWishList,\n  Price,\n  Discount,\n  DescriptionContainer,\n  DescriptionTitle,\n  DescriptionContent,\n  StatusContainer,\n  StatusContent,\n  StatusTitle,\n  CloseButton,\n  Name,\n  positions,\n  fontSizes,\n  categoryShadow,\n} from \"./styledComponents\";\nimport { addToCart, removeFromCart } from \"../../cartSlice\";\nimport e from \"cors\";\n\nconst Products = ({\n  api,\n  loading,\n  add,\n  images,\n  filteredProducts,\n  SelectedProduct,\n  addToCart,\n  addToWishList,\n  handleShowAlert,\n  showAlert,\n  searchTerm,\n  highlightText,\n  selectedCategory,\n  Fortop,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [products, setProducts] = useState(null);\n  const [isMobile, setIsMobile] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [selectedDProduct, setDSelectedProduct] = useState(null);\n  const [selected, setSelected] = useState(false);\n  const userId = localStorage.getItem(\"userId\");\n  const [showDetails, setShowDetails] = useState(true);\n  const username = localStorage.getItem(\"username\");\n  const previewRef = useRef(null);\n  const { t, i18n } = useTranslation();\n  const buttonRef = useRef(null);\n  const position = positions[i18n.language] || position.en;\n  const fontSize = fontSizes[i18n.language] || fontSize.en;\n\n  const dispatch = useDispatch(); // Function to check screen size\n\n  // Function to check screen size\n  const handleResize = () => {\n    setIsMobile(window.innerWidth <= 1000);\n  };\n\n  useEffect(() => {\n    handleResize(); // Initial check\n    window.addEventListener(\"resize\", handleResize); // Update on resize\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const navigate = useNavigate();\n\n  const handleProductClick = (product) => {\n    SelectedProduct(product);\n    localStorage.setItem(\"selectedProduct\", product);\n    navigate(\"/selectedProduct\");\n  };\n\n  const hanldleProductHid = () => {\n    setSelectedProduct(null);\n  };\n  const nextImage = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n  };\n\n  // Toggle the selection state of a product\n  const toggleSelection = (id, currentSelection) => {\n    // Update the product on the server using PATCH\n    fetch(`${api}/updateProducts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ isSelected: !currentSelection }),\n    })\n      .then((response) => response.json())\n      .then((updatedProduct) => {\n        // Update the local state to reflect the change\n        setProducts((prevProducts) =>\n          prevProducts.map((product) =>\n            product.id === id ? updatedProduct : product\n          )\n        );\n      })\n      .catch((error) => console.error(\"Error updating product:\", error));\n  };\n\n  // Fetch all products\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const response = await fetch(`${api}/products`);\n      const data = await response.json();\n      setProducts(data);\n    };\n    fetchProducts();\n  }, [api]);\n\n  // Toggle like/dislike with one button\n  const toggleLike = async (product) => {\n    if (!product) return;\n\n    const liked = product.likedBy.some((user) => user.userId === userId);\n    const endpoint = liked ? \"dislike\" : \"like\";\n\n    const response = await fetch(`${api}/products/${product.id}/${endpoint}`, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId, username }), // Send user info\n    });\n\n    const updatedProduct = await response.json();\n\n    // Update state\n    setProducts(\n      products.map((p) =>\n        p.id === product.id ? { ...p, ...updatedProduct } : p\n      )\n    );\n    setSelectedProduct({ ...product, ...updatedProduct });\n  };\n  // ////////////////////////////////////////////////////////\n\n  const handleMouseEnter = () => {\n    if (buttonRef.current) {\n      buttonRef.current.click();\n    }\n  };\n\n  // ///////////////////////////////////////////////////////////\n\n  const show = (event) => {\n    setShowDetails((prevShow) => !prevShow);\n    if (previewRef.current && !previewRef.current.contains(event.target)) {\n    }\n  };\n\n  // useEffect(() => {\n  //   // Attach event listener to the whole document\n  //   document.addEventListener(\"mousedown\", show);\n  //   return () => {\n  //     document.removeEventListener(\"mousedown\", show);\n  //   };\n  // }, []);\n  const styles = {\n    container: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      gap: \"20px\",\n      background: \"white\",\n      maxWidth: \"96%\", // Prevents full width spread\n      margin: \"auto\", // Centers the whole container\n      padding: \"20px\",\n      marginTop: \"50px\",\n    },\n    box: {\n      width: \"250px\",\n      height: \"250px\",\n    },\n\n    lastBox: {\n      background: \"blue\",\n\n      // Pushes last box to the left\n    },\n  };\n\n  const mstyles = {\n    Mcontainer: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      gap: \"10px\",\n      background: \"white\",\n      maxWidth: \"100%\", // Prevents full width spread\n      margin: \"auto\", // Centers the whole container\n      padding: \"0px\",\n      marginTop: \"200px\",\n    },\n    mbox: {\n      width: \"100px\",\n      height: \"150px\",\n    },\n\n    mlastBox: {\n      background: \"blue\",\n\n      // Pushes last box to the left\n    },\n  };\n\n  return (\n    <>\n      {isMobile ? (\n        <React.Fragment>\n          {\n            <div className=\"animated-box\" style={mstyles.Mcontainer}>\n              {filteredProducts.length > 0 ? (\n                filteredProducts.map((product, index) => (\n                  <div>\n                    <BoxContainer\n                      key={index}\n                      categoryOption={categoryShadow[product.category]}\n                    >\n                      <div\n                        key={index}\n                        style={{\n                          ...mstyles.mbox,\n\n                          // justifyContent:\n                          // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n                        }}\n                      >\n                        {product.images.length > 0 ? (\n                          <img\n                            src={product.images[0]} // Display first image only\n                            alt={product.name}\n                            style={{\n                              width: \"135px\",\n                              height: \"150px\",\n                              objectFit: \"cover\",\n                              borderRadius: \"10px\",\n                              cursor: \"pointer\",\n                            }}\n                            onClick={() => {\n                              setSelectedProduct(product);\n                              handleProductClick(product);\n                              show();\n                            }}\n                          />\n                        ) : (\n                          <p>{t(\"No Image Available\")}</p>\n                        )}\n                        <MAddToWishList position={position}>+</MAddToWishList>\n                      </div>\n\n                      {/* text */}\n                      <div style={{ display: \"flex\" }}>\n                        <div\n                          className=\"text\"\n                          style={{\n                            borderRadius: \"10PX\",\n                            width: \"100%\",\n                            height: \"100px\",\n                            // background:\"red\",\n                            padding: \"10px\",\n                          }}\n                        >\n                          <Name className=\"name\" fontSize=\"17px\">\n                            <span\n                              style={{ color: \"black\" }}\n                              dangerouslySetInnerHTML={{\n                                __html: highlightText(product.name, searchTerm),\n                              }}\n                            ></span>{\" \"}\n                          </Name>\n\n                          {/* <DescriptionContainer>\n                         <DescriptionTitle>\n                           {t(\"Description\")}:\n                           <DescriptionContent>\n                             {product.description}\n                           </DescriptionContent>\n                         </DescriptionTitle>\n                       </DescriptionContainer> */}\n                          <StatusContainer>\n                            <StatusTitle>\n                              {t(\"Status\")}:\n                              <StatusContent>{product.status}</StatusContent>\n                            </StatusTitle>\n                          </StatusContainer>\n                          <Price key={index}>\n                            {t(\"CFA\")}: {product.price - product.discount}\n                          </Price>\n                          {product.discount > 0 && (\n                            <Discount key={index}>\n                              {t(\"CFA\")}:<s>{product.price}</s>\n                              <label\n                                style={{\n                                  width: \"40px\",\n                                  height: \"20px\",\n                                  background: \"#90EE90\",\n                                  textAlign: \"center\",\n                                  borderRadius: \"5px\",\n                                  marginLeft: \"15px\",\n                                }}\n                              >\n                                -\n                                {(\n                                  (product.discount / product.price) *\n                                  100\n                                ).toFixed(0)}\n                                %\n                              </label>\n                            </Discount>\n                          )}\n                        </div>\n                      </div>\n\n                      <div\n                        style={{\n                          background: \"\",\n                          textAlign: \"center\",\n                          padding: \"5px\",\n                        }}\n                      >\n                        <MAddtocartButton\n                          fontSize={fontSize}\n                          main={product.discount > 0}\n                          width=\"auto\"\n                          onClick={() => dispatch(addToCartAPI(product))}\n                        >\n                          {t(\"Add To Cart\")}\n                        </MAddtocartButton>\n                      </div>\n                    </BoxContainer>\n                  </div>\n                ))\n              ) : (\n                <p>{t(\"Loading...\")}</p>\n              )}\n\n              {selectedProduct && showDetails && selectedProduct && <></>}\n            </div>\n          }\n\n          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          {\n            <div className=\"animated-box\" style={styles.container}>\n              {filteredProducts.length > 0 ? (\n                filteredProducts.map((product, index) => (\n                  <div>\n                    {selectedProduct === product && (\n                      <div\n                        style={{\n                          padding: \"20px\",\n                          margin: \"0 auto\",\n                          marginTop: \"0px\",\n                          Width: \"40%\",\n                          maxHeight: \"100vh\",\n                          border: \"1px solid green\",\n                          borderRadius: \"20px\",\n                          // background:'red',\n                          boxShadow: \"10px 0px 50px 0px pink\",\n                        }}\n                      >\n                        <div style={{ display: \"flex\" }}>\n                          <div style={{ background: \"\", width: \"400px\" }}>\n                            {selectedProduct.images &&\n                            selectedProduct.images.length > 0 ? (\n                              <Slider {...style.sliderSettings}>\n                                {selectedProduct.images.map((imgUrl, index) => (\n                                  <div key={index}>\n                                    <img\n                                      src={imgUrl}\n                                      alt={`${selectedProduct.title} - Image ${\n                                        index + 1\n                                      }`}\n                                      style={{\n                                        width: \"400px\",\n                                        height: \"450px\",\n                                        borderRadius: \"8px\",\n                                      }}\n                                    />\n                                  </div>\n                                ))}\n                              </Slider>\n                            ) : (\n                              <p>No images available</p>\n                            )}\n                          </div>\n                          <div>{SelectedProduct}</div>\n                          <div\n                            style={{\n                              background: \"#4ECDC4\",\n                              width: \"500px\",\n                              marginLeft: \"30px\",\n                            }}\n                          >\n                            <div style={{ padding: \"20px\", margin: \"0 auto\" }}>\n                              <CloseButton\n                                style={{\n                                  position: \"relative\",\n                                  left: \"420px\",\n                                  top: \"-40px\",\n                                  background: \"none\",\n                                  borderRadius: \"0px 14px 10px 10px\",\n                                  width: \"80px\",\n                                  border: \"1px solid red\",\n                                  cursor: \"pointer\",\n                                  fontWeight: \"bold\",\n                                  fontSize: \"30px\",\n                                  color: \"red\",\n                                }}\n                                onClick={() => hanldleProductHid()}\n                              >\n                                {t(\"close\")}\n                              </CloseButton>\n                              <h4>\n                                {\" \"}\n                                <Link\n                                  to={`/productsByOwner/${selectedProduct.owner}`}\n                                >\n                                  <h4> {selectedProduct.owner}</h4>\n                                </Link>\n                              </h4>\n                              <h1>{selectedProduct.name}</h1>n\n                              <p>{selectedProduct.description}</p>\n                              <p>\n                                <strong>Price:</strong> {selectedProduct.price}\n                              </p>\n                            </div>\n                            <div style={style.buttonsContainer}>\n                              <div>\n                                <button\n                                  style={style.buttons}\n                                  onClick={() =>\n                                    dispatch(\n                                      addToCartBeforeLogin(selectedProduct)\n                                    )\n                                  }\n                                >\n                                  Add To Cart\n                                </button>\n                              </div>\n                              <div>\n                                <button\n                                  style={{ ...style.buttons }}\n                                  onClick={() => dispatch(selectedProduct)}\n                                >\n                                  [add To WishList]\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    {product !== selectedProduct && (\n                      <BoxContainer\n                        key={index}\n                        categoryOption={categoryShadow[product.category]}\n                      >\n                        <div\n                          key={index}\n                          style={{\n                            ...styles.box,\n\n                            // justifyContent:\n                            // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n                          }}\n                        >\n                          {product.images.length > 0 ? (\n                            <img\n                              src={product.images[0]} // Display first image only\n                              alt={product.name}\n                              style={{\n                                width: \"250px\",\n                                height: \"250px\",\n                                objectFit: \"cover\",\n                                borderRadius: \"10px\",\n                                cursor: \"pointer\",\n                              }}\n                              onClick={() => {\n                                setSelectedProduct(product);\n\n                                show();\n                              }}\n                            />\n                          ) : (\n                            <p>{t(\"No Image Available\")}</p>\n                          )}\n                        </div>\n\n                        {/* text */}\n                        <div style={{ display: \"flex\" }}>\n                          <div\n                            className=\"text\"\n                            style={{\n                              borderRadius: \"10PX\",\n                              width: \"100%\",\n                              height: \"100px\",\n                              //  background:\"red\",\n                              padding: \"10px\",\n                            }}\n                          >\n                            <Name className=\"name\">\n                              <span\n                                style={{ color: \"black\" }}\n                                dangerouslySetInnerHTML={{\n                                  __html: highlightText(\n                                    product.name,\n                                    searchTerm\n                                  ),\n                                }}\n                              ></span>{\" \"}\n                            </Name>\n                            <DescriptionContainer>\n                              <DescriptionTitle>\n                                {t(\"Description\")}:\n                                <DescriptionContent>\n                                  {product.description}\n                                </DescriptionContent>\n                              </DescriptionTitle>\n                            </DescriptionContainer>\n                            <StatusContainer>\n                              <StatusTitle>\n                                {t(\"Status\")}:\n                                <StatusContent>{product.status}</StatusContent>\n                              </StatusTitle>\n                            </StatusContainer>\n                            <Price key={index}>\n                              {t(\"CFA\")}: {product.price - product.discount}\n                            </Price>\n                            {product.discount > 0 && (\n                              <Discount key={index}>\n                                {t(\"CFA\")}:<s>{product.price}</s>\n                                <label\n                                  style={{\n                                    width: \"40px\",\n                                    height: \"20px\",\n                                    background: \"#90EE90\",\n                                    textAlign: \"center\",\n                                    borderRadius: \"5px\",\n                                    marginLeft: \"15px\",\n                                  }}\n                                >\n                                  -\n                                  {(\n                                    (product.discount / product.price) *\n                                    100\n                                  ).toFixed(0)}\n                                  %\n                                </label>\n                              </Discount>\n                            )}\n                          </div>\n\n                          {/* like and wishlist */}\n                          <div style={{ background: \"\" }}>\n                            <div>\n                              {/* Product Display */}\n\n                              {selectedProduct === product && (\n                                <div>\n                                  <button\n                                    onClick={() => toggleLike(selectedProduct)}\n                                    styles={{\n                                      border: \"0px\",\n                                      background: \"red\",\n                                    }}\n                                  >\n                                    {selectedProduct.likedBy.some(\n                                      (user) => user.userId === userId\n                                    )\n                                      ? \"❤️\"\n                                      : \"🤍\"}\n                                    {product.likes}\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                            <div>\n                              <button\n                                style={{\n                                  background: \"transparent\",\n                                  border: \"0px solid orange\",\n                                  color: \"orange\",\n                                  padding: \"0px 0px\",\n                                  background: \"none\",\n                                  borderRadius: \"10px 10px 10px 10px \",\n                                  cursor: \"pointer\",\n                                  fontSize: \"40px\",\n                                  transition: \"all 0.3s ease\",\n                                  marginRight: \"auto\",\n                                  width: \"35px\",\n                                }}\n                                onClick={() =>\n                                  dispatch(addToCartBeforeLogin(product))\n                                }\n                              >\n                                +\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div\n                          style={{\n                            background: \"\",\n                            textAlign: \"center\",\n                            padding: \"5px\",\n                          }}\n                        >\n                          <AddtocartButton\n                            main={product.discount > 0}\n                            onClick={() => dispatch(addToCartAPI(product))}\n                          >\n                            {t(\"Add To Cart\")}\n                          </AddtocartButton>\n                        </div>\n                      </BoxContainer>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <p>{t(\"Loading...\")}</p>\n              )}\n\n              {selectedProduct && showDetails && selectedProduct && <></>}\n            </div>\n          }\n\n          {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n        </React.Fragment>\n      )}\n    </>\n  );\n};\nconst style = {\n  sliderSettings: {\n    dots: true, // Show navigation dots\n    infinite: true, // Enable infinite looping\n    speed: 100, // Transition speed (ms)\n    slidesToShow: 1, // Show one image at a time\n    slidesToScroll: 1, // Scroll one image per action\n    autoplay: true,\n    autoplaySpeed: 3000, // Autoplay speed (ms)\n  },\n  buttonsContainer: {\n    display: \"flex\",\n  },\n  buttons: {\n    color: \"orangered\",\n    background: \"none\",\n    border: \"2px solid orangered\",\n    margin: \"10px\",\n    borderRadius: \"10px\",\n    before: \"+\",\n  },\n};\n\nexport default Products;\n"
        }
    ]
}