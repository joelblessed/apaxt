{
    "sourceFile": "src/components/pages/ProductCards/desktopCards.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1743746805466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743746814001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n                           )}\n                         </div>\n                         <div>\n                          \n-                              <\n+                              <fi\n                               product={product}\n                               />\n                        \n                       \n"
                },
                {
                    "date": 1743746826809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,10 +218,10 @@\n                           )}\n                         </div>\n                         <div>\n                          \n-                              <fi\n-                              product={product}\n+                              <WishlistPage\n+                           \n                               />\n                        \n                       \n                          \n"
                },
                {
                    "date": 1743746835117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n                         </div>\n                         <div>\n                          \n                               <WishlistPage\n-                           filteredProducts={ptroduc}\n+                           filteredProducts={ptroduct}\n                               />\n                        \n                       \n                          \n"
                },
                {
                    "date": 1743746886385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n                         </div>\n                         <div>\n                          \n                               <WishlistPage\n-                           filteredProducts={fi}\n+                           filteredProducts={fil}\n                               />\n                        \n                       \n                          \n"
                }
            ],
            "date": 1743746805466,
            "name": "Commit-0",
            "content": "import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"../../translations/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport WishlistPage from \"../wishlistPage\";\nimport Sup from \"../sup\";\nimport {\n  BoxContainer,\n  AddtocartButton,\n  Price,\n  Discount,\n  DescriptionContainer,\n  DescriptionTitle,\n  DescriptionContent,\n  StatusContainer,\n  StatusContent,\n  StatusTitle,\n  Name,\n  categoryShadow,\n} from \"../styledComponents\";\n\nconst DesktopCards = ({\n  Dobject,\n  addToCartAPI,\n  addToWishlist,\n  show,\n  userId,\n  highlightText,\n  searchTerm,\n  selectedProduct,\n  handleProductHid,\n  setSelectedProduct,\n  isExpanded,\n  toggleLike,\n  showDetails,\n  SelectedProductDesktop,\n  maxLength,\n  ts,\n  filteredProducts,\n  \n}) => {\n  const { t, i18n } = useTranslation();\n  const dispatch = useDispatch(); // Function to check screen size\n\n  const styles = {\n    container: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      gap: \"20px\",\n      background: \"white\",\n      maxWidth: \"96%\", // Prevents full width spread\n      margin: \"auto\", // Centers the whole container\n      padding: \"20px\",\n      marginTop: \"50px\",\n    },\n    box: {\n      width: \"250px\",\n      height: \"250px\",\n    },\n\n    lastBox: {\n      background: \"blue\",\n\n      // Pushes last box to the left\n    },\n  };\n\n const prod = (go)=>{\n  go = filteredProducts\n }\n  return (\n    <React.Fragment>\n      {\n        <div className=\"animated-box\" style={styles.container}>\n          {Dobject.length > 0 ? (\n            Dobject.map((product, index) => (\n              <div>\n                {/* selected Product */}\n                {selectedProduct === product && (\n                  <div>\n                    <SelectedProductDesktop\n                      selectedProduct={selectedProduct}\n                      handleProductHid={handleProductHid}\n                    />\n                  </div>\n                )}\n\n                {product !== selectedProduct && (\n                  <BoxContainer\n                    key={index}\n                    categoryOption={categoryShadow[product.category]}\n                  >\n                    <div\n                      key={index}\n                      style={{\n                        ...styles.box,\n\n                        // justifyContent:\n                        // index === filteredProducts.length - 1 ? \"space-evenly\" : {}, // Apply style only to the last box\n                      }}\n                    >\n                      {product.images.length > 0 ? (\n                        <img\n                          src={product.images[0]} // Display first image only\n                          alt={product.name}\n                          style={{\n                            width: \"250px\",\n                            height: \"250px\",\n                            objectFit: \"cover\",\n                            borderRadius: \"10px\",\n                            cursor: \"pointer\",\n                          }}\n                          onClick={() => {\n                            setSelectedProduct(product);\n\n                            show();\n                          }}\n                        />\n                      ) : (\n                        <p>{t(\"No Image Available\")}</p>\n                      )}\n                    </div>\n\n                    {/* text */}\n                    <div style={{ display: \"flex\" }}>\n                      <div\n                        className=\"text\"\n                        style={{\n                          borderRadius: \"10PX\",\n                          width: \"100%\",\n                          height: \"100px\",\n                          //  background:\"red\",\n                          padding: \"10px\",\n                        }}\n                      >\n                        <Name className=\"name\">\n                          <span\n                            style={{ color: \"black\" }}\n                            dangerouslySetInnerHTML={{\n                              __html: highlightText(\n                                isExpanded\n                                  ? product.name\n                                  : product.name.slice(0, maxLength),\n                                searchTerm\n                              ),\n                            }}\n                          ></span>{\" \"}\n                        </Name>\n                        <DescriptionContainer>\n                          <DescriptionTitle>\n                            {t(\"Description\")}:\n                            <DescriptionContent>\n                              {isExpanded\n                                ? product.description\n                                : product.description.slice(0, maxLength) +\n                                  \"...\"}\n                            </DescriptionContent>\n                          </DescriptionTitle>\n                        </DescriptionContainer>\n                        <StatusContainer>\n                          <StatusTitle>\n                            {t(\"Status\")}:\n                            <StatusContent>{product.status}</StatusContent>\n                          </StatusTitle>\n                        </StatusContainer>\n                        <Price key={index}>\n                          {t(\"CFA\")}: {product.price - product.discount}\n                        </Price>\n                        {product.discount > 0 && (\n                          <Discount key={index}>\n                            {t(\"CFA\")}:<s>{product.price}</s>\n                            <label\n                              style={{\n                                width: \"40px\",\n                                height: \"20px\",\n                                background: \"#90EE90\",\n                                textAlign: \"center\",\n                                borderRadius: \"5px\",\n                                marginLeft: \"15px\",\n                              }}\n                            >\n                              -\n                              {(\n                                (product.discount / product.price) *\n                                100\n                              ).toFixed(0)}\n                              %\n                            </label>\n                          </Discount>\n                        )}\n                      </div>\n\n                      {/* like and wishlist */}\n                      <div style={{ background: \"\" }}>\n                        <div>\n                          {/* Product Display */}\n\n                          {selectedProduct === product && (\n                            <div>\n                              <button\n                                onClick={() => toggleLike(selectedProduct)}\n                                styles={{\n                                  border: \"0px\",\n                                  background: \"red\",\n                                }}\n                              >\n                                {selectedProduct.likedBy.some(\n                                  (user) => user.userId === userId\n                                )\n                                  ? \"❤️\"\n                                  : \"🤍\"}\n                                {product.likes}\n                              </button>\n                            </div>\n                          )}\n                        </div>\n                        <div>\n                         \n                              <\n                              product={product}\n                              />\n                       \n                      \n                         \n                          <button\n                            style={{\n                              background: \"transparent\",\n                              border: \"0px solid orange\",\n                              color: \"orange\",\n                              padding: \"0px 0px\",\n                              background: \"none\",\n                              borderRadius: \"10px 10px 10px 10px \",\n                              cursor: \"pointer\",\n                              fontSize: \"40px\",\n                              transition: \"all 0.3s ease\",\n                              marginRight: \"auto\",\n                              width: \"35px\",\n                            }}\n                            onClick={() =>\n                              dispatch(\n                                addToWishlist({ productId: product.id, userId })\n                              )\n                            }\n                          >\n                         \n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div\n                      style={{\n                        background: \"\",\n                        textAlign: \"center\",\n                        padding: \"5px\",\n                      }}\n                    >\n                      <AddtocartButton\n                        main={product.discount > 0}\n                        onClick={() => dispatch(addToCartAPI(product))}\n                      >\n                        {t(\"Add To Cart\")}\n                      </AddtocartButton>\n                    </div>\n                  </BoxContainer>\n                )}\n              </div>\n            ))\n          ) : (\n            <p>{t(\"Loading...\")}</p>\n          )}\n\n          {selectedProduct && showDetails && selectedProduct && <></>}\n        </div>\n      }\n\n      {/* {product.isSelected ? \"Unselect\" : \"Select\"} */}\n    </React.Fragment>\n  );\n};\nconst style = {\n  sliderSettings: {\n    dots: true, // Show navigation dots\n    infinite: true, // Enable infinite looping\n    speed: 100, // Transition speed (ms)\n    slidesToShow: 1, // Show one image at a time\n    slidesToScroll: 1, // Scroll one image per action\n    autoplay: true,\n    autoplaySpeed: 3000, // Autoplay speed (ms)\n  },\n  buttonsContainer: {\n    display: \"flex\",\n  },\n  buttons: {\n    color: \"orangered\",\n    background: \"none\",\n    border: \"2px solid orangered\",\n    margin: \"10px\",\n    borderRadius: \"10px\",\n    before: \"+\",\n  },\n};\n\nexport default DesktopCards;\n"
        }
    ]
}