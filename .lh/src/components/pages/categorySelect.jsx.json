{
    "sourceFile": "src/components/pages/categorySelect.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744737560185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744737581529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const [page, setPage] = useState(1);\n   const [hasMore, setHasMore] = useState(true);\n   const navigate = useNavigate();\n   const { categoryName } = useParams();\n-  const [category, setCategory] = useState(catego);\n+  const [category, setCategory] = useState(\"\");\n   const [uniqueCategories, setUniqueCategories] = useState([]);\n    \n   \n \n"
                },
                {
                    "date": 1744737582447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const [page, setPage] = useState(1);\n   const [hasMore, setHasMore] = useState(true);\n   const navigate = useNavigate();\n   const { categoryName } = useParams();\n-  const [category, setCategory] = useState(\"\");\n+  const [category, setCategory] = useState(\"Fa\");\n   const [uniqueCategories, setUniqueCategories] = useState([]);\n    \n   \n \n"
                }
            ],
            "date": 1744737560185,
            "name": "Commit-0",
            "content": "import React, {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport CategoryBox from \"./categoryBox\";\nimport { debounce } from \"lodash\";\nimport Fuse from \"fuse.js\";\nimport Box from \"./boxes\";\n\nconst Category = ({\n  searchTerm,\n  setSearchTerm,\n  api,\n  allProducts,\n  glofilteredProducts,\n  loaderRef,\n  highlightText,\n  SelectedProduct,\n}) => {\n  const [products, setProducts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const navigate = useNavigate();\n  const [category, setCategory] = useState(\"\");\n  const [uniqueCategories, setUniqueCategories] = useState([]);\n   \n  \n\n  // Memoize fuse instance for performance\n  const fuse = useMemo(\n    () =>\n      new Fuse(glofilteredProducts, {\n        keys: [\"name\", \"category\", \"owner\", \"brand.name\"],\n        threshold: 0.3,\n      }),\n    [glofilteredProducts]\n  );\n\n  const fetchProducts = useCallback(async () => {\n    try {\n      const res = await fetch(`${api}/products?page=${page}&limit=4`);\n      const data = await res.json();\n      const fetched = data.products || data;\n\n      if (fetched.length === 0) {\n        setHasMore(false);\n        return;\n      }\n\n      setProducts((prev) => {\n        const ids = new Set(prev.map((p) => p.id));\n        return [...prev, ...fetched.filter((item) => !ids.has(item.id))];\n      });\n    } catch (error) {\n      console.error(\"Failed to fetch products:\", error);\n    }\n  }, [page, api]);\n\n  useEffect(() => {\n    fetchProducts();\n  }, [fetchProducts]);\n\n  useEffect(() => {\n    if (!hasMore) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setPage((prev) => prev + 1);\n        }\n      },\n      { rootMargin: \"100px\" }\n    );\n\n    const currentLoader = loaderRef.current;\n    if (currentLoader) observer.observe(currentLoader);\n\n    return () => {\n      if (currentLoader) observer.unobserve(currentLoader);\n    };\n  }, [hasMore, loaderRef]);\n\n  // Handle search functionality\n  useEffect(() => {\n    if (searchTerm && searchTerm.trim() !== \"\") {\n      const results = fuse.search(searchTerm.trim());\n      const matched = results.map((res) => res.item);\n      setProducts(matched);\n      setHasMore(false);\n    } else {\n      setHasMore(true);\n      // Reset to initial state or fetch first page again\n      setPage(1);\n      setProducts([]);\n      fetchProducts();\n    }\n  }, [searchTerm, fuse]);\n\n  const handleProductClick = useCallback(\n    (product) => {\n      SelectedProduct(product);\n      localStorage.setItem(\"selectedProduct\", JSON.stringify(product));\n      navigate(\"/selectedProduct\");\n    },\n    [SelectedProduct, navigate]\n  );\n\n  const groupByCategory = useCallback((products) => {\n    return products.reduce((acc, product) => {\n      if (!acc[product.category]) acc[product.category] = [];\n      acc[product.category].push(product);\n      return acc;\n    }, {});\n  }, []);\n\n  const groupedProducts = useMemo(\n    () => groupByCategory(allProducts),\n    [allProducts, groupByCategory]\n  );\n\n  const Dobject = useMemo(\n    () => Object.keys(groupedProducts),\n    [groupedProducts]\n  );\n  const Dobject1 = useMemo(() => {\n    return Dobject.reduce((acc, category) => {\n      acc[category] = groupedProducts[category].slice(0, 5);\n      return acc;\n    }, {});\n  }, [Dobject, groupedProducts]);\n\n  const fetchSearchResults = useCallback(\n    async (query) => {\n      try {\n        const res = await fetch(\n          `${api}/search?query=${encodeURIComponent(\n            query\n          )}&page=${page}&limit=5`\n        );\n        const data = await res.json();\n        const fetched = data.results || [];\n\n        if (fetched.length === 0) setHasMore(false);\n\n        const uniqueProducts = (prev, newItems) => {\n          const ids = new Set(prev.map((p) => p.id));\n          return [...prev, ...newItems.filter((item) => !ids.has(item.id))];\n        };\n\n        const filteredProducts = category\n          ? fetched.filter(\n              (product) => (product.owner === product.category) === category\n            )\n          : fetched;\n\n        setProducts((prev) => uniqueProducts(prev, filteredProducts));\n      } catch (error) {\n        console.error(\"Error fetching search results:\", error);\n      }\n    },\n    [page, category, api]\n  );\n\n  // Debounced search function\n  const debouncedSearch = debounce((query) => {\n    fetchSearchResults(query);\n  }, 200); // Delay in milliseconds\n\n  useEffect(() => {\n    // Trigger the debounced search when the search term changes\n    debouncedSearch(searchTerm || category);\n\n    // Cleanup debounce function when the component unmounts or searchTerm changes\n    return () => {\n      debouncedSearch.cancel();\n    };\n  }, [searchTerm, category]);\n\n  useEffect(() => {\n    fetchProducts();\n  }, [fetchProducts]);\n\n  useEffect(() => {\n    if (!hasMore) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting) {\n          setPage((prev) => prev + 1);\n        }\n      },\n      { rootMargin: \"100px\" }\n    );\n\n    if (loaderRef.current) observer.observe(loaderRef.current);\n\n    return () => {\n      if (loaderRef.current) observer.unobserve(loaderRef.current);\n    };\n  }, [hasMore]);\n\n  // Initial fetch and reset when category changes\n  useEffect(() => {\n    setPage(1);\n    setProducts([]);\n    setHasMore(true);\n  }, [category]);\n\n  // Mobile scroll to top on search\n  useEffect(() => {\n    if (searchTerm && window.innerWidth < 1000) {\n      setTimeout(() => {\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      }, 300);\n    }\n  }, [searchTerm]);\n\n  return (\n    <div>\n      {searchTerm.length > 0 ? (\n        <div>\n          <Box\n            Mobject={products}\n            Dobject={products}\n            loaderRef={loaderRef}\n            SelectedProduct={SelectedProduct}\n            handleProductClick={handleProductClick}\n            highlightText={highlightText}\n          />\n        </div>\n      ) : (\n        <div>\n          <CategoryBox\n            Mobject={products}\n            Dobject={Dobject}\n            Dobject1={Dobject1}\n            loaderRef={loaderRef}\n            SelectedProduct={SelectedProduct}\n            handleProductClick={handleProductClick}\n            highlightText={highlightText}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Category;\n"
        }
    ]
}