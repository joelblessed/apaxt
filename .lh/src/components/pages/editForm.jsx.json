{
    "sourceFile": "src/components/pages/editForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741795101138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741795101138,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport \"./formUpload.css\";\n\nconst EditForm = ({ api, productId }) => {\n  const [product, setProduct] = useState(null);\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    // Fetch product details\n    const fetchProduct = async () => {\n      try {\n        const response = await fetch(`${api}/products/${productId}`);\n        const data = await response.json();\n        setProduct(data);\n      } catch (error) {\n        console.error(\"Error fetching product:\", error);\n      }\n    };\n\n    fetchProduct();\n  }, [api, productId]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setProduct((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleBrandChange = (index, field, value) => {\n    const updatedBrands = [...product.brand];\n    updatedBrands[index][field] = value;\n    setProduct((prev) => ({ ...prev, brand: updatedBrands }));\n  };\n\n  const addBrand = () => {\n    setProduct((prev) => ({\n      ...prev,\n      brand: [...prev.brand, { id: Date.now(), name: \"\", image: \"\" }],\n    }));\n  };\n\n  const removeBrand = (index) => {\n    const updatedBrands = product.brand.filter((_, i) => i !== index);\n    setProduct((prev) => ({ ...prev, brand: updatedBrands }));\n  };\n\n  const handleImageUpload = (e) => {\n    const files = Array.from(e.target.files);\n    if (files.length === 0) return;\n\n    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/jpg\"];\n    for (let file of files) {\n      if (!allowedTypes.includes(file.type)) {\n        setErrors((prev) => ({\n          ...prev,\n          images: \"Only JPG, jpg, JPEG, and PNG formats allowed\",\n        }));\n        return;\n      }\n    }\n\n    setProduct((prev) => ({ ...prev, images: files }));\n    setErrors((prev) => ({ ...prev, images: \"\" }));\n  };\n\n  const validateForm = () => {\n    let validationErrors = {};\n\n    if (!product.name) validationErrors.name = \"Product name is required\";\n    if (!product.category) validationErrors.category = \"Category is required\";\n    if (!product.price || isNaN(product.price) || product.price <= 0)\n      validationErrors.price = \"Valid price is required\";\n    if (!product.numberInStock || isNaN(product.numberInStock) || product.numberInStock < 0)\n      validationErrors.numberInStock = \"Valid stock quantity is required\";\n    if (!product.phoneNumber || isNaN(product.phoneNumber) || product.phoneNumber.length < 5)\n      validationErrors.phoneNumber = \"Valid phone number is required\";\n    if (!product.status) validationErrors.status = \"Status is required\";\n    if (!product.description) validationErrors.description = \"Description is required\";\n    if (product.brand.some((b) => !b.name))\n      validationErrors.brand = \"Brand details must be complete\";\n    if (product.images.length === 0)\n      validationErrors.images = \"At least one image is required\";\n\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    const formData = new FormData();\n    for (const key in product) {\n      if (key === \"images\") {\n        product.images.forEach((file, index) => {\n          formData.append(\"images\", file);\n        });\n      } else {\n        formData.append(key, JSON.stringify(product[key]));\n      }\n    }\n\n    try {\n      const response = await fetch(`${api}/products/${productId}`, {\n        method: \"PUT\",\n        body: formData,\n      });\n\n      if (response.ok) {\n        alert(\"Product updated successfully!\");\n      } else {\n        alert(\"Failed to update product.\");\n      }\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n    }\n  };\n\n  if (!product) return <div>Loading...</div>;\n\n  return (\n    <div className=\"form-container\">\n      <h2>Edit Product</h2>\n      <form onSubmit={handleSubmit}>\n        {/* Product Name */}\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Product Name\"\n          value={product.name}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.name && <p className=\"error\">{errors.name}</p>}\n\n        {/* Brand Input */}\n        {product.brand.map((b, index) => (\n          <div key={index} className=\"brand-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Brand Name\"\n              value={b.name}\n              onChange={(e) => handleBrandChange(index, \"name\", e.target.value)}\n              required\n            />\n            {product.brand.length > 1 && (\n              <button type=\"button\" onClick={() => removeBrand(index)}>\n                Remove\n              </button>\n            )}\n          </div>\n        ))}\n        {errors.brand && <p className=\"error\">{errors.brand}</p>}\n        <button type=\"button\" onClick={addBrand} className=\"add-brand-button\">\n          Add Another Brand\n        </button>\n\n        {/* Category Selection */}\n        <select\n          name=\"category\"\n          value={product.category}\n          onChange={handleInputChange}\n          required\n        >\n          <option value=\"\">Select Category</option>\n          <option value=\"Electronics\">Electronics</option>\n          <option value=\"Clothing\">Clothing</option>\n          <option value=\"Furniture\">Furniture</option>\n        </select>\n        {errors.category && <p className=\"error\">{errors.category}</p>}\n\n        {/* Price, Stock, Discount, Phone Number */}\n        <input\n          type=\"number\"\n          name=\"price\"\n          placeholder=\"Price\"\n          value={product.price}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.price && <p className=\"error\">{errors.price}</p>}\n\n        <input\n          type=\"number\"\n          name=\"numberInStock\"\n          placeholder=\"Number In Stock\"\n          value={product.numberInStock}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.numberInStock && (\n          <p className=\"error\">{errors.numberInStock}</p>\n        )}\n\n        <input\n          type=\"number\"\n          name=\"discount\"\n          placeholder=\"Discount\"\n          value={product.discount}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.discount && <p className=\"error\">{errors.discount}</p>}\n\n        <input\n          type=\"tel\"\n          name=\"phoneNumber\"\n          placeholder=\"Phone Number\"\n          value={product.phoneNumber}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.phoneNumber && (\n          <p className=\"error\">{errors.phoneNumber}</p>\n        )}\n\n        {/* Description */}\n        <textarea\n          name=\"description\"\n          placeholder=\"Description\"\n          value={product.description}\n          onChange={handleInputChange}\n          required\n        ></textarea>\n        {errors.description && (\n          <p className=\"error\">{errors.description}</p>\n        )}\n\n        {/* Status Selection */}\n        <select\n          name=\"status\"\n          value={product.status}\n          onChange={handleInputChange}\n          required\n        >\n          <option value=\"\">Select Status</option>\n          <option value=\"New\">New</option>\n          <option value=\"Used\">Used</option>\n        </select>\n        {errors.status && <p className=\"error\">{errors.status}</p>}\n\n        {/* Address and Location and country */}\n        <input\n          type=\"text\"\n          name=\"address\"\n          placeholder=\"Address\"\n          value={product.address}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.address && <p className=\"error\">{errors.address}</p>}\n\n        <input\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"City\"\n          value={product.city}\n          onChange={handleInputChange}\n          required\n        />\n        {errors.city && <p className=\"error\">{errors.city}</p>}\n\n        {/* Image Upload */}\n        <input\n          type=\"file\"\n          multiple\n          accept=\"image/*\"\n          onChange={handleImageUpload}\n        />\n        {errors.images && <p className=\"error\">{errors.images}</p>}\n\n        {/* Display Uploaded Images */}\n        {product.images.length > 0 && (\n          <div className=\"uploaded-images\">\n            <h3>Uploaded Images:</h3>\n            {product.images.map((file, index) => (\n              <img\n                key={index}\n                src={URL.createObjectURL(file)}\n                alt={`Uploaded ${index}`}\n                width=\"100\"\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Submit Button */}\n        <button className=\"button\" type=\"submit\">Update Product</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditForm;"
        }
    ]
}