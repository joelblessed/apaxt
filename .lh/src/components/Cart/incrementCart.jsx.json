{
    "sourceFile": "src/components/Cart/incrementCart.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1737542906218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737542949065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,5 +19,6 @@\n       await fetch(http://localhost:3000/cart/${itemId}, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n-      });\n\\ No newline at end of file\n+      });\n+      \n\\ No newline at end of file\n"
                },
                {
                    "date": 1737543006293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+import React, { useState, useEffect } from 'react';\n+\n+const ShoppingCart = () => {\n+  const [cart, setCart] = useState([]);\n+\n+  // Fetch cart items from mock db.json (using json-server)\n+  useEffect(() => {\n+    fetch('http://localhost:3000/cart')\n+      .then((response) => response.json())\n+      .then((data) => setCart(data))\n+      .catch((error) => console.error('Error fetching cart:', error));\n+  }, []);\n+\n+  // Function to increment quantity in the database\n+  const incrementQuantity = async (itemId, currentQuantity) => {\n+    const updatedQuantity = currentQuantity + 1;\n+\n+    try {\n+      await fetch(http://localhost:3000/cart/${itemId}, {\n+        method: 'PATCH',  // Use PATCH to update a specific field\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ quantity: updatedQuantity }),\n+      });\n+\n+      // Update local state to reflect the changes\n+      setCart(cart.map(item => \n+        item.id === itemId ? { ...item, quantity: updatedQuantity } : item\n+      ));\n+    } catch (error) {\n+      console.error('Error updating quantity:', error);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <h2>Shopping Cart</h2>\n+      <ul>\n+        {cart.map((item) => (\n+          <li key={item.id}>\n+            {item.name} - Quantity: {item.quantity}\n+            <button onClick={() => incrementQuantity(item.id, item.quantity)}>\n+              +1\n+            </button>\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n+\n+export default ShoppingCart;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737543052301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const incrementQuantity = async (itemId, currentQuantity) => {\n     const updatedQuantity = currentQuantity + 1;\n \n     try {\n-      await fetch(http://localhost:3000/cart/${itemId}, {\n+      await fetch(http://localhost:3000/cart/${itemId}`, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n       });\n@@ -47,29 +47,5 @@\n     </div>\n   );\n };\n \n-export default ShoppingCart;\n-import React, { useState, useEffect } from 'react';\n-\n-const ShoppingCart = () => {\n-  const [cart, setCart] = useState([]);\n-\n-  // Fetch cart items from mock db.json (using json-server)\n-  useEffect(() => {\n-    fetch('http://localhost:3000/cart')\n-      .then((response) => response.json())\n-      .then((data) => setCart(data))\n-      .catch((error) => console.error('Error fetching cart:', error));\n-  }, []);\n-\n-  // Function to increment quantity in the database\n-  const incrementQuantity = async (itemId, currentQuantity) => {\n-    const updatedQuantity = currentQuantity + 1;\n-\n-    try {\n-      await fetch(http://localhost:3000/cart/${itemId}, {\n-        method: 'PATCH',  // Use PATCH to update a specific field\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ quantity: updatedQuantity }),\n-      });\n-      \n\\ No newline at end of file\n+export default ShoppingCart;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737543058543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const incrementQuantity = async (itemId, currentQuantity) => {\n     const updatedQuantity = currentQuantity + 1;\n \n     try {\n-      await fetch(http://localhost:3000/cart/${itemId}`, {\n+      await fetch(`http://localhost:3000/cart/${itemId}`, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n       });\n"
                },
                {
                    "date": 1737543065237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const incrementQuantity = async (itemId, currentQuantity) => {\n     const updatedQuantity = currentQuantity + 1;\n \n     try {\n-      await fetch(`http://localhost:3000/cart/${itemId}`, {\n+      await fetch(`http://localhost:4500/cart/${itemId}`, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n       });\n"
                },
                {
                    "date": 1737543072044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const incrementQuantity = async (itemId, currentQuantity) => {\n     const updatedQuantity = currentQuantity + 1;\n \n     try {\n-      await fetch(`http://localhost:4500/cart/${itemId}`, {\n+      await fetch(`http://localhost:4500/cartdb/${itemId}`, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n       });\n"
                },
                {
                    "date": 1737543123042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   const [cart, setCart] = useState([]);\n \n   // Fetch cart items from mock db.json (using json-server)\n   useEffect(() => {\n-    fetch('http://localhost:3000/cart')\n+    fetch('http://localhost:000/cart')\n       .then((response) => response.json())\n       .then((data) => setCart(data))\n       .catch((error) => console.error('Error fetching cart:', error));\n   }, []);\n"
                },
                {
                    "date": 1737543130380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+import React, { useState, useEffect } from 'react';\n+\n+const ShoppingCart = () => {\n+  const [cart, setCart] = useState([]);\n+\n+  // Fetch cart items from mock db.json (using json-server)\n+  useEffect(() => {\n+    fetch('http://localhost:4500/cartdb')\n+      .then((response) => response.json())\n+      .then((data) => setCart(data))\n+      .catch((error) => console.error('Error fetching cart:', error));\n+  }, []);\n+\n+  // Function to increment quantity in the database\n+  const incrementQuantity = async (itemId, currentQuantity) => {\n+    const updatedQuantity = currentQuantity + 1;\n+\n+    try {\n+      await fetch(`http://localhost:4500/cartdb/${itemId}`, {\n+        method: 'PATCH',  // Use PATCH to update a specific field\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ quantity: updatedQuantity }),\n+      });\n+\n+      // Update local state to reflect the changes\n+      setCart(cart.map(item => \n+        item.id === itemId ? { ...item, quantity: updatedQuantity } : item\n+      ));\n+    } catch (error) {\n+      console.error('Error updating quantity:', error);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <h2>Shopping Cart</h2>\n+      <ul>\n+        {cart.map((item) => (\n+          <li key={item.id}>\n+            {item.name} - Quantity: {item.quantity}\n+            <button onClick={() => incrementQuantity(item.id, item.quantity)}>\n+              +1\n+            </button>\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n+\n+export default ShoppingCart;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737544468035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   const [cart, setCart] = useState([]);\n \n   // Fetch cart items from mock db.json (using json-server)\n   useEffect(() => {\n-    fetch('http://localhost:4500/cartdb')\n+    fetch('http://localhost:4000/cartdb/')\n       .then((response) => response.json())\n       .then((data) => setCart(data))\n       .catch((error) => console.error('Error fetching cart:', error));\n   }, []);\n@@ -47,56 +47,5 @@\n     </div>\n   );\n };\n \n-export default ShoppingCart;\n-import React, { useState, useEffect } from 'react';\n-\n-const ShoppingCart = () => {\n-  const [cart, setCart] = useState([]);\n-\n-  // Fetch cart items from mock db.json (using json-server)\n-  useEffect(() => {\n-    fetch('http://localhost:000/cart')\n-      .then((response) => response.json())\n-      .then((data) => setCart(data))\n-      .catch((error) => console.error('Error fetching cart:', error));\n-  }, []);\n-\n-  // Function to increment quantity in the database\n-  const incrementQuantity = async (itemId, currentQuantity) => {\n-    const updatedQuantity = currentQuantity + 1;\n-\n-    try {\n-      await fetch(`http://localhost:4500/cartdb/${itemId}`, {\n-        method: 'PATCH',  // Use PATCH to update a specific field\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ quantity: updatedQuantity }),\n-      });\n-\n-      // Update local state to reflect the changes\n-      setCart(cart.map(item => \n-        item.id === itemId ? { ...item, quantity: updatedQuantity } : item\n-      ));\n-    } catch (error) {\n-      console.error('Error updating quantity:', error);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <h2>Shopping Cart</h2>\n-      <ul>\n-        {cart.map((item) => (\n-          <li key={item.id}>\n-            {item.name} - Quantity: {item.quantity}\n-            <button onClick={() => incrementQuantity(item.id, item.quantity)}>\n-              +1\n-            </button>\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-\n export default ShoppingCart;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737544474298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   const [cart, setCart] = useState([]);\n \n   // Fetch cart items from mock db.json (using json-server)\n   useEffect(() => {\n-    fetch('http://localhost:4000/cartdb/')\n+    fetch('http://localhost:4000/cart/')\n       .then((response) => response.json())\n       .then((data) => setCart(data))\n       .catch((error) => console.error('Error fetching cart:', error));\n   }, []);\n"
                },
                {
                    "date": 1737544481623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const incrementQuantity = async (itemId, currentQuantity) => {\n     const updatedQuantity = currentQuantity + 1;\n \n     try {\n-      await fetch(`http://localhost:4500/cartdb/${itemId}`, {\n+      await fetch(`http://localhost:4000/cart/${itemId}`, {\n         method: 'PATCH',  // Use PATCH to update a specific field\n         headers: { 'Content-Type': 'application/json' },\n         body: JSON.stringify({ quantity: updatedQuantity }),\n       });\n"
                }
            ],
            "date": 1737542906218,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\n\nconst ShoppingCart = () => {\n  const [cart, setCart] = useState([]);\n\n  // Fetch cart items from mock db.json (using json-server)\n  useEffect(() => {\n    fetch('http://localhost:3000/cart')\n      .then((response) => response.json())\n      .then((data) => setCart(data))\n      .catch((error) => console.error('Error fetching cart:', error));\n  }, []);\n\n  // Function to increment quantity in the database\n  const incrementQuantity = async (itemId, currentQuantity) => {\n    const updatedQuantity = currentQuantity + 1;\n\n    try {\n      await fetch(http://localhost:3000/cart/${itemId}, {\n        method: 'PATCH',  // Use PATCH to update a specific field\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ quantity: updatedQuantity }),\n      });"
        }
    ]
}