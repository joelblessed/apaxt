{
    "sourceFile": "src/components/orders/orders.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1742914986920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742915000207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from 'react';\n-import { fetchAllOrders } from '../';\n+import { fetchAllOrders } from '../../orderService';\n \n const OrderList = () => {\n   const [orders, setOrders] = useState([]);\n   const [loading, setLoading] = useState(true);\n"
                },
                {
                    "date": 1742917119474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,56 @@\n-import { useState, useEffect } from 'react';\n-import { fetchAllOrders } from '../../orderService';\n+import { useEffect, useState } from \"react\";\n \n-const OrderList = () => {\n+const Orders = ({ userId, token }) => {\n   const [orders, setOrders] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState('');\n \n   useEffect(() => {\n-    const loadOrders = async () => {\n-      try {\n-        const data = await fetchAllOrders();\n-        setOrders(data);\n-      } catch (err) {\n-        setError(err.message);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-    loadOrders();\n-  }, []);\n+    fetch(http://localhost:5000/orders/${userId}, {\n+      headers: { Authorization: Bearer ${token} },\n+    })\n+      .then((res) => res.json())\n+      .then((data) => setOrders(data))\n+      .catch((error) => console.error(\"Error fetching orders:\", error));\n+  }, [userId, token]);\n \n-  if (loading) return <div>Loading orders...</div>;\n-  if (error) return <div className=\"alert alert-danger\">{error}</div>;\n+  const handleCancel = async (orderId) => {\n+    await fetch(http://localhost:5000/orders/cancel/${orderId}, {\n+      method: \"PATCH\",\n+      headers: { Authorization: Bearer ${token} },\n+    });\n+    setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n+  };\n \n+  const handleDeliver = async (orderId) => {\n+    const response = await fetch(http://localhost:5000/orders/deliver/${orderId}, {\n+      method: \"PATCH\",\n+      headers: { Authorization: Bearer ${token} },\n+    });\n+    const data = await response.json();\n+    setOrders(\n+      orders.map((order) =>\n+        order.id === orderId ? { ...order, status: \"Delivered\", shipping: { ...order.shipping, deliveryDate: data.deliveryDate } } : order\n+      )\n+    );\n+  };\n+\n   return (\n-    <div className=\"order-list\">\n-      <h2>All Orders</h2>\n-      <table className=\"table\">\n-        <thead>\n-          <tr>\n-            <th>ID</th>\n-            <th>User</th>\n-            <th>Date</th>\n-            <th>Amount</th>\n-            <th>Status</th>\n\\ No newline at end of file\n-            <th>Delivery Date</th>\n-            <th>Items</th>\n-          </tr>\n-        </thead>\n-        <tbody>\n-          {orders.map(order => (\n-            <tr key={order.id}>\n-              <td>{order.id}</td>\n-              <td>{order.user.username} (ID: {order.user.userId})</td>\n-              <td>{new Date(order.date).toLocaleString()}</td>\n-              <td>${order.totalAmount.toFixed(2)}</td>\n-              <td>{order.status}</td>\n-              <td>{order.shipping.deliveryDate}</td>\n-              <td>\n-                {order.cart.map(item => (\n-                  <div key={item.id}>\n-                    {item.name} x{item.quantity}\n-                  </div>\n-                ))}\n-              </td>\n-            </tr>\n-          ))}\n-        </tbody>\n-      </table>\n+    <div>\n+      <h2>My Orders</h2>\n+      <ul>\n+        {orders.map((order) => (\n+          <li key={order.id}>\n+            Order #{order.id} - {order.status} - {order.shipping?.deliveryDate || \"Not Delivered\"}\n+            <button onClick={() => handleCancel(order.id)} disabled={order.status !== \"Pending\"}>\n+              Cancel\n+            </button>\n+            <button onClick={() => handleDeliver(order.id)} disabled={order.status !== \"Pending\"}>\n+              Mark as Delivered\n+            </button>\n+          </li>\n+        ))}\n+      </ul>\n     </div>\n   );\n };\n \n-export default OrderList;\n+export default Orders;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742917134380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const Orders = ({ userId, token }) => {\n   const [orders, setOrders] = useState([]);\n \n   useEffect(() => {\n-    fetch(http://localhost:5000/orders/${userId}, {\n+    fetch(`http://localhost:5000/orders/${userId}, {\n       headers: { Authorization: Bearer ${token} },\n     })\n       .then((res) => res.json())\n       .then((data) => setOrders(data))\n"
                },
                {
                    "date": 1742917150035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { useEffect, useState } from \"react\";\n+\n+const Orders = ({ userId, token }) => {\n+  const [orders, setOrders] = useState([]);\n+\n+  useEffect(() => {\n+    fetch(`http://localhost:5000/orders/${userId}`, {\n+      headers: { Authorization: Bearer ${token} },\n+    })\n+      .then((res) => res.json())\n+      .then((data) => setOrders(data))\n+      .catch((error) => console.error(\"Error fetching orders:\", error));\n+  }, [userId, token]);\n+\n+  const handleCancel = async (orderId) => {\n+    await fetch(`http://localhost:5000/orders/cancel/${orderId}, {\n+      method: \"PATCH\",\n+      headers: { Authorization: Bearer ${token} },\n+    });\n+    setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n+  };\n+\n+  const handleDeliver = async (orderId) => {\n+    const response = await fetch(http://localhost:5000/orders/deliver/${orderId}, {\n+      method: \"PATCH\",\n+      headers: { Authorization: Bearer ${token} },\n+    });\n+    const data = await response.json();\n+    setOrders(\n+      orders.map((order) =>\n+        order.id === orderId ? { ...order, status: \"Delivered\", shipping: { ...order.shipping, deliveryDate: data.deliveryDate } } : order\n+      )\n+    );\n+  };\n+\n+  return (\n+    <div>\n+      <h2>My Orders</h2>\n+      <ul>\n+        {orders.map((order) => (\n+          <li key={order.id}>\n+            Order #{order.id} - {order.status} - {order.shipping?.deliveryDate || \"Not Delivered\"}\n+            <button onClick={() => handleCancel(order.id)} disabled={order.status !== \"Pending\"}>\n+              Cancel\n+            </button>\n+            <button onClick={() => handleDeliver(order.id)} disabled={order.status !== \"Pending\"}>\n+              Mark as Delivered\n+            </button>\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n+\n+export default Orders;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742917159846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n   const [orders, setOrders] = useState([]);\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n-      headers: { Authorization: Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token} },\n     })\n       .then((res) => res.json())\n       .then((data) => setOrders(data))\n       .catch((error) => console.error(\"Error fetching orders:\", error));\n   }, [userId, token]);\n \n   const handleCancel = async (orderId) => {\n-    await fetch(`http://localhost:5000/orders/cancel/${orderId}, {\n+    await fetch(`http://localhost:5000/orders/cancel/${orderId}`, {\n       method: \"PATCH\",\n       headers: { Authorization: Bearer ${token} },\n     });\n     setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n@@ -52,61 +52,5 @@\n     </div>\n   );\n };\n \n-export default Orders;\n-import { useEffect, useState } from \"react\";\n-\n-const Orders = ({ userId, token }) => {\n-  const [orders, setOrders] = useState([]);\n-\n-  useEffect(() => {\n-    fetch(`http://localhost:5000/orders/${userId}, {\n-      headers: { Authorization: Bearer ${token} },\n-    })\n-      .then((res) => res.json())\n-      .then((data) => setOrders(data))\n-      .catch((error) => console.error(\"Error fetching orders:\", error));\n-  }, [userId, token]);\n-\n-  const handleCancel = async (orderId) => {\n-    await fetch(http://localhost:5000/orders/cancel/${orderId}, {\n-      method: \"PATCH\",\n-      headers: { Authorization: Bearer ${token} },\n-    });\n-    setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n-  };\n-\n-  const handleDeliver = async (orderId) => {\n-    const response = await fetch(http://localhost:5000/orders/deliver/${orderId}, {\n-      method: \"PATCH\",\n-      headers: { Authorization: Bearer ${token} },\n-    });\n-    const data = await response.json();\n-    setOrders(\n-      orders.map((order) =>\n-        order.id === orderId ? { ...order, status: \"Delivered\", shipping: { ...order.shipping, deliveryDate: data.deliveryDate } } : order\n-      )\n-    );\n-  };\n-\n-  return (\n-    <div>\n-      <h2>My Orders</h2>\n-      <ul>\n-        {orders.map((order) => (\n-          <li key={order.id}>\n-            Order #{order.id} - {order.status} - {order.shipping?.deliveryDate || \"Not Delivered\"}\n-            <button onClick={() => handleCancel(order.id)} disabled={order.status !== \"Pending\"}>\n-              Cancel\n-            </button>\n-            <button onClick={() => handleDeliver(order.id)} disabled={order.status !== \"Pending\"}>\n-              Mark as Delivered\n-            </button>\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-\n export default Orders;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742917167634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   const [orders, setOrders] = useState([]);\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n-      headers: { Authorization: `Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token}` },\n     })\n       .then((res) => res.json())\n       .then((data) => setOrders(data))\n       .catch((error) => console.error(\"Error fetching orders:\", error));\n@@ -14,9 +14,9 @@\n \n   const handleCancel = async (orderId) => {\n     await fetch(`http://localhost:5000/orders/cancel/${orderId}`, {\n       method: \"PATCH\",\n-      headers: { Authorization: Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token} },\n     });\n     setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n   };\n \n"
                },
                {
                    "date": 1742917173950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,15 @@\n \n   const handleCancel = async (orderId) => {\n     await fetch(`http://localhost:5000/orders/cancel/${orderId}`, {\n       method: \"PATCH\",\n-      headers: { Authorization: `Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token}` },\n     });\n     setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n   };\n \n   const handleDeliver = async (orderId) => {\n-    const response = await fetch(http://localhost:5000/orders/deliver/${orderId}, {\n+    const response = await fetch(`http://localhost:5000/orders/deliver/${orderId}, {\n       method: \"PATCH\",\n       headers: { Authorization: Bearer ${token} },\n     });\n     const data = await response.json();\n"
                },
                {
                    "date": 1742917180917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n     setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: \"Canceled\" } : order)));\n   };\n \n   const handleDeliver = async (orderId) => {\n-    const response = await fetch(`http://localhost:5000/orders/deliver/${orderId}, {\n+    const response = await fetch(`http://localhost:5000/orders/deliver/${orderId}`, {\n       method: \"PATCH\",\n-      headers: { Authorization: Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token} },\n     });\n     const data = await response.json();\n     setOrders(\n       orders.map((order) =>\n"
                },
                {
                    "date": 1742917499445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useEffect, useState } from \"react\";\n \n-const Orders = ({ userId, token }) => {\n+const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n@@ -22,9 +22,9 @@\n \n   const handleDeliver = async (orderId) => {\n     const response = await fetch(`http://localhost:5000/orders/deliver/${orderId}`, {\n       method: \"PATCH\",\n-      headers: { Authorization: `Bearer ${token} },\n+      headers: { Authorization: `Bearer ${token}` },\n     });\n     const data = await response.json();\n     setOrders(\n       orders.map((order) =>\n"
                },
                {
                    "date": 1742917508558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { useEffect, useState } from \"react\";\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n+  const user\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917516374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useEffect, useState } from \"react\";\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n-  const user\n+  const userId = local\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917523896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useEffect, useState } from \"react\";\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n-  const userId = local\n+  const userId = localStorage.getItem(\"\")\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917533183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import { useEffect, useState } from \"react\";\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n-  const userId = localStorage.getItem(\"\")\n+  const userId = localStorage.getItem(\"userId\")\n+  const \n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917540302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n   const userId = localStorage.getItem(\"userId\")\n-  const \n+  const token = l\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917547067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n   const userId = localStorage.getItem(\"userId\")\n-  const token = l\n+  const token = localStorage.getItem\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                },
                {
                    "date": 1742917553137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n const Orders = ({ }) => {\n   const [orders, setOrders] = useState([]);\n   const userId = localStorage.getItem(\"userId\")\n-  const token = localStorage.getItem\n+  const token = localStorage.getItem(\"\")\n \n   useEffect(() => {\n     fetch(`http://localhost:5000/orders/${userId}`, {\n       headers: { Authorization: `Bearer ${token}` },\n"
                }
            ],
            "date": 1742914986920,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\nimport { fetchAllOrders } from '../';\n\nconst OrderList = () => {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const loadOrders = async () => {\n      try {\n        const data = await fetchAllOrders();\n        setOrders(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadOrders();\n  }, []);\n\n  if (loading) return <div>Loading orders...</div>;\n  if (error) return <div className=\"alert alert-danger\">{error}</div>;\n\n  return (\n    <div className=\"order-list\">\n      <h2>All Orders</h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>User</th>\n            <th>Date</th>\n            <th>Amount</th>\n            <th>Status</th>\n            <th>Delivery Date</th>\n            <th>Items</th>\n          </tr>\n        </thead>\n        <tbody>\n          {orders.map(order => (\n            <tr key={order.id}>\n              <td>{order.id}</td>\n              <td>{order.user.username} (ID: {order.user.userId})</td>\n              <td>{new Date(order.date).toLocaleString()}</td>\n              <td>${order.totalAmount.toFixed(2)}</td>\n              <td>{order.status}</td>\n              <td>{order.shipping.deliveryDate}</td>\n              <td>\n                {order.cart.map(item => (\n                  <div key={item.id}>\n                    {item.name} x{item.quantity}\n                  </div>\n                ))}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default OrderList;"
        }
    ]
}